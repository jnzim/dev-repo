
ATmega323_Com_buffer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000004e0  00000574  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000113  00800100  00800100  00000574  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000574  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000c40  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000cd7  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000b0  00000000  00000000  00000d06  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000871  00000000  00000000  00000db6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000246  00000000  00000000  00001627  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000311  00000000  00000000  0000186d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001b0  00000000  00000000  00001b80  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000523  00000000  00000000  00001d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000003bc  00000000  00000000  00002253  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000a0  00000000  00000000  0000260f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__vector_17>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	22 e0       	ldi	r18, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 31       	cpi	r26, 0x13	; 19
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 65 02 	call	0x4ca	; 0x4ca <main>
  88:	0c 94 6e 02 	jmp	0x4dc	; 0x4dc <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <RefreshCommandPacket>:

	int i = 0;


		// preload the first byte so the master doesn't get junk on the first transaction
		SPDR = upperByte(throttleAxis.thrust);
  90:	e1 eb       	ldi	r30, 0xB1	; 177
  92:	f1 e0       	ldi	r31, 0x01	; 1
  94:	81 81       	ldd	r24, Z+1	; 0x01
  96:	8e bd       	out	0x2e, r24	; 46
		commandPacket[i++] = lowerByte(throttleAxis.thrust);
  98:	80 81       	ld	r24, Z
  9a:	80 93 d3 01 	sts	0x01D3, r24
		
		commandPacket[i++] = upperByte(rollAxis.attitude_command);
  9e:	ed e0       	ldi	r30, 0x0D	; 13
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	80 81       	ld	r24, Z
  a4:	91 81       	ldd	r25, Z+1	; 0x01
  a6:	90 93 d4 01 	sts	0x01D4, r25
		commandPacket[i++] = lowerByte(rollAxis.attitude_command);
  aa:	80 93 d5 01 	sts	0x01D5, r24
		
		commandPacket[i++] = upperByte(pitchAxis.attitude_command);
  ae:	e3 e4       	ldi	r30, 0x43	; 67
  b0:	f1 e0       	ldi	r31, 0x01	; 1
  b2:	80 81       	ld	r24, Z
  b4:	91 81       	ldd	r25, Z+1	; 0x01
  b6:	90 93 d6 01 	sts	0x01D6, r25
		commandPacket[i++] = lowerByte(pitchAxis.attitude_command);
  ba:	80 93 d7 01 	sts	0x01D7, r24

		commandPacket[i++] = upperByte(yawAxis.attitude_command);
  be:	e7 ee       	ldi	r30, 0xE7	; 231
  c0:	f1 e0       	ldi	r31, 0x01	; 1
  c2:	80 81       	ld	r24, Z
  c4:	91 81       	ldd	r25, Z+1	; 0x01
  c6:	90 93 d8 01 	sts	0x01D8, r25
		commandPacket[i++] = lowerByte(yawAxis.attitude_command);
  ca:	80 93 d9 01 	sts	0x01D9, r24
		
		commandPacket[i++] = upperByte(pitchAxis.Kp_attitude);
  ce:	eb e3       	ldi	r30, 0x3B	; 59
  d0:	f1 e0       	ldi	r31, 0x01	; 1
  d2:	80 81       	ld	r24, Z
  d4:	91 81       	ldd	r25, Z+1	; 0x01
  d6:	90 93 da 01 	sts	0x01DA, r25
		commandPacket[i++] = lowerByte(pitchAxis.Kp_attitude);
  da:	80 93 db 01 	sts	0x01DB, r24
		
		commandPacket[i++] = upperByte(pitchAxis.Ki_attitude);
  de:	ed e3       	ldi	r30, 0x3D	; 61
  e0:	f1 e0       	ldi	r31, 0x01	; 1
  e2:	80 81       	ld	r24, Z
  e4:	91 81       	ldd	r25, Z+1	; 0x01
  e6:	90 93 dc 01 	sts	0x01DC, r25
		commandPacket[i++] = lowerByte(pitchAxis.Ki_attitude);
  ea:	80 93 dd 01 	sts	0x01DD, r24
		
		commandPacket[i++] = upperByte(pitchAxis.Kd_attitude);
  ee:	ef e3       	ldi	r30, 0x3F	; 63
  f0:	f1 e0       	ldi	r31, 0x01	; 1
  f2:	80 81       	ld	r24, Z
  f4:	91 81       	ldd	r25, Z+1	; 0x01
  f6:	90 93 de 01 	sts	0x01DE, r25
		commandPacket[i++] = lowerByte(pitchAxis.Kd_attitude);
  fa:	80 93 df 01 	sts	0x01DF, r24

		commandPacket[i++] = PACKET_END_CHAR;
  fe:	8c ec       	ldi	r24, 0xCC	; 204
 100:	80 93 e0 01 	sts	0x01E0, r24
		commandPacket[i++] = PACKET_END_CHAR;
 104:	80 93 e1 01 	sts	0x01E1, r24
 108:	08 95       	ret

0000010a <IsPacketEnd>:

bool IsPacketEnd(uint8_t thisByte)
{
	//static uint8_t theLastByte;
	//  both the current byte and the previous byte are PACKET_END_CHAR, got header is true
	if ((thisByte == PACKET_END_CHAR) && (lastByte == PACKET_END_CHAR))
 10a:	8c 3c       	cpi	r24, 0xCC	; 204
 10c:	69 f4       	brne	.+26     	; 0x128 <IsPacketEnd+0x1e>
 10e:	80 91 03 01 	lds	r24, 0x0103
 112:	8c 3c       	cpi	r24, 0xCC	; 204
 114:	21 f4       	brne	.+8      	; 0x11e <IsPacketEnd+0x14>
	{
		lastByte = 0x00;
 116:	10 92 03 01 	sts	0x0103, r1
		return true;
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	08 95       	ret
	}
	//  the current byte is PACKET_END_CHAR and the last byte is not, maybe the header start
	else if((thisByte == PACKET_END_CHAR) && (lastByte != PACKET_END_CHAR))
	{
		lastByte = PACKET_END_CHAR;
 11e:	8c ec       	ldi	r24, 0xCC	; 204
 120:	80 93 03 01 	sts	0x0103, r24
		return false;
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	08 95       	ret
	}
	//  the current byte is PACKET_END_CHAR, but the last byte is not, just keep trying
	else if((thisByte != PACKET_END_CHAR) && (lastByte == PACKET_END_CHAR))
 128:	80 91 03 01 	lds	r24, 0x0103
 12c:	8c 3c       	cpi	r24, 0xCC	; 204
 12e:	21 f4       	brne	.+8      	; 0x138 <IsPacketEnd+0x2e>
	{
		lastByte = 0x00;
 130:	10 92 03 01 	sts	0x0103, r1
		return false;
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	08 95       	ret
	}
	else
	{
		// neither  byte is PACKET_END_CHAR
		return false;
 138:	80 e0       	ldi	r24, 0x00	; 0
	}
	
}
 13a:	08 95       	ret

0000013c <parse_packet>:
{
	int i = 0;
	
	
	dummyVariable=(dummyVariable << 8 ) + incoming[i++];					//receive thrust
	dummyVariable=(dummyVariable << 8 ) + incoming[i++];					//receive thrust
 13c:	80 91 70 01 	lds	r24, 0x0170
 140:	80 93 02 01 	sts	0x0102, r24
	
	pitchAxis.attitude_feedback = (pitchAxis.attitude_feedback << 8 ) + incoming[i++];
 144:	e1 e4       	ldi	r30, 0x41	; 65
 146:	f1 e0       	ldi	r31, 0x01	; 1
 148:	90 81       	ld	r25, Z
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	20 91 71 01 	lds	r18, 0x0171
 150:	82 0f       	add	r24, r18
 152:	91 1d       	adc	r25, r1
	pitchAxis.attitude_feedback = (pitchAxis.attitude_feedback << 8 ) + incoming[i++];
 154:	98 2f       	mov	r25, r24
 156:	88 27       	eor	r24, r24
 158:	20 91 72 01 	lds	r18, 0x0172
 15c:	82 0f       	add	r24, r18
 15e:	91 1d       	adc	r25, r1
 160:	91 83       	std	Z+1, r25	; 0x01
 162:	80 83       	st	Z, r24
	
	rollAxis.attitude_feedback = (rollAxis.attitude_feedback << 8 ) + incoming[i++];
 164:	eb e0       	ldi	r30, 0x0B	; 11
 166:	f1 e0       	ldi	r31, 0x01	; 1
 168:	90 81       	ld	r25, Z
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	20 91 73 01 	lds	r18, 0x0173
 170:	82 0f       	add	r24, r18
 172:	91 1d       	adc	r25, r1
	rollAxis.attitude_feedback = (rollAxis.attitude_feedback << 8 ) + incoming[i++];
 174:	98 2f       	mov	r25, r24
 176:	88 27       	eor	r24, r24
 178:	20 91 74 01 	lds	r18, 0x0174
 17c:	82 0f       	add	r24, r18
 17e:	91 1d       	adc	r25, r1
 180:	91 83       	std	Z+1, r25	; 0x01
 182:	80 83       	st	Z, r24

	yawAxis.attitude_feedback = (yawAxis.attitude_feedback << 8 ) + incoming[i++];
 184:	e5 ee       	ldi	r30, 0xE5	; 229
 186:	f1 e0       	ldi	r31, 0x01	; 1
 188:	90 81       	ld	r25, Z
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	20 91 75 01 	lds	r18, 0x0175
 190:	82 0f       	add	r24, r18
 192:	91 1d       	adc	r25, r1
	yawAxis.attitude_feedback = (yawAxis.attitude_feedback << 8 ) + incoming[i++];
 194:	98 2f       	mov	r25, r24
 196:	88 27       	eor	r24, r24
 198:	20 91 76 01 	lds	r18, 0x0176
 19c:	82 0f       	add	r24, r18
 19e:	91 1d       	adc	r25, r1
 1a0:	91 83       	std	Z+1, r25	; 0x01
 1a2:	80 83       	st	Z, r24
	
	pitchAxis.rate_feedback = (pitchAxis.rate_feedback  << 8 ) + incoming[i++];
 1a4:	e1 e5       	ldi	r30, 0x51	; 81
 1a6:	f1 e0       	ldi	r31, 0x01	; 1
 1a8:	90 81       	ld	r25, Z
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	20 91 77 01 	lds	r18, 0x0177
 1b0:	82 0f       	add	r24, r18
 1b2:	91 1d       	adc	r25, r1
	pitchAxis.rate_feedback =(pitchAxis.rate_feedback  << 8 ) + incoming[i++];
 1b4:	98 2f       	mov	r25, r24
 1b6:	88 27       	eor	r24, r24
 1b8:	20 91 78 01 	lds	r18, 0x0178
 1bc:	82 0f       	add	r24, r18
 1be:	91 1d       	adc	r25, r1
 1c0:	91 83       	std	Z+1, r25	; 0x01
 1c2:	80 83       	st	Z, r24
	
	rollAxis.rate_feedback = (rollAxis.rate_feedback  << 8 ) + incoming[i++];
 1c4:	eb e1       	ldi	r30, 0x1B	; 27
 1c6:	f1 e0       	ldi	r31, 0x01	; 1
 1c8:	90 81       	ld	r25, Z
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	20 91 79 01 	lds	r18, 0x0179
 1d0:	82 0f       	add	r24, r18
 1d2:	91 1d       	adc	r25, r1
	rollAxis.rate_feedback =(rollAxis.rate_feedback  << 8 ) + incoming[i++];
 1d4:	98 2f       	mov	r25, r24
 1d6:	88 27       	eor	r24, r24
 1d8:	20 91 7a 01 	lds	r18, 0x017A
 1dc:	82 0f       	add	r24, r18
 1de:	91 1d       	adc	r25, r1
 1e0:	91 83       	std	Z+1, r25	; 0x01
 1e2:	80 83       	st	Z, r24
	
	yawAxis.rate_feedback = (yawAxis.rate_feedback   << 8 ) + incoming[i++];
 1e4:	e5 ef       	ldi	r30, 0xF5	; 245
 1e6:	f1 e0       	ldi	r31, 0x01	; 1
 1e8:	90 81       	ld	r25, Z
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	20 91 7b 01 	lds	r18, 0x017B
 1f0:	82 0f       	add	r24, r18
 1f2:	91 1d       	adc	r25, r1
	yawAxis.rate_feedback = (yawAxis.rate_feedback   << 8 ) + incoming[i++];
 1f4:	98 2f       	mov	r25, r24
 1f6:	88 27       	eor	r24, r24
 1f8:	20 91 7c 01 	lds	r18, 0x017C
 1fc:	82 0f       	add	r24, r18
 1fe:	91 1d       	adc	r25, r1
 200:	91 83       	std	Z+1, r25	; 0x01
 202:	80 83       	st	Z, r24
 204:	08 95       	ret

00000206 <SPI_transaction>:
}


//  read and write SPI
uint8_t SPI_transaction(uint8_t data)
{
 206:	98 2f       	mov	r25, r24
	//  the interrupt flag was set when the ISR was called do just read the data register, then copy the data to be sent to the register,
	//  return the received byte
	uint8_t recivedByte = SPDR;
 208:	8e b5       	in	r24, 0x2e	; 46
	SPDR  = data ;
 20a:	9e bd       	out	0x2e, r25	; 46
	return recivedByte;
}
 20c:	08 95       	ret

0000020e <transmit_SPI_Packet>:
void transmit_SPI_Packet()
{
	
	//  check to see if we have found the 2 byte end of packet indicator
	//  bool isEnd = IsPacketEnd(rdata = SPI_transaction(commandPacket[received]));
	bool isEnd = IsPacketEnd(rdata = SPI_transaction(commandPacket[received]));
 20e:	e0 91 00 01 	lds	r30, 0x0100
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	ed 52       	subi	r30, 0x2D	; 45
 216:	fe 4f       	sbci	r31, 0xFE	; 254
 218:	80 81       	ld	r24, Z
 21a:	0e 94 03 01 	call	0x206	; 0x206 <SPI_transaction>
 21e:	80 93 04 01 	sts	0x0104, r24
 222:	0e 94 85 00 	call	0x10a	; 0x10a <IsPacketEnd>

	//  if we have not found the end of packet and we have not gathered the correct number of bytes, collect a byte 
	if   ((received != (BUFSIZE-1))  && (!isEnd))
 226:	90 91 00 01 	lds	r25, 0x0100
 22a:	9f 30       	cpi	r25, 0x0F	; 15
 22c:	99 f0       	breq	.+38     	; 0x254 <transmit_SPI_Packet+0x46>
 22e:	81 11       	cpse	r24, r1
 230:	39 c0       	rjmp	.+114    	; 0x2a4 <transmit_SPI_Packet+0x96>
	{
		//USART_send_byte(received);
		incoming[received++]  = rdata;
 232:	80 91 00 01 	lds	r24, 0x0100
 236:	e8 2f       	mov	r30, r24
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	e1 59       	subi	r30, 0x91	; 145
 23c:	fe 4f       	sbci	r31, 0xFE	; 254
 23e:	90 91 04 01 	lds	r25, 0x0104
 242:	90 83       	st	Z, r25
 244:	8f 5f       	subi	r24, 0xFF	; 255
 246:	80 93 00 01 	sts	0x0100, r24
		
		tbi(PORTC,PC5);
 24a:	98 b1       	in	r25, 0x08	; 8
 24c:	80 e2       	ldi	r24, 0x20	; 32
 24e:	89 27       	eor	r24, r25
 250:	88 b9       	out	0x08, r24	; 8
 252:	08 95       	ret
	}
	//  if we have found the end of packet and we have gathered the correct number of bytes, parse the data
	//  also we should be able to do a UART transaction before the next SPI frame starts,  depend of PC and Xmega data rates tho
	else if ((received == (BUFSIZE-1))  && isEnd)
 254:	90 91 00 01 	lds	r25, 0x0100
 258:	9f 30       	cpi	r25, 0x0F	; 15
 25a:	71 f4       	brne	.+28     	; 0x278 <transmit_SPI_Packet+0x6a>
 25c:	88 23       	and	r24, r24
 25e:	39 f1       	breq	.+78     	; 0x2ae <transmit_SPI_Packet+0xa0>
	{
		parse_packet();
 260:	0e 94 9e 00 	call	0x13c	; 0x13c <parse_packet>

		received = 0;
 264:	10 92 00 01 	sts	0x0100, r1
		gotIMU_Packet = true;	
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	80 93 01 01 	sts	0x0101, r24
		tbi(PORTC,PC4);			// 150mSec
 26e:	98 b1       	in	r25, 0x08	; 8
 270:	80 e1       	ldi	r24, 0x10	; 16
 272:	89 27       	eor	r24, r25
 274:	88 b9       	out	0x08, r24	; 8
 276:	08 95       	ret
		//TransactWithPC();
	}
	//  we found the the end of packet sequence but did not gather the correct number of bytes, something is wrong
	//  try to sync
	else if ((received != (BUFSIZE-1)) && isEnd)
 278:	90 91 00 01 	lds	r25, 0x0100
 27c:	9f 30       	cpi	r25, 0x0F	; 15
 27e:	29 f0       	breq	.+10     	; 0x28a <transmit_SPI_Packet+0x7c>
 280:	88 23       	and	r24, r24
 282:	e1 f0       	breq	.+56     	; 0x2bc <transmit_SPI_Packet+0xae>
	{
		received = 0;
 284:	10 92 00 01 	sts	0x0100, r1
 288:	08 95       	ret
		//tbi(PORTC,PC3);
		
	}
	//  got the correct number of byte but no packed is, resync
	else if ((received == (BUFSIZE-1)) && !(isEnd))
 28a:	90 91 00 01 	lds	r25, 0x0100
 28e:	9f 30       	cpi	r25, 0x0F	; 15
 290:	f9 f4       	brne	.+62     	; 0x2d0 <transmit_SPI_Packet+0xc2>
 292:	81 11       	cpse	r24, r1
 294:	1d c0       	rjmp	.+58     	; 0x2d0 <transmit_SPI_Packet+0xc2>
	{
		received = 0;
 296:	10 92 00 01 	sts	0x0100, r1
		tbi(PORTC,PC2);
 29a:	98 b1       	in	r25, 0x08	; 8
 29c:	84 e0       	ldi	r24, 0x04	; 4
 29e:	89 27       	eor	r24, r25
 2a0:	88 b9       	out	0x08, r24	; 8
 2a2:	08 95       	ret
		
		tbi(PORTC,PC5);
	}
	//  if we have found the end of packet and we have gathered the correct number of bytes, parse the data
	//  also we should be able to do a UART transaction before the next SPI frame starts,  depend of PC and Xmega data rates tho
	else if ((received == (BUFSIZE-1))  && isEnd)
 2a4:	90 91 00 01 	lds	r25, 0x0100
 2a8:	9f 30       	cpi	r25, 0x0F	; 15
 2aa:	69 f4       	brne	.+26     	; 0x2c6 <transmit_SPI_Packet+0xb8>
 2ac:	d9 cf       	rjmp	.-78     	; 0x260 <transmit_SPI_Packet+0x52>
		tbi(PORTC,PC4);			// 150mSec
		//TransactWithPC();
	}
	//  we found the the end of packet sequence but did not gather the correct number of bytes, something is wrong
	//  try to sync
	else if ((received != (BUFSIZE-1)) && isEnd)
 2ae:	80 91 00 01 	lds	r24, 0x0100
		received = 0;
		//tbi(PORTC,PC3);
		
	}
	//  got the correct number of byte but no packed is, resync
	else if ((received == (BUFSIZE-1)) && !(isEnd))
 2b2:	80 91 00 01 	lds	r24, 0x0100
 2b6:	8f 30       	cpi	r24, 0x0F	; 15
 2b8:	59 f4       	brne	.+22     	; 0x2d0 <transmit_SPI_Packet+0xc2>
 2ba:	ed cf       	rjmp	.-38     	; 0x296 <transmit_SPI_Packet+0x88>
 2bc:	80 91 00 01 	lds	r24, 0x0100
 2c0:	8f 30       	cpi	r24, 0x0F	; 15
 2c2:	31 f4       	brne	.+12     	; 0x2d0 <transmit_SPI_Packet+0xc2>
 2c4:	e8 cf       	rjmp	.-48     	; 0x296 <transmit_SPI_Packet+0x88>
		tbi(PORTC,PC4);			// 150mSec
		//TransactWithPC();
	}
	//  we found the the end of packet sequence but did not gather the correct number of bytes, something is wrong
	//  try to sync
	else if ((received != (BUFSIZE-1)) && isEnd)
 2c6:	90 91 00 01 	lds	r25, 0x0100
 2ca:	9f 30       	cpi	r25, 0x0F	; 15
 2cc:	d9 f6       	brne	.-74     	; 0x284 <transmit_SPI_Packet+0x76>
 2ce:	dd cf       	rjmp	.-70     	; 0x28a <transmit_SPI_Packet+0x7c>
 2d0:	08 95       	ret

000002d2 <__vector_17>:
  INPUT:
  OUTPUT:
  DISCRIPTION:  SPI ISR, called every time a byte is received in the SPI data register
*********************************************************************************************************** */
ISR(SPI_STC_vect)
{	
 2d2:	1f 92       	push	r1
 2d4:	0f 92       	push	r0
 2d6:	0f b6       	in	r0, 0x3f	; 63
 2d8:	0f 92       	push	r0
 2da:	11 24       	eor	r1, r1
 2dc:	2f 93       	push	r18
 2de:	3f 93       	push	r19
 2e0:	4f 93       	push	r20
 2e2:	5f 93       	push	r21
 2e4:	6f 93       	push	r22
 2e6:	7f 93       	push	r23
 2e8:	8f 93       	push	r24
 2ea:	9f 93       	push	r25
 2ec:	af 93       	push	r26
 2ee:	bf 93       	push	r27
 2f0:	ef 93       	push	r30
 2f2:	ff 93       	push	r31
	tbi(PORTC,PC3);
 2f4:	98 b1       	in	r25, 0x08	; 8
 2f6:	88 e0       	ldi	r24, 0x08	; 8
 2f8:	89 27       	eor	r24, r25
 2fa:	88 b9       	out	0x08, r24	; 8
	transmit_SPI_Packet();
 2fc:	0e 94 07 01 	call	0x20e	; 0x20e <transmit_SPI_Packet>
	
}
 300:	ff 91       	pop	r31
 302:	ef 91       	pop	r30
 304:	bf 91       	pop	r27
 306:	af 91       	pop	r26
 308:	9f 91       	pop	r25
 30a:	8f 91       	pop	r24
 30c:	7f 91       	pop	r23
 30e:	6f 91       	pop	r22
 310:	5f 91       	pop	r21
 312:	4f 91       	pop	r20
 314:	3f 91       	pop	r19
 316:	2f 91       	pop	r18
 318:	0f 90       	pop	r0
 31a:	0f be       	out	0x3f, r0	; 63
 31c:	0f 90       	pop	r0
 31e:	1f 90       	pop	r1
 320:	18 95       	reti

00000322 <USART_init>:


void USART_init(void)
{
	// UBBRR values, 115200bps @ 11Mhz from Worm food on line calculator
	UBRR0H = 0x00;
 322:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 0x05;
 326:	85 e0       	ldi	r24, 0x05	; 5
 328:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 32c:	88 e1       	ldi	r24, 0x18	; 24
 32e:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = (3<<UCSZ00);
 332:	86 e0       	ldi	r24, 0x06	; 6
 334:	80 93 c2 00 	sts	0x00C2, r24
 338:	08 95       	ret

0000033a <USART_receive>:

//read in one byte
uint8_t USART_receive(void)
{
	//  RXCn  is set when the Rx is complete
	while(!(UCSR0A & (1 << RXC0)));
 33a:	e0 ec       	ldi	r30, 0xC0	; 192
 33c:	f0 e0       	ldi	r31, 0x00	; 0
 33e:	80 81       	ld	r24, Z
 340:	88 23       	and	r24, r24
 342:	ec f7       	brge	.-6      	; 0x33e <USART_receive+0x4>
	//  one the RXC0 bit is set, we can load the data register with the byte to send
	return UDR0;
 344:	80 91 c6 00 	lds	r24, 0x00C6
	
}
 348:	08 95       	ret

0000034a <Read_USART_CommandData>:
//250 mSec * 1000mSec / 1 Sec * 1/32,000,000
//  this date is read in on the USART, it's sent from the PC
//  joystick commands, gains...
//this should be call every 42mSec, 
uint8_t Read_USART_CommandData()
{	
 34a:	cf 93       	push	r28
		
		bool gotHeader = false;
 34c:	c0 e0       	ldi	r28, 0x00	; 0

		//  hold execution until we get the 2 byte header character
		while (gotHeader == false)
		{
			if (USART_receive() == PACKET_END_CHAR)
 34e:	0e 94 9d 01 	call	0x33a	; 0x33a <USART_receive>
 352:	8c 3c       	cpi	r24, 0xCC	; 204
 354:	39 f4       	brne	.+14     	; 0x364 <Read_USART_CommandData+0x1a>
			{
				if (USART_receive() == PACKET_END_CHAR)
 356:	0e 94 9d 01 	call	0x33a	; 0x33a <USART_receive>
 35a:	8c 3c       	cpi	r24, 0xCC	; 204
 35c:	29 f0       	breq	.+10     	; 0x368 <Read_USART_CommandData+0x1e>
{	
		
		bool gotHeader = false;

		//  hold execution until we get the 2 byte header character
		while (gotHeader == false)
 35e:	cc 23       	and	r28, r28
 360:	b1 f3       	breq	.-20     	; 0x34e <Read_USART_CommandData+0x4>
 362:	02 c0       	rjmp	.+4      	; 0x368 <Read_USART_CommandData+0x1e>
 364:	cc 23       	and	r28, r28
 366:	99 f3       	breq	.-26     	; 0x34e <Read_USART_CommandData+0x4>
					//tbi(PORTC,PC3);
				}
			}
		}
		
		throttleAxis.thrust = (USART_receive() << 8) | USART_receive();
 368:	0e 94 9d 01 	call	0x33a	; 0x33a <USART_receive>
 36c:	c8 2f       	mov	r28, r24
 36e:	0e 94 9d 01 	call	0x33a	; 0x33a <USART_receive>
 372:	3c 2f       	mov	r19, r28
 374:	20 e0       	ldi	r18, 0x00	; 0
 376:	28 2b       	or	r18, r24
 378:	30 93 b2 01 	sts	0x01B2, r19
 37c:	20 93 b1 01 	sts	0x01B1, r18
		rollAxis.attitude_command = (USART_receive() << 8) | USART_receive();
 380:	0e 94 9d 01 	call	0x33a	; 0x33a <USART_receive>
 384:	c8 2f       	mov	r28, r24
 386:	0e 94 9d 01 	call	0x33a	; 0x33a <USART_receive>
 38a:	3c 2f       	mov	r19, r28
 38c:	20 e0       	ldi	r18, 0x00	; 0
 38e:	28 2b       	or	r18, r24
 390:	30 93 0e 01 	sts	0x010E, r19
 394:	20 93 0d 01 	sts	0x010D, r18
		pitchAxis.attitude_command = (USART_receive() << 8) | USART_receive();
 398:	0e 94 9d 01 	call	0x33a	; 0x33a <USART_receive>
 39c:	c8 2f       	mov	r28, r24
 39e:	0e 94 9d 01 	call	0x33a	; 0x33a <USART_receive>
 3a2:	3c 2f       	mov	r19, r28
 3a4:	20 e0       	ldi	r18, 0x00	; 0
 3a6:	28 2b       	or	r18, r24
 3a8:	30 93 44 01 	sts	0x0144, r19
 3ac:	20 93 43 01 	sts	0x0143, r18
		yawAxis.attitude_command = (USART_receive() << 8) | USART_receive();
 3b0:	0e 94 9d 01 	call	0x33a	; 0x33a <USART_receive>
 3b4:	c8 2f       	mov	r28, r24
 3b6:	0e 94 9d 01 	call	0x33a	; 0x33a <USART_receive>
 3ba:	3c 2f       	mov	r19, r28
 3bc:	20 e0       	ldi	r18, 0x00	; 0
 3be:	28 2b       	or	r18, r24
 3c0:	30 93 e8 01 	sts	0x01E8, r19
 3c4:	20 93 e7 01 	sts	0x01E7, r18
		pitchAxis.Kp_attitude = (USART_receive() << 8) | USART_receive();
 3c8:	0e 94 9d 01 	call	0x33a	; 0x33a <USART_receive>
 3cc:	c8 2f       	mov	r28, r24
 3ce:	0e 94 9d 01 	call	0x33a	; 0x33a <USART_receive>
 3d2:	3c 2f       	mov	r19, r28
 3d4:	20 e0       	ldi	r18, 0x00	; 0
 3d6:	28 2b       	or	r18, r24
 3d8:	30 93 3c 01 	sts	0x013C, r19
 3dc:	20 93 3b 01 	sts	0x013B, r18
		pitchAxis.Ki_attitude = (USART_receive() << 8) | USART_receive();
 3e0:	0e 94 9d 01 	call	0x33a	; 0x33a <USART_receive>
 3e4:	c8 2f       	mov	r28, r24
 3e6:	0e 94 9d 01 	call	0x33a	; 0x33a <USART_receive>
 3ea:	3c 2f       	mov	r19, r28
 3ec:	20 e0       	ldi	r18, 0x00	; 0
 3ee:	28 2b       	or	r18, r24
 3f0:	30 93 3e 01 	sts	0x013E, r19
 3f4:	20 93 3d 01 	sts	0x013D, r18
		pitchAxis.Kd_attitude = (USART_receive() << 8) | USART_receive();
 3f8:	0e 94 9d 01 	call	0x33a	; 0x33a <USART_receive>
 3fc:	c8 2f       	mov	r28, r24
 3fe:	0e 94 9d 01 	call	0x33a	; 0x33a <USART_receive>
 402:	3c 2f       	mov	r19, r28
 404:	20 e0       	ldi	r18, 0x00	; 0
 406:	28 2b       	or	r18, r24
 408:	30 93 40 01 	sts	0x0140, r19
 40c:	20 93 3f 01 	sts	0x013F, r18
		
		return 1;
			
}
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	cf 91       	pop	r28
 414:	08 95       	ret

00000416 <SPIinitSlave>:




void SPIinitSlave()
{
 416:	cf 93       	push	r28
 418:	df 93       	push	r29
 41a:	1f 92       	push	r1
 41c:	cd b7       	in	r28, 0x3d	; 61
 41e:	de b7       	in	r29, 0x3e	; 62

    //**********************************************************
	volatile char IOReg;
	// Set PB6(MISO) as output
	DDRB    = (1<<PB4);											
 420:	80 e1       	ldi	r24, 0x10	; 16
 422:	84 b9       	out	0x04, r24	; 4
	SPCR = (1<<SPIE)|(1<<SPE)|(0<<DORD)|(0<<CPOL)|(0<<CPHA);				// Enable SPI Interrupt and SPI in Slave Mode with SCK = CK/4
 424:	80 ec       	ldi	r24, 0xC0	; 192
 426:	8c bd       	out	0x2c, r24	; 44
	IOReg   = SPSR;															// Clear SPIF bit in SPSR
 428:	8d b5       	in	r24, 0x2d	; 45
 42a:	89 83       	std	Y+1, r24	; 0x01
	IOReg   = SPDR;
 42c:	8e b5       	in	r24, 0x2e	; 46
 42e:	89 83       	std	Y+1, r24	; 0x01
	SPDR = 0x00;															// initialize SPI daat register
 430:	1e bc       	out	0x2e, r1	; 46
	sei();																	// Enable global interrupt			
 432:	78 94       	sei
	

}
 434:	0f 90       	pop	r0
 436:	df 91       	pop	r29
 438:	cf 91       	pop	r28
 43a:	08 95       	ret

0000043c <USART_sendData_int16>:

//send 16 bit data on USART, 2 bytes
void USART_sendData_int16(int16_t sendthis)
{
	//  send upper byte
	while(!(UCSR0A & (1<<UDRE0)));
 43c:	e0 ec       	ldi	r30, 0xC0	; 192
 43e:	f0 e0       	ldi	r31, 0x00	; 0
 440:	20 81       	ld	r18, Z
 442:	25 ff       	sbrs	r18, 5
 444:	fd cf       	rjmp	.-6      	; 0x440 <USART_sendData_int16+0x4>
	UDR0 = MASK_TOP_BYTE & (sendthis >> 8);
 446:	90 93 c6 00 	sts	0x00C6, r25
	
	//  send lower byte
	while(!(UCSR0A & (1<<UDRE0)));
 44a:	e0 ec       	ldi	r30, 0xC0	; 192
 44c:	f0 e0       	ldi	r31, 0x00	; 0
 44e:	90 81       	ld	r25, Z
 450:	95 ff       	sbrs	r25, 5
 452:	fd cf       	rjmp	.-6      	; 0x44e <USART_sendData_int16+0x12>
	UDR0 = (MASK_TOP_BYTE & sendthis);
 454:	80 93 c6 00 	sts	0x00C6, r24
 458:	08 95       	ret

0000045a <Send_USART_PC_Data>:

//  the number of bytes in begin transfered in this function
// should match the number of bytes the PC expects to receive
void Send_USART_PC_Data()
{
	USART_sendData_int16(0xCCCC);					// send header first
 45a:	8c ec       	ldi	r24, 0xCC	; 204
 45c:	9c ec       	ldi	r25, 0xCC	; 204
 45e:	0e 94 1e 02 	call	0x43c	; 0x43c <USART_sendData_int16>

	USART_sendData_int16(throttleAxis.thrust);
 462:	80 91 b1 01 	lds	r24, 0x01B1
 466:	90 91 b2 01 	lds	r25, 0x01B2
 46a:	0e 94 1e 02 	call	0x43c	; 0x43c <USART_sendData_int16>
	USART_sendData_int16(pitchAxis.attitude_feedback);
 46e:	80 91 41 01 	lds	r24, 0x0141
 472:	90 91 42 01 	lds	r25, 0x0142
 476:	0e 94 1e 02 	call	0x43c	; 0x43c <USART_sendData_int16>
	USART_sendData_int16(rollAxis.attitude_feedback);
 47a:	80 91 0b 01 	lds	r24, 0x010B
 47e:	90 91 0c 01 	lds	r25, 0x010C
 482:	0e 94 1e 02 	call	0x43c	; 0x43c <USART_sendData_int16>
	USART_sendData_int16(yawAxis.attitude_feedback);
 486:	80 91 e5 01 	lds	r24, 0x01E5
 48a:	90 91 e6 01 	lds	r25, 0x01E6
 48e:	0e 94 1e 02 	call	0x43c	; 0x43c <USART_sendData_int16>
	USART_sendData_int16(pitchAxis.rate_feedback);
 492:	80 91 51 01 	lds	r24, 0x0151
 496:	90 91 52 01 	lds	r25, 0x0152
 49a:	0e 94 1e 02 	call	0x43c	; 0x43c <USART_sendData_int16>
	USART_sendData_int16(rollAxis.rate_feedback);
 49e:	80 91 1b 01 	lds	r24, 0x011B
 4a2:	90 91 1c 01 	lds	r25, 0x011C
 4a6:	0e 94 1e 02 	call	0x43c	; 0x43c <USART_sendData_int16>
	USART_sendData_int16(yawAxis.rate_feedback);
 4aa:	80 91 f5 01 	lds	r24, 0x01F5
 4ae:	90 91 f6 01 	lds	r25, 0x01F6
 4b2:	0e 94 1e 02 	call	0x43c	; 0x43c <USART_sendData_int16>
 4b6:	08 95       	ret

000004b8 <TransactWithPC>:


TransactWithPC()
{
	
			Read_USART_CommandData();
 4b8:	0e 94 a5 01 	call	0x34a	; 0x34a <Read_USART_CommandData>
			Send_USART_PC_Data();
 4bc:	0e 94 2d 02 	call	0x45a	; 0x45a <Send_USART_PC_Data>
			RefreshCommandPacket();
 4c0:	0e 94 48 00 	call	0x90	; 0x90 <RefreshCommandPacket>
			gotIMU_Packet = false;
 4c4:	10 92 01 01 	sts	0x0101, r1
 4c8:	08 95       	ret

000004ca <main>:
bool SPI_IsBusy = false;


int main()
{
	DDRC=0xff;									//Data direction register on PORTC as OUTPUT
 4ca:	8f ef       	ldi	r24, 0xFF	; 255
 4cc:	87 b9       	out	0x07, r24	; 7
	USART_init();
 4ce:	0e 94 91 01 	call	0x322	; 0x322 <USART_init>
	SPIinitSlave();
 4d2:	0e 94 0b 02 	call	0x416	; 0x416 <SPIinitSlave>
	//Timer_init();

	
	while(1) 
	{
	TransactWithPC();		
 4d6:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <TransactWithPC>
 4da:	fd cf       	rjmp	.-6      	; 0x4d6 <main+0xc>

000004dc <_exit>:
 4dc:	f8 94       	cli

000004de <__stop_program>:
 4de:	ff cf       	rjmp	.-2      	; 0x4de <__stop_program>
