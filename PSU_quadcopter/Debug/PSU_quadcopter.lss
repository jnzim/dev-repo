
PSU_quadcopter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c0c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00802000  00000c0c  00000ca0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000017f  00802006  00802006  00000ca6  2**0
                  ALLOC
  3 .stab         00003c24  00000000  00000000  00000ca8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001067  00000000  00000000  000048cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00005933  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000358  00000000  00000000  00005962  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000050bc  00000000  00000000  00005cba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001028  00000000  00000000  0000ad76  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001ecc  00000000  00000000  0000bd9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000860  00000000  00000000  0000dc6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001baf  00000000  00000000  0000e4cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000019b3  00000000  00000000  0001007b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000002b8  00000000  00000000  00011a2e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	f9 c0       	rjmp	.+498    	; 0x1f4 <__ctors_end>
   2:	00 00       	nop
   4:	1b c1       	rjmp	.+566    	; 0x23c <__bad_interrupt>
   6:	00 00       	nop
   8:	19 c1       	rjmp	.+562    	; 0x23c <__bad_interrupt>
   a:	00 00       	nop
   c:	17 c1       	rjmp	.+558    	; 0x23c <__bad_interrupt>
   e:	00 00       	nop
  10:	15 c1       	rjmp	.+554    	; 0x23c <__bad_interrupt>
  12:	00 00       	nop
  14:	13 c1       	rjmp	.+550    	; 0x23c <__bad_interrupt>
  16:	00 00       	nop
  18:	11 c1       	rjmp	.+546    	; 0x23c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	0f c1       	rjmp	.+542    	; 0x23c <__bad_interrupt>
  1e:	00 00       	nop
  20:	0d c1       	rjmp	.+538    	; 0x23c <__bad_interrupt>
  22:	00 00       	nop
  24:	0b c1       	rjmp	.+534    	; 0x23c <__bad_interrupt>
  26:	00 00       	nop
  28:	09 c1       	rjmp	.+530    	; 0x23c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	07 c1       	rjmp	.+526    	; 0x23c <__bad_interrupt>
  2e:	00 00       	nop
  30:	05 c1       	rjmp	.+522    	; 0x23c <__bad_interrupt>
  32:	00 00       	nop
  34:	03 c1       	rjmp	.+518    	; 0x23c <__bad_interrupt>
  36:	00 00       	nop
  38:	01 c1       	rjmp	.+514    	; 0x23c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	ff c0       	rjmp	.+510    	; 0x23c <__bad_interrupt>
  3e:	00 00       	nop
  40:	fd c0       	rjmp	.+506    	; 0x23c <__bad_interrupt>
  42:	00 00       	nop
  44:	fb c0       	rjmp	.+502    	; 0x23c <__bad_interrupt>
  46:	00 00       	nop
  48:	f9 c0       	rjmp	.+498    	; 0x23c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	f7 c0       	rjmp	.+494    	; 0x23c <__bad_interrupt>
  4e:	00 00       	nop
  50:	f5 c0       	rjmp	.+490    	; 0x23c <__bad_interrupt>
  52:	00 00       	nop
  54:	f3 c0       	rjmp	.+486    	; 0x23c <__bad_interrupt>
  56:	00 00       	nop
  58:	f1 c0       	rjmp	.+482    	; 0x23c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	ef c0       	rjmp	.+478    	; 0x23c <__bad_interrupt>
  5e:	00 00       	nop
  60:	ed c0       	rjmp	.+474    	; 0x23c <__bad_interrupt>
  62:	00 00       	nop
  64:	eb c0       	rjmp	.+470    	; 0x23c <__bad_interrupt>
  66:	00 00       	nop
  68:	e9 c0       	rjmp	.+466    	; 0x23c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	e7 c0       	rjmp	.+462    	; 0x23c <__bad_interrupt>
  6e:	00 00       	nop
  70:	e5 c0       	rjmp	.+458    	; 0x23c <__bad_interrupt>
  72:	00 00       	nop
  74:	e3 c0       	rjmp	.+454    	; 0x23c <__bad_interrupt>
  76:	00 00       	nop
  78:	e1 c0       	rjmp	.+450    	; 0x23c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	df c0       	rjmp	.+446    	; 0x23c <__bad_interrupt>
  7e:	00 00       	nop
  80:	dd c0       	rjmp	.+442    	; 0x23c <__bad_interrupt>
  82:	00 00       	nop
  84:	db c0       	rjmp	.+438    	; 0x23c <__bad_interrupt>
  86:	00 00       	nop
  88:	d9 c0       	rjmp	.+434    	; 0x23c <__bad_interrupt>
  8a:	00 00       	nop
  8c:	d7 c0       	rjmp	.+430    	; 0x23c <__bad_interrupt>
  8e:	00 00       	nop
  90:	d5 c0       	rjmp	.+426    	; 0x23c <__bad_interrupt>
  92:	00 00       	nop
  94:	d3 c0       	rjmp	.+422    	; 0x23c <__bad_interrupt>
  96:	00 00       	nop
  98:	d1 c0       	rjmp	.+418    	; 0x23c <__bad_interrupt>
  9a:	00 00       	nop
  9c:	cf c0       	rjmp	.+414    	; 0x23c <__bad_interrupt>
  9e:	00 00       	nop
  a0:	cd c0       	rjmp	.+410    	; 0x23c <__bad_interrupt>
  a2:	00 00       	nop
  a4:	cb c0       	rjmp	.+406    	; 0x23c <__bad_interrupt>
  a6:	00 00       	nop
  a8:	c9 c0       	rjmp	.+402    	; 0x23c <__bad_interrupt>
  aa:	00 00       	nop
  ac:	c7 c0       	rjmp	.+398    	; 0x23c <__bad_interrupt>
  ae:	00 00       	nop
  b0:	c5 c0       	rjmp	.+394    	; 0x23c <__bad_interrupt>
  b2:	00 00       	nop
  b4:	c3 c0       	rjmp	.+390    	; 0x23c <__bad_interrupt>
  b6:	00 00       	nop
  b8:	c1 c0       	rjmp	.+386    	; 0x23c <__bad_interrupt>
  ba:	00 00       	nop
  bc:	bf c0       	rjmp	.+382    	; 0x23c <__bad_interrupt>
  be:	00 00       	nop
  c0:	bd c0       	rjmp	.+378    	; 0x23c <__bad_interrupt>
  c2:	00 00       	nop
  c4:	bb c0       	rjmp	.+374    	; 0x23c <__bad_interrupt>
  c6:	00 00       	nop
  c8:	b9 c0       	rjmp	.+370    	; 0x23c <__bad_interrupt>
  ca:	00 00       	nop
  cc:	b7 c0       	rjmp	.+366    	; 0x23c <__bad_interrupt>
  ce:	00 00       	nop
  d0:	b5 c0       	rjmp	.+362    	; 0x23c <__bad_interrupt>
  d2:	00 00       	nop
  d4:	b3 c0       	rjmp	.+358    	; 0x23c <__bad_interrupt>
  d6:	00 00       	nop
  d8:	b1 c0       	rjmp	.+354    	; 0x23c <__bad_interrupt>
  da:	00 00       	nop
  dc:	af c0       	rjmp	.+350    	; 0x23c <__bad_interrupt>
  de:	00 00       	nop
  e0:	ad c0       	rjmp	.+346    	; 0x23c <__bad_interrupt>
  e2:	00 00       	nop
  e4:	ab c0       	rjmp	.+342    	; 0x23c <__bad_interrupt>
  e6:	00 00       	nop
  e8:	a9 c0       	rjmp	.+338    	; 0x23c <__bad_interrupt>
  ea:	00 00       	nop
  ec:	a7 c0       	rjmp	.+334    	; 0x23c <__bad_interrupt>
  ee:	00 00       	nop
  f0:	a5 c0       	rjmp	.+330    	; 0x23c <__bad_interrupt>
  f2:	00 00       	nop
  f4:	a3 c0       	rjmp	.+326    	; 0x23c <__bad_interrupt>
  f6:	00 00       	nop
  f8:	a1 c0       	rjmp	.+322    	; 0x23c <__bad_interrupt>
  fa:	00 00       	nop
  fc:	9f c0       	rjmp	.+318    	; 0x23c <__bad_interrupt>
  fe:	00 00       	nop
 100:	9d c0       	rjmp	.+314    	; 0x23c <__bad_interrupt>
 102:	00 00       	nop
 104:	9b c0       	rjmp	.+310    	; 0x23c <__bad_interrupt>
 106:	00 00       	nop
 108:	99 c0       	rjmp	.+306    	; 0x23c <__bad_interrupt>
 10a:	00 00       	nop
 10c:	97 c0       	rjmp	.+302    	; 0x23c <__bad_interrupt>
 10e:	00 00       	nop
 110:	95 c0       	rjmp	.+298    	; 0x23c <__bad_interrupt>
 112:	00 00       	nop
 114:	93 c0       	rjmp	.+294    	; 0x23c <__bad_interrupt>
 116:	00 00       	nop
 118:	91 c0       	rjmp	.+290    	; 0x23c <__bad_interrupt>
 11a:	00 00       	nop
 11c:	8f c0       	rjmp	.+286    	; 0x23c <__bad_interrupt>
 11e:	00 00       	nop
 120:	8d c0       	rjmp	.+282    	; 0x23c <__bad_interrupt>
 122:	00 00       	nop
 124:	8b c0       	rjmp	.+278    	; 0x23c <__bad_interrupt>
 126:	00 00       	nop
 128:	89 c0       	rjmp	.+274    	; 0x23c <__bad_interrupt>
 12a:	00 00       	nop
 12c:	87 c0       	rjmp	.+270    	; 0x23c <__bad_interrupt>
 12e:	00 00       	nop
 130:	85 c0       	rjmp	.+266    	; 0x23c <__bad_interrupt>
 132:	00 00       	nop
 134:	47 c4       	rjmp	.+2190   	; 0x9c4 <__vector_77>
 136:	00 00       	nop
 138:	81 c0       	rjmp	.+258    	; 0x23c <__bad_interrupt>
 13a:	00 00       	nop
 13c:	7f c0       	rjmp	.+254    	; 0x23c <__bad_interrupt>
 13e:	00 00       	nop
 140:	7d c0       	rjmp	.+250    	; 0x23c <__bad_interrupt>
 142:	00 00       	nop
 144:	7b c0       	rjmp	.+246    	; 0x23c <__bad_interrupt>
 146:	00 00       	nop
 148:	79 c0       	rjmp	.+242    	; 0x23c <__bad_interrupt>
 14a:	00 00       	nop
 14c:	77 c0       	rjmp	.+238    	; 0x23c <__bad_interrupt>
 14e:	00 00       	nop
 150:	75 c0       	rjmp	.+234    	; 0x23c <__bad_interrupt>
 152:	00 00       	nop
 154:	73 c0       	rjmp	.+230    	; 0x23c <__bad_interrupt>
 156:	00 00       	nop
 158:	71 c0       	rjmp	.+226    	; 0x23c <__bad_interrupt>
 15a:	00 00       	nop
 15c:	6f c0       	rjmp	.+222    	; 0x23c <__bad_interrupt>
 15e:	00 00       	nop
 160:	6d c0       	rjmp	.+218    	; 0x23c <__bad_interrupt>
 162:	00 00       	nop
 164:	6b c0       	rjmp	.+214    	; 0x23c <__bad_interrupt>
 166:	00 00       	nop
 168:	69 c0       	rjmp	.+210    	; 0x23c <__bad_interrupt>
 16a:	00 00       	nop
 16c:	67 c0       	rjmp	.+206    	; 0x23c <__bad_interrupt>
 16e:	00 00       	nop
 170:	65 c0       	rjmp	.+202    	; 0x23c <__bad_interrupt>
 172:	00 00       	nop
 174:	63 c0       	rjmp	.+198    	; 0x23c <__bad_interrupt>
 176:	00 00       	nop
 178:	61 c0       	rjmp	.+194    	; 0x23c <__bad_interrupt>
 17a:	00 00       	nop
 17c:	5f c0       	rjmp	.+190    	; 0x23c <__bad_interrupt>
 17e:	00 00       	nop
 180:	5d c0       	rjmp	.+186    	; 0x23c <__bad_interrupt>
 182:	00 00       	nop
 184:	5b c0       	rjmp	.+182    	; 0x23c <__bad_interrupt>
 186:	00 00       	nop
 188:	59 c0       	rjmp	.+178    	; 0x23c <__bad_interrupt>
 18a:	00 00       	nop
 18c:	57 c0       	rjmp	.+174    	; 0x23c <__bad_interrupt>
 18e:	00 00       	nop
 190:	55 c0       	rjmp	.+170    	; 0x23c <__bad_interrupt>
 192:	00 00       	nop
 194:	53 c0       	rjmp	.+166    	; 0x23c <__bad_interrupt>
 196:	00 00       	nop
 198:	51 c0       	rjmp	.+162    	; 0x23c <__bad_interrupt>
 19a:	00 00       	nop
 19c:	4f c0       	rjmp	.+158    	; 0x23c <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	4d c0       	rjmp	.+154    	; 0x23c <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	4b c0       	rjmp	.+150    	; 0x23c <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	49 c0       	rjmp	.+146    	; 0x23c <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	47 c0       	rjmp	.+142    	; 0x23c <__bad_interrupt>
 1ae:	00 00       	nop
 1b0:	45 c0       	rjmp	.+138    	; 0x23c <__bad_interrupt>
 1b2:	00 00       	nop
 1b4:	43 c0       	rjmp	.+134    	; 0x23c <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	41 c0       	rjmp	.+130    	; 0x23c <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	3f c0       	rjmp	.+126    	; 0x23c <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	3d c0       	rjmp	.+122    	; 0x23c <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	3b c0       	rjmp	.+118    	; 0x23c <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	39 c0       	rjmp	.+114    	; 0x23c <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	37 c0       	rjmp	.+110    	; 0x23c <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	35 c0       	rjmp	.+106    	; 0x23c <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	33 c0       	rjmp	.+102    	; 0x23c <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	31 c0       	rjmp	.+98     	; 0x23c <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	2f c0       	rjmp	.+94     	; 0x23c <__bad_interrupt>
 1de:	00 00       	nop
 1e0:	2d c0       	rjmp	.+90     	; 0x23c <__bad_interrupt>
 1e2:	00 00       	nop
 1e4:	2b c0       	rjmp	.+86     	; 0x23c <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	29 c0       	rjmp	.+82     	; 0x23c <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	27 c0       	rjmp	.+78     	; 0x23c <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	25 c0       	rjmp	.+74     	; 0x23c <__bad_interrupt>
	...

000001f4 <__ctors_end>:
 1f4:	11 24       	eor	r1, r1
 1f6:	1f be       	out	0x3f, r1	; 63
 1f8:	cf ef       	ldi	r28, 0xFF	; 255
 1fa:	df e3       	ldi	r29, 0x3F	; 63
 1fc:	de bf       	out	0x3e, r29	; 62
 1fe:	cd bf       	out	0x3d, r28	; 61
 200:	00 e0       	ldi	r16, 0x00	; 0
 202:	0c bf       	out	0x3c, r16	; 60
 204:	18 be       	out	0x38, r1	; 56
 206:	19 be       	out	0x39, r1	; 57
 208:	1a be       	out	0x3a, r1	; 58
 20a:	1b be       	out	0x3b, r1	; 59

0000020c <__do_copy_data>:
 20c:	10 e2       	ldi	r17, 0x20	; 32
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	ec e0       	ldi	r30, 0x0C	; 12
 214:	fc e0       	ldi	r31, 0x0C	; 12
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	0b bf       	out	0x3b, r16	; 59
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
 21c:	07 90       	elpm	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	a6 30       	cpi	r26, 0x06	; 6
 222:	b1 07       	cpc	r27, r17
 224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>
 226:	1b be       	out	0x3b, r1	; 59

00000228 <__do_clear_bss>:
 228:	21 e2       	ldi	r18, 0x21	; 33
 22a:	a6 e0       	ldi	r26, 0x06	; 6
 22c:	b0 e2       	ldi	r27, 0x20	; 32
 22e:	01 c0       	rjmp	.+2      	; 0x232 <.do_clear_bss_start>

00000230 <.do_clear_bss_loop>:
 230:	1d 92       	st	X+, r1

00000232 <.do_clear_bss_start>:
 232:	a5 38       	cpi	r26, 0x85	; 133
 234:	b2 07       	cpc	r27, r18
 236:	e1 f7       	brne	.-8      	; 0x230 <.do_clear_bss_loop>
 238:	7f d3       	rcall	.+1790   	; 0x938 <main>
 23a:	e6 c4       	rjmp	.+2508   	; 0xc08 <_exit>

0000023c <__bad_interrupt>:
 23c:	e1 ce       	rjmp	.-574    	; 0x0 <__vectors>

0000023e <PI_attitude_rate>:
INPUT:
OUTPUT:
DISCRIPTION:  nest PI loops, with the rate loop on the insidea
*********************************************************************************************************** */
void PI_attitude_rate(PID_data *pid_data)
{
 23e:	af 92       	push	r10
 240:	bf 92       	push	r11
 242:	cf 92       	push	r12
 244:	df 92       	push	r13
 246:	ef 92       	push	r14
 248:	ff 92       	push	r15
 24a:	0f 93       	push	r16
 24c:	1f 93       	push	r17
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	fc 01       	movw	r30, r24
	////  save the last error calculation so we can calculate the derivative
	pid_data->previousError0 = pid_data->previousError1;
 254:	a2 ac       	ldd	r10, Z+58	; 0x3a
 256:	b3 ac       	ldd	r11, Z+59	; 0x3b
 258:	a0 ae       	std	Z+56, r10	; 0x38
 25a:	b1 ae       	std	Z+57, r11	; 0x39
	pid_data->previousError1 = pid_data->previousError2;
 25c:	c4 ac       	ldd	r12, Z+60	; 0x3c
 25e:	d5 ac       	ldd	r13, Z+61	; 0x3d
 260:	c2 ae       	std	Z+58, r12	; 0x3a
 262:	d3 ae       	std	Z+59, r13	; 0x3b
	pid_data->previousError2 = pid_data->attitude_error;
 264:	e4 a4       	ldd	r14, Z+44	; 0x2c
 266:	f5 a4       	ldd	r15, Z+45	; 0x2d
 268:	e4 ae       	std	Z+60, r14	; 0x3c
 26a:	f5 ae       	std	Z+61, r15	; 0x3d
	//pid_data->previousError0 = pid_data->error;
	////  calculate the new error
	////10 - 23 = -13
	
	pid_data->attitude_error = (pid_data->attitude_command - pid_data->attitude_feedback)/10;
 26c:	86 a1       	ldd	r24, Z+38	; 0x26
 26e:	97 a1       	ldd	r25, Z+39	; 0x27
 270:	26 8d       	ldd	r18, Z+30	; 0x1e
 272:	37 8d       	ldd	r19, Z+31	; 0x1f
 274:	82 1b       	sub	r24, r18
 276:	93 0b       	sbc	r25, r19
 278:	0a e0       	ldi	r16, 0x0A	; 10
 27a:	10 e0       	ldi	r17, 0x00	; 0
 27c:	b8 01       	movw	r22, r16
 27e:	9d d4       	rcall	.+2362   	; 0xbba <__divmodhi4>
 280:	eb 01       	movw	r28, r22
 282:	64 a7       	std	Z+44, r22	; 0x2c
 284:	75 a7       	std	Z+45, r23	; 0x2d
	

	pid_data->attitude_total_error = (pid_data->previousError0/integral_addup_reducer + pid_data->previousError1/integral_addup_reducer +
 286:	20 91 04 20 	lds	r18, 0x2004
 28a:	30 91 05 20 	lds	r19, 0x2005
 28e:	c5 01       	movw	r24, r10
 290:	b9 01       	movw	r22, r18
 292:	93 d4       	rcall	.+2342   	; 0xbba <__divmodhi4>
 294:	5b 01       	movw	r10, r22
 296:	c6 01       	movw	r24, r12
 298:	b9 01       	movw	r22, r18
 29a:	8f d4       	rcall	.+2334   	; 0xbba <__divmodhi4>
 29c:	65 01       	movw	r12, r10
 29e:	c6 0e       	add	r12, r22
 2a0:	d7 1e       	adc	r13, r23
	pid_data->previousError2/integral_addup_reducer + pid_data->attitude_error/integral_addup_reducer);
 2a2:	c7 01       	movw	r24, r14
 2a4:	b9 01       	movw	r22, r18
 2a6:	89 d4       	rcall	.+2322   	; 0xbba <__divmodhi4>
	////10 - 23 = -13
	
	pid_data->attitude_error = (pid_data->attitude_command - pid_data->attitude_feedback)/10;
	

	pid_data->attitude_total_error = (pid_data->previousError0/integral_addup_reducer + pid_data->previousError1/integral_addup_reducer +
 2a8:	76 01       	movw	r14, r12
 2aa:	e6 0e       	add	r14, r22
 2ac:	f7 1e       	adc	r15, r23
	pid_data->previousError2/integral_addup_reducer + pid_data->attitude_error/integral_addup_reducer);
 2ae:	ce 01       	movw	r24, r28
 2b0:	b9 01       	movw	r22, r18
 2b2:	83 d4       	rcall	.+2310   	; 0xbba <__divmodhi4>
 2b4:	6e 0d       	add	r22, r14
 2b6:	7f 1d       	adc	r23, r15
	////10 - 23 = -13
	
	pid_data->attitude_error = (pid_data->attitude_command - pid_data->attitude_feedback)/10;
	

	pid_data->attitude_total_error = (pid_data->previousError0/integral_addup_reducer + pid_data->previousError1/integral_addup_reducer +
 2b8:	64 ab       	std	Z+52, r22	; 0x34
 2ba:	75 ab       	std	Z+53, r23	; 0x35
	pid_data->previousError2/integral_addup_reducer + pid_data->attitude_error/integral_addup_reducer);



	pid_data->p_term_attitude = (pid_data->attitude_error  *  pid_data->Kp);
 2bc:	86 89       	ldd	r24, Z+22	; 0x16
 2be:	97 89       	ldd	r25, Z+23	; 0x17
 2c0:	c8 9f       	mul	r28, r24
 2c2:	90 01       	movw	r18, r0
 2c4:	c9 9f       	mul	r28, r25
 2c6:	30 0d       	add	r19, r0
 2c8:	d8 9f       	mul	r29, r24
 2ca:	30 0d       	add	r19, r0
 2cc:	11 24       	eor	r1, r1
 2ce:	22 87       	std	Z+10, r18	; 0x0a
 2d0:	33 87       	std	Z+11, r19	; 0x0b
	
	//calculate integral term
	pid_data->i_term_attitude =(pid_data->attitude_total_error  * pid_data->Ki);
 2d2:	40 8d       	ldd	r20, Z+24	; 0x18
 2d4:	51 8d       	ldd	r21, Z+25	; 0x19
 2d6:	64 9f       	mul	r22, r20
 2d8:	c0 01       	movw	r24, r0
 2da:	65 9f       	mul	r22, r21
 2dc:	90 0d       	add	r25, r0
 2de:	74 9f       	mul	r23, r20
 2e0:	90 0d       	add	r25, r0
 2e2:	11 24       	eor	r1, r1
 2e4:	84 87       	std	Z+12, r24	; 0x0c
 2e6:	95 87       	std	Z+13, r25	; 0x0d

	
	// calculate the pid output
	pid_data->attitude_loop_out = (pid_data->p_term_attitude + pid_data->i_term_attitude);
 2e8:	82 0f       	add	r24, r18
 2ea:	93 1f       	adc	r25, r19
 2ec:	df 01       	movw	r26, r30
 2ee:	a4 5b       	subi	r26, 0xB4	; 180
 2f0:	bf 4f       	sbci	r27, 0xFF	; 255
 2f2:	8d 93       	st	X+, r24
 2f4:	9c 93       	st	X, r25
	//pid_rate(pid_data);

	
	//  rate calculations start here
	pid_data->previousRateError0 = pid_data->previousRateError1;
 2f6:	ef 01       	movw	r28, r30
 2f8:	c0 5c       	subi	r28, 0xC0	; 192
 2fa:	df 4f       	sbci	r29, 0xFF	; 255
 2fc:	28 81       	ld	r18, Y
 2fe:	39 81       	ldd	r19, Y+1	; 0x01
 300:	26 af       	std	Z+62, r18	; 0x3e
 302:	37 af       	std	Z+63, r19	; 0x3f
	pid_data->previousRateError1 = pid_data->previousRateError2;
 304:	df 01       	movw	r26, r30
 306:	ae 5b       	subi	r26, 0xBE	; 190
 308:	bf 4f       	sbci	r27, 0xFF	; 255
 30a:	2d 91       	ld	r18, X+
 30c:	3c 91       	ld	r19, X
 30e:	11 97       	sbiw	r26, 0x01	; 1
 310:	28 83       	st	Y, r18
 312:	39 83       	std	Y+1, r19	; 0x01
	pid_data->previousRateError2 = pid_data->rate_error;
 314:	26 a5       	ldd	r18, Z+46	; 0x2e
 316:	37 a5       	ldd	r19, Z+47	; 0x2f
 318:	2d 93       	st	X+, r18
 31a:	3c 93       	st	X, r19
	
	pid_data->rate_error = (pid_data->attitude_loop_out- pid_data->rate_feedback)/10;
 31c:	22 a1       	ldd	r18, Z+34	; 0x22
 31e:	33 a1       	ldd	r19, Z+35	; 0x23
 320:	82 1b       	sub	r24, r18
 322:	93 0b       	sbc	r25, r19
 324:	b8 01       	movw	r22, r16
 326:	49 d4       	rcall	.+2194   	; 0xbba <__divmodhi4>
 328:	66 a7       	std	Z+46, r22	; 0x2e
 32a:	77 a7       	std	Z+47, r23	; 0x2f
	
	//pid_data->rate_integral = pid_data->rate_error/integral_addup_reducer + pid_data->previousRateError0/integral_addup_reducer +
	//pid_data->previousRateError1/integral_addup_reducer + pid_data->previousRateError2/integral_addup_reducer;
	
	pid_data->p_term_rate = (pid_data->rate_error * pid_data->Kp_rate);
 32c:	20 89       	ldd	r18, Z+16	; 0x10
 32e:	31 89       	ldd	r19, Z+17	; 0x11
 330:	62 9f       	mul	r22, r18
 332:	c0 01       	movw	r24, r0
 334:	63 9f       	mul	r22, r19
 336:	90 0d       	add	r25, r0
 338:	72 9f       	mul	r23, r18
 33a:	90 0d       	add	r25, r0
 33c:	11 24       	eor	r1, r1
 33e:	84 83       	std	Z+4, r24	; 0x04
 340:	95 83       	std	Z+5, r25	; 0x05
	
	pid_data->i_term_rate = 0; //(pid_data->rate_total_error  * pid_data->Ki_rate);
 342:	16 82       	std	Z+6, r1	; 0x06
 344:	17 82       	std	Z+7, r1	; 0x07
	
	pid_data->pid_total =(pid_data->p_term_rate + pid_data->i_term_rate);
 346:	84 8f       	std	Z+28, r24	; 0x1c
 348:	95 8f       	std	Z+29, r25	; 0x1d

}
 34a:	df 91       	pop	r29
 34c:	cf 91       	pop	r28
 34e:	1f 91       	pop	r17
 350:	0f 91       	pop	r16
 352:	ff 90       	pop	r15
 354:	ef 90       	pop	r14
 356:	df 90       	pop	r13
 358:	cf 90       	pop	r12
 35a:	bf 90       	pop	r11
 35c:	af 90       	pop	r10
 35e:	08 95       	ret

00000360 <initPWM>:
void DisablePWM()
{
		MOTOR_PMW_TIMER0.CTRLB |= 0x00;
		MOTOR_PMW_TIMER0.CTRLB |= 0x00;
		MOTOR_PMW_TIMER0.CTRLB |= 0x00;
		MOTOR_PMW_TIMER0.CTRLB |= 0x00;
 360:	e0 e0       	ldi	r30, 0x00	; 0
 362:	f8 e0       	ldi	r31, 0x08	; 8
 364:	83 e0       	ldi	r24, 0x03	; 3
 366:	80 83       	st	Z, r24
 368:	81 83       	std	Z+1, r24	; 0x01
 36a:	82 83       	std	Z+2, r24	; 0x02
 36c:	83 83       	std	Z+3, r24	; 0x03
 36e:	81 81       	ldd	r24, Z+1	; 0x01
 370:	80 61       	ori	r24, 0x10	; 16
 372:	81 83       	std	Z+1, r24	; 0x01
 374:	81 81       	ldd	r24, Z+1	; 0x01
 376:	80 62       	ori	r24, 0x20	; 32
 378:	81 83       	std	Z+1, r24	; 0x01
 37a:	81 81       	ldd	r24, Z+1	; 0x01
 37c:	80 64       	ori	r24, 0x40	; 64
 37e:	81 83       	std	Z+1, r24	; 0x01
 380:	81 81       	ldd	r24, Z+1	; 0x01
 382:	80 68       	ori	r24, 0x80	; 128
 384:	81 83       	std	Z+1, r24	; 0x01
 386:	8f e0       	ldi	r24, 0x0F	; 15
 388:	a0 e4       	ldi	r26, 0x40	; 64
 38a:	b6 e0       	ldi	r27, 0x06	; 6
 38c:	11 96       	adiw	r26, 0x01	; 1
 38e:	8c 93       	st	X, r24
 390:	10 ae       	std	Z+56, r1	; 0x38
 392:	11 ae       	std	Z+57, r1	; 0x39
 394:	12 ae       	std	Z+58, r1	; 0x3a
 396:	13 ae       	std	Z+59, r1	; 0x3b
 398:	14 ae       	std	Z+60, r1	; 0x3c
 39a:	15 ae       	std	Z+61, r1	; 0x3d
 39c:	10 92 3e 08 	sts	0x083E, r1
 3a0:	10 92 3f 08 	sts	0x083F, r1
 3a4:	89 e2       	ldi	r24, 0x29	; 41
 3a6:	98 e6       	ldi	r25, 0x68	; 104
 3a8:	86 a3       	std	Z+38, r24	; 0x26
 3aa:	97 a3       	std	Z+39, r25	; 0x27
 3ac:	63 e0       	ldi	r22, 0x03	; 3
 3ae:	80 e0       	ldi	r24, 0x00	; 0
 3b0:	98 e0       	ldi	r25, 0x08	; 8
 3b2:	d0 c3       	rjmp	.+1952   	; 0xb54 <TC0_ConfigClockSource>

000003b4 <doPWM>:
         * CC channels */

        /* Check if overflow flag (OVFIF) is set,
         * clear flag and set a new duty cycle
         */
        if(TC_GetOverflowFlag(&MOTOR_PMW_TIMER0) != 0) 
 3b4:	e0 e0       	ldi	r30, 0x00	; 0
 3b6:	f8 e0       	ldi	r31, 0x08	; 8
 3b8:	e4 85       	ldd	r30, Z+12	; 0x0c
 3ba:	e0 ff       	sbrs	r30, 0
 3bc:	0e c0       	rjmp	.+28     	; 0x3da <doPWM+0x26>
        {
            TC_ClearOverflowFlag(&MOTOR_PMW_TIMER0);		//Clear the IF by writing a logical 1 to the flag
 3be:	e0 e0       	ldi	r30, 0x00	; 0
 3c0:	f8 e0       	ldi	r31, 0x08	; 8
 3c2:	a1 e0       	ldi	r26, 0x01	; 1
 3c4:	a4 87       	std	Z+12, r26	; 0x0c

            MOTOR_PMW_TIMER0.CCABUF = speed_1;				//Change the compare value to change duty cycle
 3c6:	80 af       	std	Z+56, r24	; 0x38
 3c8:	91 af       	std	Z+57, r25	; 0x39
			MOTOR_PMW_TIMER0.CCBBUF = speed_2;
 3ca:	62 af       	std	Z+58, r22	; 0x3a
 3cc:	73 af       	std	Z+59, r23	; 0x3b
			MOTOR_PMW_TIMER0.CCCBUF = speed_3;
 3ce:	44 af       	std	Z+60, r20	; 0x3c
 3d0:	55 af       	std	Z+61, r21	; 0x3d
			MOTOR_PMW_TIMER0.CCDBUF = speed_4;
 3d2:	20 93 3e 08 	sts	0x083E, r18
 3d6:	30 93 3f 08 	sts	0x083F, r19
 3da:	08 95       	ret

000003dc <SetPulseWidths>:
DISCRIPTION:   Set motor speeds
*********************************************************************************************************** */
void SetPulseWidths()
{
	// check the signs
	if(throttleAxis.thrust > 2000 && throttleAxis.thrust <= 4095)
 3dc:	80 91 0c 21 	lds	r24, 0x210C
 3e0:	90 91 0d 21 	lds	r25, 0x210D
 3e4:	9c 01       	movw	r18, r24
 3e6:	21 5d       	subi	r18, 0xD1	; 209
 3e8:	37 40       	sbci	r19, 0x07	; 7
 3ea:	2f 32       	cpi	r18, 0x2F	; 47
 3ec:	38 40       	sbci	r19, 0x08	; 8
 3ee:	b8 f4       	brcc	.+46     	; 0x41e <SetPulseWidths+0x42>
	{
		doPWM(
		throttleAxis.thrust * SCALE_THROTTLE + rollAxis.pid_total ,
		throttleAxis.thrust * SCALE_THROTTLE + pitchAxis.pid_total ,
		throttleAxis.thrust * SCALE_THROTTLE - rollAxis.pid_total ,
		throttleAxis.thrust * SCALE_THROTTLE - pitchAxis.pid_total
 3f0:	88 0f       	add	r24, r24
 3f2:	99 1f       	adc	r25, r25
 3f4:	88 0f       	add	r24, r24
 3f6:	99 1f       	adc	r25, r25
 3f8:	60 91 84 20 	lds	r22, 0x2084
 3fc:	70 91 85 20 	lds	r23, 0x2085
	if(throttleAxis.thrust > 2000 && throttleAxis.thrust <= 4095)
	{
		doPWM(
		throttleAxis.thrust * SCALE_THROTTLE + rollAxis.pid_total ,
		throttleAxis.thrust * SCALE_THROTTLE + pitchAxis.pid_total ,
		throttleAxis.thrust * SCALE_THROTTLE - rollAxis.pid_total ,
 400:	e0 91 26 20 	lds	r30, 0x2026
 404:	f0 91 27 20 	lds	r31, 0x2027
		throttleAxis.thrust * SCALE_THROTTLE - pitchAxis.pid_total
 408:	9c 01       	movw	r18, r24
 40a:	26 1b       	sub	r18, r22
 40c:	37 0b       	sbc	r19, r23
	if(throttleAxis.thrust > 2000 && throttleAxis.thrust <= 4095)
	{
		doPWM(
		throttleAxis.thrust * SCALE_THROTTLE + rollAxis.pid_total ,
		throttleAxis.thrust * SCALE_THROTTLE + pitchAxis.pid_total ,
		throttleAxis.thrust * SCALE_THROTTLE - rollAxis.pid_total ,
 40e:	ac 01       	movw	r20, r24
 410:	4e 1b       	sub	r20, r30
 412:	5f 0b       	sbc	r21, r31
	// check the signs
	if(throttleAxis.thrust > 2000 && throttleAxis.thrust <= 4095)
	{
		doPWM(
		throttleAxis.thrust * SCALE_THROTTLE + rollAxis.pid_total ,
		throttleAxis.thrust * SCALE_THROTTLE + pitchAxis.pid_total ,
 414:	68 0f       	add	r22, r24
 416:	79 1f       	adc	r23, r25
void SetPulseWidths()
{
	// check the signs
	if(throttleAxis.thrust > 2000 && throttleAxis.thrust <= 4095)
	{
		doPWM(
 418:	8e 0f       	add	r24, r30
 41a:	9f 1f       	adc	r25, r31
 41c:	cb cf       	rjmp	.-106    	; 0x3b4 <doPWM>
		//throttleAxis.thrust * SCALE_THROTTLE - pitchAxis.pid_total  + yawAxis.pid_total
	
		);
		
	}
	else if(throttleAxis.thrust < 2000 || throttleAxis.thrust >= 4095)
 41e:	80 5d       	subi	r24, 0xD0	; 208
 420:	97 40       	sbci	r25, 0x07	; 7
 422:	8f 32       	cpi	r24, 0x2F	; 47
 424:	98 40       	sbci	r25, 0x08	; 8
 426:	48 f0       	brcs	.+18     	; 0x43a <SetPulseWidths+0x5e>
	{
		doPWM(0,0,0,0);
 428:	20 e0       	ldi	r18, 0x00	; 0
 42a:	30 e0       	ldi	r19, 0x00	; 0
 42c:	40 e0       	ldi	r20, 0x00	; 0
 42e:	50 e0       	ldi	r21, 0x00	; 0
 430:	60 e0       	ldi	r22, 0x00	; 0
 432:	70 e0       	ldi	r23, 0x00	; 0
 434:	80 e0       	ldi	r24, 0x00	; 0
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	bd cf       	rjmp	.-134    	; 0x3b4 <doPWM>
 43a:	08 95       	ret

0000043c <intPID_gains>:
	//yawAxis.Ki =3;
	//yawAxis.Kp_rate = 4;
	//yawAxis.Ki_rate =0;
	//
	//  standard gains should be used to compare new controllers
	rollAxis.Kp =4;
 43c:	84 e0       	ldi	r24, 0x04	; 4
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	80 93 20 20 	sts	0x2020, r24
 444:	90 93 21 20 	sts	0x2021, r25
	rollAxis.Ki =3;
 448:	23 e0       	ldi	r18, 0x03	; 3
 44a:	30 e0       	ldi	r19, 0x00	; 0
 44c:	20 93 22 20 	sts	0x2022, r18
 450:	30 93 23 20 	sts	0x2023, r19
	rollAxis.Kp_rate = 4;
 454:	80 93 1a 20 	sts	0x201A, r24
 458:	90 93 1b 20 	sts	0x201B, r25
	rollAxis.Ki_rate =0;
 45c:	10 92 1c 20 	sts	0x201C, r1
 460:	10 92 1d 20 	sts	0x201D, r1
	//rollAxis.Ki =20;
	//rollAxis.Kp_rate =4;
	//rollAxis.Ki_rate =0;
	
	
	rollAxis.windupGuard = 200;
 464:	88 ec       	ldi	r24, 0xC8	; 200
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	80 93 3c 20 	sts	0x203C, r24
 46c:	90 93 3d 20 	sts	0x203D, r25
	pitchAxis.windupGuard = 200;
 470:	80 93 9a 20 	sts	0x209A, r24
 474:	90 93 9b 20 	sts	0x209B, r25
	yawAxis.windupGuard = 200;
 478:	80 93 4a 21 	sts	0x214A, r24
 47c:	90 93 4b 21 	sts	0x214B, r25
 480:	08 95       	ret

00000482 <sendUM6_Data>:
DISCRIPTION:   Send 16 bit data type over the standard serial port
*********************************************************************************************************** */
void sendUM6_Data()
{

		sendData_int16_t(0xCCCC);					//0xCCCC is the headersendData_int16_t(rollAxis.attitude_feedback);
 482:	8c ec       	ldi	r24, 0xCC	; 204
 484:	9c ec       	ldi	r25, 0xCC	; 204
 486:	8d d3       	rcall	.+1818   	; 0xba2 <sendData_int16_t>
		sendData_int16_t(rollAxis.attitude_command);
 488:	80 91 30 20 	lds	r24, 0x2030
 48c:	90 91 31 20 	lds	r25, 0x2031
 490:	88 d3       	rcall	.+1808   	; 0xba2 <sendData_int16_t>
		sendData_int16_t(rollAxis.attitude_feedback);
 492:	80 91 28 20 	lds	r24, 0x2028
 496:	90 91 29 20 	lds	r25, 0x2029
 49a:	83 c3       	rjmp	.+1798   	; 0xba2 <sendData_int16_t>

0000049c <WriteToPC_SPI>:
  OUTPUT:
  DISCRIPTION:  Write data packet to the SPI bus connected to the ATmega, 
  the ATmega should be set up to parse this data.
*********************************************************************************************************** */
int16_t WriteToPC_SPI()
{
 49c:	af 92       	push	r10
 49e:	bf 92       	push	r11
 4a0:	df 92       	push	r13
 4a2:	ef 92       	push	r14
 4a4:	ff 92       	push	r15
 4a6:	0f 93       	push	r16
 4a8:	1f 93       	push	r17
 4aa:	cf 93       	push	r28
 4ac:	df 93       	push	r29
	PORTE.OUTCLR = PIN4_bm;
 4ae:	0f 2e       	mov	r0, r31
 4b0:	f0 e8       	ldi	r31, 0x80	; 128
 4b2:	ef 2e       	mov	r14, r31
 4b4:	f6 e0       	ldi	r31, 0x06	; 6
 4b6:	ff 2e       	mov	r15, r31
 4b8:	f0 2d       	mov	r31, r0
 4ba:	68 94       	set
 4bc:	dd 24       	eor	r13, r13
 4be:	d4 f8       	bld	r13, 4
 4c0:	f7 01       	movw	r30, r14
 4c2:	d6 82       	std	Z+6, r13	; 0x06
	
	throttleAxis.thrust = spiPC_write_read(upperByte16(dummy_read)) << 8;						
 4c4:	80 e0       	ldi	r24, 0x00	; 0
 4c6:	b4 d2       	rcall	.+1384   	; 0xa30 <spiPC_write_read>
 4c8:	d8 2f       	mov	r29, r24
 4ca:	f0 e0       	ldi	r31, 0x00	; 0
 4cc:	cf 2f       	mov	r28, r31
 4ce:	0c e0       	ldi	r16, 0x0C	; 12
 4d0:	11 e2       	ldi	r17, 0x21	; 33
 4d2:	f8 01       	movw	r30, r16
 4d4:	c0 83       	st	Z, r28
 4d6:	d1 83       	std	Z+1, r29	; 0x01
	throttleAxis.thrust += spiPC_write_read(lowerByte16(dummy_read));							
 4d8:	80 91 5f 20 	lds	r24, 0x205F
 4dc:	a9 d2       	rcall	.+1362   	; 0xa30 <spiPC_write_read>
 4de:	c8 0f       	add	r28, r24
 4e0:	d1 1d       	adc	r29, r1
 4e2:	f8 01       	movw	r30, r16
 4e4:	c0 83       	st	Z, r28
 4e6:	d1 83       	std	Z+1, r29	; 0x01
	
	//rollAxis.attitude_feedback_15 = throttleAxis.thrust;
	rollAxis.attitude_command = spiPC_write_read(upperByte16(rollAxis.attitude_feedback_15)) << 8;
 4e8:	0f 2e       	mov	r0, r31
 4ea:	fa e2       	ldi	r31, 0x2A	; 42
 4ec:	af 2e       	mov	r10, r31
 4ee:	f0 e2       	ldi	r31, 0x20	; 32
 4f0:	bf 2e       	mov	r11, r31
 4f2:	f0 2d       	mov	r31, r0
 4f4:	f5 01       	movw	r30, r10
 4f6:	81 81       	ldd	r24, Z+1	; 0x01
 4f8:	9b d2       	rcall	.+1334   	; 0xa30 <spiPC_write_read>
 4fa:	d8 2f       	mov	r29, r24
 4fc:	f0 e0       	ldi	r31, 0x00	; 0
 4fe:	cf 2f       	mov	r28, r31
 500:	00 e3       	ldi	r16, 0x30	; 48
 502:	10 e2       	ldi	r17, 0x20	; 32
 504:	f8 01       	movw	r30, r16
 506:	c0 83       	st	Z, r28
 508:	d1 83       	std	Z+1, r29	; 0x01
	rollAxis.attitude_command  += spiPC_write_read(lowerByte16(rollAxis.attitude_feedback_15));
 50a:	f5 01       	movw	r30, r10
 50c:	80 81       	ld	r24, Z
 50e:	90 d2       	rcall	.+1312   	; 0xa30 <spiPC_write_read>
 510:	c8 0f       	add	r28, r24
 512:	d1 1d       	adc	r29, r1
 514:	f8 01       	movw	r30, r16
 516:	c0 83       	st	Z, r28
 518:	d1 83       	std	Z+1, r29	; 0x01
	
	//pitchAxis.attitude_feedback = rollAxis.attitude_command;
	pitchAxis.attitude_command = spiPC_write_read(upperByte16(pitchAxis.attitude_feedback_15)) << 8;
 51a:	0f 2e       	mov	r0, r31
 51c:	f8 e8       	ldi	r31, 0x88	; 136
 51e:	af 2e       	mov	r10, r31
 520:	f0 e2       	ldi	r31, 0x20	; 32
 522:	bf 2e       	mov	r11, r31
 524:	f0 2d       	mov	r31, r0
 526:	f5 01       	movw	r30, r10
 528:	81 81       	ldd	r24, Z+1	; 0x01
 52a:	82 d2       	rcall	.+1284   	; 0xa30 <spiPC_write_read>
 52c:	d8 2f       	mov	r29, r24
 52e:	f0 e0       	ldi	r31, 0x00	; 0
 530:	cf 2f       	mov	r28, r31
 532:	0e e8       	ldi	r16, 0x8E	; 142
 534:	10 e2       	ldi	r17, 0x20	; 32
 536:	f8 01       	movw	r30, r16
 538:	c0 83       	st	Z, r28
 53a:	d1 83       	std	Z+1, r29	; 0x01
	pitchAxis.attitude_command += spiPC_write_read(lowerByte16(pitchAxis.attitude_feedback_15));
 53c:	f5 01       	movw	r30, r10
 53e:	80 81       	ld	r24, Z
 540:	77 d2       	rcall	.+1262   	; 0xa30 <spiPC_write_read>
 542:	c8 0f       	add	r28, r24
 544:	d1 1d       	adc	r29, r1
 546:	f8 01       	movw	r30, r16
 548:	c0 83       	st	Z, r28
 54a:	d1 83       	std	Z+1, r29	; 0x01
	
	//yawAxis.attitude_feedback = 0;
	yawAxis.attitude_command = spiPC_write_read(upperByte16(yawAxis.attitude_feedback_15)) << 8;
 54c:	0f 2e       	mov	r0, r31
 54e:	f8 e3       	ldi	r31, 0x38	; 56
 550:	af 2e       	mov	r10, r31
 552:	f1 e2       	ldi	r31, 0x21	; 33
 554:	bf 2e       	mov	r11, r31
 556:	f0 2d       	mov	r31, r0
 558:	f5 01       	movw	r30, r10
 55a:	81 81       	ldd	r24, Z+1	; 0x01
 55c:	69 d2       	rcall	.+1234   	; 0xa30 <spiPC_write_read>
 55e:	d8 2f       	mov	r29, r24
 560:	f0 e0       	ldi	r31, 0x00	; 0
 562:	cf 2f       	mov	r28, r31
 564:	0e e3       	ldi	r16, 0x3E	; 62
 566:	11 e2       	ldi	r17, 0x21	; 33
 568:	f8 01       	movw	r30, r16
 56a:	c0 83       	st	Z, r28
 56c:	d1 83       	std	Z+1, r29	; 0x01
	yawAxis.attitude_command += spiPC_write_read(lowerByte16(yawAxis.attitude_feedback_15));
 56e:	f5 01       	movw	r30, r10
 570:	80 81       	ld	r24, Z
 572:	5e d2       	rcall	.+1212   	; 0xa30 <spiPC_write_read>
 574:	c8 0f       	add	r28, r24
 576:	d1 1d       	adc	r29, r1
 578:	f8 01       	movw	r30, r16
 57a:	c0 83       	st	Z, r28
 57c:	d1 83       	std	Z+1, r29	; 0x01
		
	pitchAxis.Kp = spiPC_write_read(upperByte16(rollAxis.rate_feedback_15 ))<< 8;
 57e:	0f 2e       	mov	r0, r31
 580:	fe e2       	ldi	r31, 0x2E	; 46
 582:	af 2e       	mov	r10, r31
 584:	f0 e2       	ldi	r31, 0x20	; 32
 586:	bf 2e       	mov	r11, r31
 588:	f0 2d       	mov	r31, r0
 58a:	f5 01       	movw	r30, r10
 58c:	81 81       	ldd	r24, Z+1	; 0x01
 58e:	50 d2       	rcall	.+1184   	; 0xa30 <spiPC_write_read>
 590:	d8 2f       	mov	r29, r24
 592:	f0 e0       	ldi	r31, 0x00	; 0
 594:	cf 2f       	mov	r28, r31
 596:	0e e7       	ldi	r16, 0x7E	; 126
 598:	10 e2       	ldi	r17, 0x20	; 32
 59a:	f8 01       	movw	r30, r16
 59c:	c0 83       	st	Z, r28
 59e:	d1 83       	std	Z+1, r29	; 0x01
	pitchAxis.Kp += spiPC_write_read(lowerByte16(rollAxis.rate_feedback_15 ));							
 5a0:	f5 01       	movw	r30, r10
 5a2:	80 81       	ld	r24, Z
 5a4:	45 d2       	rcall	.+1162   	; 0xa30 <spiPC_write_read>
 5a6:	c8 0f       	add	r28, r24
 5a8:	d1 1d       	adc	r29, r1
 5aa:	f8 01       	movw	r30, r16
 5ac:	c0 83       	st	Z, r28
 5ae:	d1 83       	std	Z+1, r29	; 0x01
	
	//pitchAxis.rate_feedback_15 = rollAxis.attitude_command/2;
	pitchAxis.Ki = spiPC_write_read(upperByte16(pitchAxis.rate_feedback_15  )) << 8;					
 5b0:	0f 2e       	mov	r0, r31
 5b2:	fc e8       	ldi	r31, 0x8C	; 140
 5b4:	af 2e       	mov	r10, r31
 5b6:	f0 e2       	ldi	r31, 0x20	; 32
 5b8:	bf 2e       	mov	r11, r31
 5ba:	f0 2d       	mov	r31, r0
 5bc:	f5 01       	movw	r30, r10
 5be:	81 81       	ldd	r24, Z+1	; 0x01
 5c0:	37 d2       	rcall	.+1134   	; 0xa30 <spiPC_write_read>
 5c2:	d8 2f       	mov	r29, r24
 5c4:	f0 e0       	ldi	r31, 0x00	; 0
 5c6:	cf 2f       	mov	r28, r31
 5c8:	00 e8       	ldi	r16, 0x80	; 128
 5ca:	10 e2       	ldi	r17, 0x20	; 32
 5cc:	f8 01       	movw	r30, r16
 5ce:	c0 83       	st	Z, r28
 5d0:	d1 83       	std	Z+1, r29	; 0x01
	pitchAxis.Ki += spiPC_write_read(lowerByte16(pitchAxis.rate_feedback_15 ));							
 5d2:	f5 01       	movw	r30, r10
 5d4:	80 81       	ld	r24, Z
 5d6:	2c d2       	rcall	.+1112   	; 0xa30 <spiPC_write_read>
 5d8:	c8 0f       	add	r28, r24
 5da:	d1 1d       	adc	r29, r1
 5dc:	f8 01       	movw	r30, r16
 5de:	c0 83       	st	Z, r28
 5e0:	d1 83       	std	Z+1, r29	; 0x01
	
	//yawAxis.rate_feedback = rollAxis.pid_total;
	pitchAxis.Kd= (spiPC_write_read(upperByte16(yawAxis.rate_feedback_15))) << 8;
 5e2:	cc e3       	ldi	r28, 0x3C	; 60
 5e4:	d1 e2       	ldi	r29, 0x21	; 33
 5e6:	89 81       	ldd	r24, Y+1	; 0x01
 5e8:	23 d2       	rcall	.+1094   	; 0xa30 <spiPC_write_read>
 5ea:	18 2f       	mov	r17, r24
 5ec:	00 e0       	ldi	r16, 0x00	; 0
 5ee:	0f 2e       	mov	r0, r31
 5f0:	f2 e8       	ldi	r31, 0x82	; 130
 5f2:	af 2e       	mov	r10, r31
 5f4:	f0 e2       	ldi	r31, 0x20	; 32
 5f6:	bf 2e       	mov	r11, r31
 5f8:	f0 2d       	mov	r31, r0
 5fa:	f5 01       	movw	r30, r10
 5fc:	00 83       	st	Z, r16
 5fe:	11 83       	std	Z+1, r17	; 0x01
	pitchAxis.Kd+= spiPC_write_read(lowerByte16(yawAxis.rate_feedback_15));			
 600:	88 81       	ld	r24, Y
 602:	16 d2       	rcall	.+1068   	; 0xa30 <spiPC_write_read>
 604:	08 0f       	add	r16, r24
 606:	11 1d       	adc	r17, r1
 608:	f5 01       	movw	r30, r10
 60a:	00 83       	st	Z, r16
 60c:	11 83       	std	Z+1, r17	; 0x01
	
	//yawAxis.rate_feedback_15 = rollAxis.attitude_command/2;
	command= (spiPC_write_read(upperByte16(yawAxis.rate_feedback_15))) << 8;
 60e:	89 81       	ldd	r24, Y+1	; 0x01
 610:	0f d2       	rcall	.+1054   	; 0xa30 <spiPC_write_read>
 612:	10 92 5c 20 	sts	0x205C, r1
 616:	80 93 5d 20 	sts	0x205D, r24
	command+= spiPC_write_read(lowerByte16(yawAxis.rate_feedback_15));			
 61a:	88 81       	ld	r24, Y
 61c:	09 d2       	rcall	.+1042   	; 0xa30 <spiPC_write_read>
 61e:	20 91 5c 20 	lds	r18, 0x205C
 622:	30 91 5d 20 	lds	r19, 0x205D
 626:	28 0f       	add	r18, r24
 628:	31 1d       	adc	r19, r1
 62a:	20 93 5c 20 	sts	0x205C, r18
 62e:	30 93 5d 20 	sts	0x205D, r19
	
	dummy_read = spiPC_write_read(END_PACKET_CHAR);													
 632:	80 e8       	ldi	r24, 0x80	; 128
 634:	fd d1       	rcall	.+1018   	; 0xa30 <spiPC_write_read>
 636:	80 93 5f 20 	sts	0x205F, r24
	dummy_read = spiPC_write_read(END_PACKET_CHAR);			
 63a:	80 e8       	ldi	r24, 0x80	; 128
 63c:	f9 d1       	rcall	.+1010   	; 0xa30 <spiPC_write_read>
 63e:	80 93 5f 20 	sts	0x205F, r24

	PORTE.OUTSET = PIN4_bm;
 642:	f7 01       	movw	r30, r14
 644:	d5 82       	std	Z+5, r13	; 0x05
	
	
	return command;
	
	
}
 646:	80 91 5c 20 	lds	r24, 0x205C
 64a:	90 91 5d 20 	lds	r25, 0x205D
 64e:	df 91       	pop	r29
 650:	cf 91       	pop	r28
 652:	1f 91       	pop	r17
 654:	0f 91       	pop	r16
 656:	ff 90       	pop	r15
 658:	ef 90       	pop	r14
 65a:	df 90       	pop	r13
 65c:	bf 90       	pop	r11
 65e:	af 90       	pop	r10
 660:	08 95       	ret

00000662 <UpdateEulerAngles>:
DISCRIPTION:   Read in data from the IMU.   IMU data are 16 bits sorted in 32 bit registers, see
data sheet for read commands.  Divide all the data by 2 to convert to 15 bit int, this will leave 
room for the header.
*********************************************************************************************************** */
void UpdateEulerAngles()
{
 662:	cf 93       	push	r28
		PORTF.OUTCLR = PIN4_bm;
 664:	80 e1       	ldi	r24, 0x10	; 16
 666:	e0 ea       	ldi	r30, 0xA0	; 160
 668:	f6 e0       	ldi	r31, 0x06	; 6
 66a:	86 83       	std	Z+6, r24	; 0x06
		
		uint8_t dummy_read;
		//psi = yaw  phi = roll    theta = pitch
		dummy_read = spiIMU_write_read(READ_COMMAND);
 66c:	80 e0       	ldi	r24, 0x00	; 0
 66e:	ee d1       	rcall	.+988    	; 0xa4c <spiIMU_write_read>
		dummy_read = spiIMU_write_read(UM6_EULER_PHI_THETA);
 670:	82 e6       	ldi	r24, 0x62	; 98
 672:	ec d1       	rcall	.+984    	; 0xa4c <spiIMU_write_read>
		
		rollAxis.attitude_feedback = (spiIMU_write_read(DUMMY_READ)<< 8) | spiIMU_write_read(DUMMY_READ);
 674:	80 e0       	ldi	r24, 0x00	; 0
 676:	ea d1       	rcall	.+980    	; 0xa4c <spiIMU_write_read>
 678:	c8 2f       	mov	r28, r24
 67a:	80 e0       	ldi	r24, 0x00	; 0
 67c:	e7 d1       	rcall	.+974    	; 0xa4c <spiIMU_write_read>
 67e:	3c 2f       	mov	r19, r28
 680:	20 e0       	ldi	r18, 0x00	; 0
 682:	28 2b       	or	r18, r24
 684:	20 93 28 20 	sts	0x2028, r18
 688:	30 93 29 20 	sts	0x2029, r19
		rollAxis.attitude_feedback_15 = rollAxis.attitude_feedback /2;
 68c:	c9 01       	movw	r24, r18
 68e:	99 23       	and	r25, r25
 690:	0c f4       	brge	.+2      	; 0x694 <UpdateEulerAngles+0x32>
 692:	01 96       	adiw	r24, 0x01	; 1
 694:	95 95       	asr	r25
 696:	87 95       	ror	r24
 698:	80 93 2a 20 	sts	0x202A, r24
 69c:	90 93 2b 20 	sts	0x202B, r25
		
		pitchAxis.attitude_feedback = (spiIMU_write_read(DUMMY_READ)<< 8) | spiIMU_write_read(UM6_EULER_PSI);
 6a0:	80 e0       	ldi	r24, 0x00	; 0
 6a2:	d4 d1       	rcall	.+936    	; 0xa4c <spiIMU_write_read>
 6a4:	c8 2f       	mov	r28, r24
 6a6:	83 e6       	ldi	r24, 0x63	; 99
 6a8:	d1 d1       	rcall	.+930    	; 0xa4c <spiIMU_write_read>
 6aa:	3c 2f       	mov	r19, r28
 6ac:	20 e0       	ldi	r18, 0x00	; 0
 6ae:	28 2b       	or	r18, r24
 6b0:	20 93 86 20 	sts	0x2086, r18
 6b4:	30 93 87 20 	sts	0x2087, r19
		pitchAxis.attitude_feedback_15 =pitchAxis.attitude_feedback/2;	
 6b8:	c9 01       	movw	r24, r18
 6ba:	99 23       	and	r25, r25
 6bc:	0c f4       	brge	.+2      	; 0x6c0 <UpdateEulerAngles+0x5e>
 6be:	01 96       	adiw	r24, 0x01	; 1
 6c0:	95 95       	asr	r25
 6c2:	87 95       	ror	r24
 6c4:	80 93 88 20 	sts	0x2088, r24
 6c8:	90 93 89 20 	sts	0x2089, r25
		
		yawAxis.attitude_feedback = (spiIMU_write_read(DUMMY_READ)<< 8) | spiIMU_write_read(DUMMY_READ);
 6cc:	80 e0       	ldi	r24, 0x00	; 0
 6ce:	be d1       	rcall	.+892    	; 0xa4c <spiIMU_write_read>
 6d0:	c8 2f       	mov	r28, r24
 6d2:	80 e0       	ldi	r24, 0x00	; 0
 6d4:	bb d1       	rcall	.+886    	; 0xa4c <spiIMU_write_read>
 6d6:	3c 2f       	mov	r19, r28
 6d8:	20 e0       	ldi	r18, 0x00	; 0
 6da:	28 2b       	or	r18, r24
 6dc:	20 93 36 21 	sts	0x2136, r18
 6e0:	30 93 37 21 	sts	0x2137, r19
		yawAxis.attitude_feedback_15 = yawAxis.attitude_feedback/2;
 6e4:	c9 01       	movw	r24, r18
 6e6:	99 23       	and	r25, r25
 6e8:	0c f4       	brge	.+2      	; 0x6ec <UpdateEulerAngles+0x8a>
 6ea:	01 96       	adiw	r24, 0x01	; 1
 6ec:	95 95       	asr	r25
 6ee:	87 95       	ror	r24
 6f0:	80 93 38 21 	sts	0x2138, r24
 6f4:	90 93 39 21 	sts	0x2139, r25
		
		dummy_read = spiIMU_write_read(DUMMY_READ);     
 6f8:	80 e0       	ldi	r24, 0x00	; 0
 6fa:	a8 d1       	rcall	.+848    	; 0xa4c <spiIMU_write_read>
		dummy_read =  spiIMU_write_read(UM6_GYRO_PROC_XY);			
 6fc:	8c e5       	ldi	r24, 0x5C	; 92
 6fe:	a6 d1       	rcall	.+844    	; 0xa4c <spiIMU_write_read>
			
		rollAxis.rate_feedback = (spiIMU_write_read(DUMMY_READ)<< 8) | spiIMU_write_read(DUMMY_READ);
 700:	80 e0       	ldi	r24, 0x00	; 0
 702:	a4 d1       	rcall	.+840    	; 0xa4c <spiIMU_write_read>
 704:	c8 2f       	mov	r28, r24
 706:	80 e0       	ldi	r24, 0x00	; 0
 708:	a1 d1       	rcall	.+834    	; 0xa4c <spiIMU_write_read>
 70a:	3c 2f       	mov	r19, r28
 70c:	20 e0       	ldi	r18, 0x00	; 0
 70e:	28 2b       	or	r18, r24
 710:	20 93 2c 20 	sts	0x202C, r18
 714:	30 93 2d 20 	sts	0x202D, r19
		rollAxis.rate_feedback_15 =rollAxis.rate_feedback/2;
 718:	c9 01       	movw	r24, r18
 71a:	99 23       	and	r25, r25
 71c:	0c f4       	brge	.+2      	; 0x720 <UpdateEulerAngles+0xbe>
 71e:	01 96       	adiw	r24, 0x01	; 1
 720:	95 95       	asr	r25
 722:	87 95       	ror	r24
 724:	80 93 2e 20 	sts	0x202E, r24
 728:	90 93 2f 20 	sts	0x202F, r25
		
		pitchAxis.rate_feedback = (spiIMU_write_read(DUMMY_READ)<< 8) | spiIMU_write_read(UM6_GYRO_PROC_Z);
 72c:	80 e0       	ldi	r24, 0x00	; 0
 72e:	8e d1       	rcall	.+796    	; 0xa4c <spiIMU_write_read>
 730:	c8 2f       	mov	r28, r24
 732:	8d e5       	ldi	r24, 0x5D	; 93
 734:	8b d1       	rcall	.+790    	; 0xa4c <spiIMU_write_read>
 736:	3c 2f       	mov	r19, r28
 738:	20 e0       	ldi	r18, 0x00	; 0
 73a:	28 2b       	or	r18, r24
 73c:	20 93 8a 20 	sts	0x208A, r18
 740:	30 93 8b 20 	sts	0x208B, r19
		pitchAxis.rate_feedback_15 =pitchAxis.rate_feedback/2;	
 744:	c9 01       	movw	r24, r18
 746:	99 23       	and	r25, r25
 748:	0c f4       	brge	.+2      	; 0x74c <UpdateEulerAngles+0xea>
 74a:	01 96       	adiw	r24, 0x01	; 1
 74c:	95 95       	asr	r25
 74e:	87 95       	ror	r24
 750:	80 93 8c 20 	sts	0x208C, r24
 754:	90 93 8d 20 	sts	0x208D, r25
		
		yawAxis.rate_feedback = (spiIMU_write_read(DUMMY_READ)<< 8) | spiIMU_write_read(DUMMY_READ);
 758:	80 e0       	ldi	r24, 0x00	; 0
 75a:	78 d1       	rcall	.+752    	; 0xa4c <spiIMU_write_read>
 75c:	c8 2f       	mov	r28, r24
 75e:	80 e0       	ldi	r24, 0x00	; 0
 760:	75 d1       	rcall	.+746    	; 0xa4c <spiIMU_write_read>
 762:	3c 2f       	mov	r19, r28
 764:	20 e0       	ldi	r18, 0x00	; 0
 766:	28 2b       	or	r18, r24
 768:	20 93 3a 21 	sts	0x213A, r18
 76c:	30 93 3b 21 	sts	0x213B, r19
		yawAxis.rate_feedback_15 = yawAxis.rate_feedback/2;
 770:	c9 01       	movw	r24, r18
 772:	99 23       	and	r25, r25
 774:	0c f4       	brge	.+2      	; 0x778 <UpdateEulerAngles+0x116>
 776:	01 96       	adiw	r24, 0x01	; 1
 778:	95 95       	asr	r25
 77a:	87 95       	ror	r24
 77c:	80 93 3c 21 	sts	0x213C, r24
 780:	90 93 3d 21 	sts	0x213D, r25
		
		dummy_read = spiIMU_write_read(DUMMY_READ);
 784:	80 e0       	ldi	r24, 0x00	; 0
 786:	62 d1       	rcall	.+708    	; 0xa4c <spiIMU_write_read>
		dummy_read =  spiIMU_write_read(DUMMY_READ);
 788:	80 e0       	ldi	r24, 0x00	; 0
 78a:	60 d1       	rcall	.+704    	; 0xa4c <spiIMU_write_read>
		
		PORTF.OUTSET = PIN4_bm;	
 78c:	80 e1       	ldi	r24, 0x10	; 16
 78e:	e0 ea       	ldi	r30, 0xA0	; 160
 790:	f6 e0       	ldi	r31, 0x06	; 6
 792:	85 83       	std	Z+5, r24	; 0x05
		
		
}
 794:	cf 91       	pop	r28
 796:	08 95       	ret

00000798 <ControlLoop>:
which runs at 300Hz.  The complementary filter can run at 750Hz so we could speed this up in necessary
*********************************************************************************************************** */
void ControlLoop()
{
	
	int16counter++;
 798:	80 91 6a 21 	lds	r24, 0x216A
 79c:	90 91 6b 21 	lds	r25, 0x216B
 7a0:	01 96       	adiw	r24, 0x01	; 1
 7a2:	80 93 6a 21 	sts	0x216A, r24
 7a6:	90 93 6b 21 	sts	0x216B, r25

	UpdateEulerAngles();
 7aa:	5b df       	rcall	.-330    	; 0x662 <UpdateEulerAngles>

	PI_attitude_rate(&pitchAxis);
 7ac:	88 e6       	ldi	r24, 0x68	; 104
 7ae:	90 e2       	ldi	r25, 0x20	; 32
 7b0:	46 dd       	rcall	.-1396   	; 0x23e <PI_attitude_rate>
	PI_attitude_rate(&yawAxis);
 7b2:	88 e1       	ldi	r24, 0x18	; 24
 7b4:	91 e2       	ldi	r25, 0x21	; 33
 7b6:	43 dd       	rcall	.-1402   	; 0x23e <PI_attitude_rate>
	PI_attitude_rate(&rollAxis);
 7b8:	8a e0       	ldi	r24, 0x0A	; 10
 7ba:	90 e2       	ldi	r25, 0x20	; 32
 7bc:	40 dd       	rcall	.-1408   	; 0x23e <PI_attitude_rate>
	
	//PI_rate(&pitchAxis);
	//PI_rate(&yawAxis);
	//PI_rate(&rollAxis);
	//
	SetPulseWidths();
 7be:	0e de       	rcall	.-996    	; 0x3dc <SetPulseWidths>
	sendUM6_Data();
 7c0:	60 de       	rcall	.-832    	; 0x482 <sendUM6_Data>
	//rollAxis.attitude_command =(int16_t)(GetSinCommand(1500, pitchAxis.Kp));
	//rollAxis.attitude_command =(int16_t)( 2000* AWGN_generator());
	
	//  write to the ATmega com buffer 31*.0033 ~ 100mSec
	if (int16counter >= 31)
 7c2:	80 91 6a 21 	lds	r24, 0x216A
 7c6:	90 91 6b 21 	lds	r25, 0x216B
 7ca:	4f 97       	sbiw	r24, 0x1f	; 31
 7cc:	28 f0       	brcs	.+10     	; 0x7d8 <ControlLoop+0x40>
	
	{
		WriteToPC_SPI();	// 400uSec
 7ce:	66 de       	rcall	.-820    	; 0x49c <WriteToPC_SPI>
		int16counter = 0;
 7d0:	10 92 6a 21 	sts	0x216A, r1
 7d4:	10 92 6b 21 	sts	0x216B, r1
 7d8:	08 95       	ret

000007da <init32MHzClock>:
*********************************************************************************************************** */
void init32MHzClock(void)
{

	//	Enable the 32 MHz internal RC oscillator.
	OSC.CTRL|=OSC_RC32MEN_bm;
 7da:	e0 e5       	ldi	r30, 0x50	; 80
 7dc:	f0 e0       	ldi	r31, 0x00	; 0
 7de:	80 81       	ld	r24, Z
 7e0:	82 60       	ori	r24, 0x02	; 2
 7e2:	80 83       	st	Z, r24
	//	The R32MRFY flag is set when the 32 MHz internal RC oscillator is stable
	//	and ready to be used as the System Clock source.
	while(!(OSC.STATUS &OSC_RC32MRDY_bm ));
 7e4:	81 81       	ldd	r24, Z+1	; 0x01
 7e6:	81 ff       	sbrs	r24, 1
 7e8:	fd cf       	rjmp	.-6      	; 0x7e4 <init32MHzClock+0xa>
	CCP=CCP_IOREG_gc;
 7ea:	88 ed       	ldi	r24, 0xD8	; 216
 7ec:	84 bf       	out	0x34, r24	; 52
	//	Select the 32MHz RC oscillator for the system clock
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
 7ee:	81 e0       	ldi	r24, 0x01	; 1
 7f0:	80 93 40 00 	sts	0x0040, r24
 7f4:	08 95       	ret

000007f6 <intiLoopTimer>:
void intiLoopTimer()
{
	

	// Set the timer prescale.
	TCD0.CTRLA = TC_CLKSEL_DIV4_gc;
 7f6:	e0 e0       	ldi	r30, 0x00	; 0
 7f8:	f9 e0       	ldi	r31, 0x09	; 9
 7fa:	83 e0       	ldi	r24, 0x03	; 3
 7fc:	80 83       	st	Z, r24

	/* Configure the timer for normal counting. */
	TCD0.CTRLB = TC_WGMODE_NORMAL_gc;
 7fe:	11 82       	std	Z+1, r1	; 0x01

	
	
	//  32MHz / TC_CLKSEL_DIV4_gc
	TCD0.PER = 26666;  //  Need the time to overflow at 300Hz
 800:	8a e2       	ldi	r24, 0x2A	; 42
 802:	98 e6       	ldi	r25, 0x68	; 104
 804:	86 a3       	std	Z+38, r24	; 0x26
 806:	97 a3       	std	Z+39, r25	; 0x27
	
	//TCD0.PER = 60000;
	//Configure timer to generate an interrupt on overflow. */
	TCD0.INTCTRLA = TC_OVFINTLVL_LO_gc;
 808:	81 e0       	ldi	r24, 0x01	; 1
 80a:	86 83       	std	Z+6, r24	; 0x06

	/* Enable this interrupt level. */
	PMIC.CTRL |= PMIC_LOLVLEN_bm;
 80c:	e0 ea       	ldi	r30, 0xA0	; 160
 80e:	f0 e0       	ldi	r31, 0x00	; 0
 810:	82 81       	ldd	r24, Z+2	; 0x02
 812:	81 60       	ori	r24, 0x01	; 1
 814:	82 83       	std	Z+2, r24	; 0x02
 816:	08 95       	ret

00000818 <zeroSensor>:




uint8_t zeroSensor()
{
 818:	1f 93       	push	r17
 81a:	cf 93       	push	r28
 81c:	df 93       	push	r29
	
	PORTF.OUTCLR = PIN4_bm;
 81e:	c0 ea       	ldi	r28, 0xA0	; 160
 820:	d6 e0       	ldi	r29, 0x06	; 6
 822:	10 e1       	ldi	r17, 0x10	; 16
 824:	1e 83       	std	Y+6, r17	; 0x06
	//zero mad 0xB0
	
	//uint8_t dummy_read = 0x00;
	//psi = yaw  phi = roll    theta = pitch
	//0x01 0xAC 0x00 0x00 0x00 0x00
	dummy_read = spiIMU_write_read(WRITE_COMMAND);
 826:	81 e0       	ldi	r24, 0x01	; 1
 828:	11 d1       	rcall	.+546    	; 0xa4c <spiIMU_write_read>
 82a:	80 93 5f 20 	sts	0x205F, r24
	dummy_read = spiIMU_write_read(ZERO_GYROS);
 82e:	8c ea       	ldi	r24, 0xAC	; 172
 830:	0d d1       	rcall	.+538    	; 0xa4c <spiIMU_write_read>
 832:	80 93 5f 20 	sts	0x205F, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 836:	80 e0       	ldi	r24, 0x00	; 0
 838:	09 d1       	rcall	.+530    	; 0xa4c <spiIMU_write_read>
 83a:	80 93 5f 20 	sts	0x205F, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 83e:	80 e0       	ldi	r24, 0x00	; 0
 840:	05 d1       	rcall	.+522    	; 0xa4c <spiIMU_write_read>
 842:	80 93 5f 20 	sts	0x205F, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 846:	80 e0       	ldi	r24, 0x00	; 0
 848:	01 d1       	rcall	.+514    	; 0xa4c <spiIMU_write_read>
 84a:	80 93 5f 20 	sts	0x205F, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 84e:	80 e0       	ldi	r24, 0x00	; 0
 850:	fd d0       	rcall	.+506    	; 0xa4c <spiIMU_write_read>
 852:	80 93 5f 20 	sts	0x205F, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 856:	8f e8       	ldi	r24, 0x8F	; 143
 858:	91 e0       	ldi	r25, 0x01	; 1
 85a:	01 97       	sbiw	r24, 0x01	; 1
 85c:	f1 f7       	brne	.-4      	; 0x85a <zeroSensor+0x42>
 85e:	00 c0       	rjmp	.+0      	; 0x860 <zeroSensor+0x48>
 860:	00 00       	nop
	
	_delay_us(50);
	dummy_read = spiIMU_write_read(WRITE_COMMAND);
 862:	81 e0       	ldi	r24, 0x01	; 1
 864:	f3 d0       	rcall	.+486    	; 0xa4c <spiIMU_write_read>
 866:	80 93 5f 20 	sts	0x205F, r24
	dummy_read = spiIMU_write_read(SET_ACCEL_REF);
 86a:	8f ea       	ldi	r24, 0xAF	; 175
 86c:	ef d0       	rcall	.+478    	; 0xa4c <spiIMU_write_read>
 86e:	80 93 5f 20 	sts	0x205F, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 872:	80 e0       	ldi	r24, 0x00	; 0
 874:	eb d0       	rcall	.+470    	; 0xa4c <spiIMU_write_read>
 876:	80 93 5f 20 	sts	0x205F, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 87a:	80 e0       	ldi	r24, 0x00	; 0
 87c:	e7 d0       	rcall	.+462    	; 0xa4c <spiIMU_write_read>
 87e:	80 93 5f 20 	sts	0x205F, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 882:	80 e0       	ldi	r24, 0x00	; 0
 884:	e3 d0       	rcall	.+454    	; 0xa4c <spiIMU_write_read>
 886:	80 93 5f 20 	sts	0x205F, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 88a:	80 e0       	ldi	r24, 0x00	; 0
 88c:	df d0       	rcall	.+446    	; 0xa4c <spiIMU_write_read>
 88e:	80 93 5f 20 	sts	0x205F, r24
 892:	8f e8       	ldi	r24, 0x8F	; 143
 894:	91 e0       	ldi	r25, 0x01	; 1
 896:	01 97       	sbiw	r24, 0x01	; 1
 898:	f1 f7       	brne	.-4      	; 0x896 <zeroSensor+0x7e>
 89a:	00 c0       	rjmp	.+0      	; 0x89c <zeroSensor+0x84>
 89c:	00 00       	nop
	

	_delay_us(50);
	dummy_read = spiIMU_write_read(WRITE_COMMAND);
 89e:	81 e0       	ldi	r24, 0x01	; 1
 8a0:	d5 d0       	rcall	.+426    	; 0xa4c <spiIMU_write_read>
 8a2:	80 93 5f 20 	sts	0x205F, r24
	dummy_read = spiIMU_write_read(SET_MAG_REF);
 8a6:	80 eb       	ldi	r24, 0xB0	; 176
 8a8:	d1 d0       	rcall	.+418    	; 0xa4c <spiIMU_write_read>
 8aa:	80 93 5f 20 	sts	0x205F, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 8ae:	80 e0       	ldi	r24, 0x00	; 0
 8b0:	cd d0       	rcall	.+410    	; 0xa4c <spiIMU_write_read>
 8b2:	80 93 5f 20 	sts	0x205F, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 8b6:	80 e0       	ldi	r24, 0x00	; 0
 8b8:	c9 d0       	rcall	.+402    	; 0xa4c <spiIMU_write_read>
 8ba:	80 93 5f 20 	sts	0x205F, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 8be:	80 e0       	ldi	r24, 0x00	; 0
 8c0:	c5 d0       	rcall	.+394    	; 0xa4c <spiIMU_write_read>
 8c2:	80 93 5f 20 	sts	0x205F, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 8c6:	80 e0       	ldi	r24, 0x00	; 0
 8c8:	c1 d0       	rcall	.+386    	; 0xa4c <spiIMU_write_read>
 8ca:	80 93 5f 20 	sts	0x205F, r24
 8ce:	8f e8       	ldi	r24, 0x8F	; 143
 8d0:	91 e0       	ldi	r25, 0x01	; 1
 8d2:	01 97       	sbiw	r24, 0x01	; 1
 8d4:	f1 f7       	brne	.-4      	; 0x8d2 <zeroSensor+0xba>
 8d6:	00 c0       	rjmp	.+0      	; 0x8d8 <zeroSensor+0xc0>
 8d8:	00 00       	nop
	
	_delay_us(50);
	dummy_read = spiIMU_write_read(WRITE_COMMAND);
 8da:	81 e0       	ldi	r24, 0x01	; 1
 8dc:	b7 d0       	rcall	.+366    	; 0xa4c <spiIMU_write_read>
 8de:	80 93 5f 20 	sts	0x205F, r24
	dummy_read = spiIMU_write_read(UM6_RESET_EKF);
 8e2:	8d ea       	ldi	r24, 0xAD	; 173
 8e4:	b3 d0       	rcall	.+358    	; 0xa4c <spiIMU_write_read>
 8e6:	80 93 5f 20 	sts	0x205F, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 8ea:	80 e0       	ldi	r24, 0x00	; 0
 8ec:	af d0       	rcall	.+350    	; 0xa4c <spiIMU_write_read>
 8ee:	80 93 5f 20 	sts	0x205F, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 8f2:	80 e0       	ldi	r24, 0x00	; 0
 8f4:	ab d0       	rcall	.+342    	; 0xa4c <spiIMU_write_read>
 8f6:	80 93 5f 20 	sts	0x205F, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 8fa:	80 e0       	ldi	r24, 0x00	; 0
 8fc:	a7 d0       	rcall	.+334    	; 0xa4c <spiIMU_write_read>
 8fe:	80 93 5f 20 	sts	0x205F, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 902:	80 e0       	ldi	r24, 0x00	; 0
 904:	a3 d0       	rcall	.+326    	; 0xa4c <spiIMU_write_read>
 906:	80 93 5f 20 	sts	0x205F, r24
	

	PORTF.OUTSET = PIN4_bm;
 90a:	1d 83       	std	Y+5, r17	; 0x05
	
	return 1;
	
}
 90c:	81 e0       	ldi	r24, 0x01	; 1
 90e:	df 91       	pop	r29
 910:	cf 91       	pop	r28
 912:	1f 91       	pop	r17
 914:	08 95       	ret

00000916 <initSystem>:
  DISCRIPTION:  Do all the pre control loop set up tasks
*********************************************************************************************************** */
uint8_t initSystem()
{

	sei();
 916:	78 94       	sei
	initUART();
 918:	23 d1       	rcall	.+582    	; 0xb60 <initUART>
	spi_set_up();
 91a:	a5 d0       	rcall	.+330    	; 0xa66 <spi_set_up>
	intPID_gains();
 91c:	8f dd       	rcall	.-1250   	; 0x43c <intPID_gains>
	zeroSensor();
 91e:	7c df       	rcall	.-264    	; 0x818 <zeroSensor>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 920:	2f ef       	ldi	r18, 0xFF	; 255
 922:	8f e4       	ldi	r24, 0x4F	; 79
 924:	93 ec       	ldi	r25, 0xC3	; 195
 926:	21 50       	subi	r18, 0x01	; 1
 928:	80 40       	sbci	r24, 0x00	; 0
 92a:	90 40       	sbci	r25, 0x00	; 0
 92c:	e1 f7       	brne	.-8      	; 0x926 <initSystem+0x10>
 92e:	00 c0       	rjmp	.+0      	; 0x930 <initSystem+0x1a>
 930:	00 00       	nop
	_delay_ms(2000);
	zeroSensor();
 932:	72 df       	rcall	.-284    	; 0x818 <zeroSensor>

	return 1;

}
 934:	81 e0       	ldi	r24, 0x01	; 1
 936:	08 95       	ret

00000938 <main>:
OUTPUT:
DISCRIPTION: Main is used for set up and then just an infinite loop
*********************************************************************************************************** */
int main()
{
	PORTA.DIRSET = 0x0F;
 938:	8f e0       	ldi	r24, 0x0F	; 15
 93a:	e0 e0       	ldi	r30, 0x00	; 0
 93c:	f6 e0       	ldi	r31, 0x06	; 6
 93e:	81 83       	std	Z+1, r24	; 0x01
	systemState = SYSTEM_STATE_STARTUP;
 940:	8a ea       	ldi	r24, 0xAA	; 170
 942:	80 93 5e 20 	sts	0x205E, r24
	init32MHzClock();
 946:	49 df       	rcall	.-366    	; 0x7da <init32MHzClock>
	initSystem();
 948:	e6 df       	rcall	.-52     	; 0x916 <initSystem>
	intiLoopTimer();
 94a:	55 df       	rcall	.-342    	; 0x7f6 <intiLoopTimer>

	
	while(1)
	{
		nop();
 94c:	00 00       	nop
 94e:	fe cf       	rjmp	.-4      	; 0x94c <main+0x14>

00000950 <State>:
OUTPUT:
DISCRIPTION:   Determine what to do based on systemState.  Used to initializes and arm the quad.
*********************************************************************************************************** */
void State()
{
	LEDPORT.OUTTGL = PIN0_bm;
 950:	81 e0       	ldi	r24, 0x01	; 1
 952:	e0 e0       	ldi	r30, 0x00	; 0
 954:	f6 e0       	ldi	r31, 0x06	; 6
 956:	87 83       	std	Z+7, r24	; 0x07
	
	
	//UpdateEulerAngles_YEI_fast();
	switch(systemState)
 958:	80 91 5e 20 	lds	r24, 0x205E
 95c:	82 30       	cpi	r24, 0x02	; 2
 95e:	39 f1       	breq	.+78     	; 0x9ae <State+0x5e>
 960:	18 f4       	brcc	.+6      	; 0x968 <State+0x18>
 962:	81 30       	cpi	r24, 0x01	; 1
 964:	71 f5       	brne	.+92     	; 0x9c2 <State+0x72>
 966:	0a c0       	rjmp	.+20     	; 0x97c <State+0x2c>
 968:	84 30       	cpi	r24, 0x04	; 4
 96a:	31 f1       	breq	.+76     	; 0x9b8 <State+0x68>
 96c:	8a 3a       	cpi	r24, 0xAA	; 170
 96e:	49 f5       	brne	.+82     	; 0x9c2 <State+0x72>
	{
		case SYSTEM_STATE_STARTUP:
			
			
			if (initSystem() ==  1)
 970:	d2 df       	rcall	.-92     	; 0x916 <initSystem>
 972:	81 30       	cpi	r24, 0x01	; 1
 974:	31 f5       	brne	.+76     	; 0x9c2 <State+0x72>
			{
				systemState = SYSTEM_ZERO;
 976:	80 93 5e 20 	sts	0x205E, r24
 97a:	08 95       	ret
 97c:	2f ef       	ldi	r18, 0xFF	; 255
 97e:	83 ec       	ldi	r24, 0xC3	; 195
 980:	99 e0       	ldi	r25, 0x09	; 9
 982:	21 50       	subi	r18, 0x01	; 1
 984:	80 40       	sbci	r24, 0x00	; 0
 986:	90 40       	sbci	r25, 0x00	; 0
 988:	e1 f7       	brne	.-8      	; 0x982 <State+0x32>
 98a:	00 c0       	rjmp	.+0      	; 0x98c <State+0x3c>
 98c:	00 00       	nop

			//LEDPORT.OUTTGL = PIN1_bm;
			// read commands from the PC and zero the system as necessary
			// PC transaction, read in command and send out sensor data
			_delay_ms(100);
			UpdateEulerAngles();
 98e:	69 de       	rcall	.-814    	; 0x662 <UpdateEulerAngles>
			
		
			
			int16_t cmdBytes;	
			//  get the last command sent form the PC, either zero the IMU or get ready to arm the system
			if ((cmdBytes = WriteToPC_SPI()) == SYSTEM_ZERO)
 990:	85 dd       	rcall	.-1270   	; 0x49c <WriteToPC_SPI>
 992:	81 30       	cpi	r24, 0x01	; 1
 994:	91 05       	cpc	r25, r1
 996:	29 f4       	brne	.+10     	; 0x9a2 <State+0x52>
			{
				LEDPORT.OUTSET = PIN1_bm;
 998:	82 e0       	ldi	r24, 0x02	; 2
 99a:	e0 e0       	ldi	r30, 0x00	; 0
 99c:	f6 e0       	ldi	r31, 0x06	; 6
 99e:	85 83       	std	Z+5, r24	; 0x05
				zeroSensor();
 9a0:	3b cf       	rjmp	.-394    	; 0x818 <zeroSensor>
				//LEDPORT.OUTCLR = PIN1_bm;
			}

			if (cmdBytes == SYSTEM_ARM)
 9a2:	02 97       	sbiw	r24, 0x02	; 2
 9a4:	71 f4       	brne	.+28     	; 0x9c2 <State+0x72>
			{
				systemState = SYSTEM_ARM;
 9a6:	82 e0       	ldi	r24, 0x02	; 2
 9a8:	80 93 5e 20 	sts	0x205E, r24
 9ac:	08 95       	ret
			}

		break;

		case SYSTEM_ARM:
			initPWM();
 9ae:	d8 dc       	rcall	.-1616   	; 0x360 <initPWM>
			systemState = SYSTEM_STATE_FLY;
 9b0:	84 e0       	ldi	r24, 0x04	; 4
 9b2:	80 93 5e 20 	sts	0x205E, r24

		break;
 9b6:	08 95       	ret

		case SYSTEM_STATE_FLY:
			// run the control loop
			LEDPORT.OUTTGL = PIN1_bm;
 9b8:	82 e0       	ldi	r24, 0x02	; 2
 9ba:	e0 e0       	ldi	r30, 0x00	; 0
 9bc:	f6 e0       	ldi	r31, 0x06	; 6
 9be:	87 83       	std	Z+7, r24	; 0x07
			ControlLoop();
 9c0:	eb ce       	rjmp	.-554    	; 0x798 <ControlLoop>
 9c2:	08 95       	ret

000009c4 <__vector_77>:
  INPUT:
  OUTPUT:
  DISCRIPTION:   Interrupt vector
*********************************************************************************************************** */
ISR(TCD0_OVF_vect)
{
 9c4:	1f 92       	push	r1
 9c6:	0f 92       	push	r0
 9c8:	0f b6       	in	r0, 0x3f	; 63
 9ca:	0f 92       	push	r0
 9cc:	11 24       	eor	r1, r1
 9ce:	08 b6       	in	r0, 0x38	; 56
 9d0:	0f 92       	push	r0
 9d2:	18 be       	out	0x38, r1	; 56
 9d4:	09 b6       	in	r0, 0x39	; 57
 9d6:	0f 92       	push	r0
 9d8:	19 be       	out	0x39, r1	; 57
 9da:	0b b6       	in	r0, 0x3b	; 59
 9dc:	0f 92       	push	r0
 9de:	1b be       	out	0x3b, r1	; 59
 9e0:	2f 93       	push	r18
 9e2:	3f 93       	push	r19
 9e4:	4f 93       	push	r20
 9e6:	5f 93       	push	r21
 9e8:	6f 93       	push	r22
 9ea:	7f 93       	push	r23
 9ec:	8f 93       	push	r24
 9ee:	9f 93       	push	r25
 9f0:	af 93       	push	r26
 9f2:	bf 93       	push	r27
 9f4:	ef 93       	push	r30
 9f6:	ff 93       	push	r31
	//LEDPORT.OUTTGL = PIN0_bm;
	TCD0.CNT = 0;
 9f8:	e0 e0       	ldi	r30, 0x00	; 0
 9fa:	f9 e0       	ldi	r31, 0x09	; 9
 9fc:	10 a2       	std	Z+32, r1	; 0x20
 9fe:	11 a2       	std	Z+33, r1	; 0x21
	State();
 a00:	a7 df       	rcall	.-178    	; 0x950 <State>

}
 a02:	ff 91       	pop	r31
 a04:	ef 91       	pop	r30
 a06:	bf 91       	pop	r27
 a08:	af 91       	pop	r26
 a0a:	9f 91       	pop	r25
 a0c:	8f 91       	pop	r24
 a0e:	7f 91       	pop	r23
 a10:	6f 91       	pop	r22
 a12:	5f 91       	pop	r21
 a14:	4f 91       	pop	r20
 a16:	3f 91       	pop	r19
 a18:	2f 91       	pop	r18
 a1a:	0f 90       	pop	r0
 a1c:	0b be       	out	0x3b, r0	; 59
 a1e:	0f 90       	pop	r0
 a20:	09 be       	out	0x39, r0	; 57
 a22:	0f 90       	pop	r0
 a24:	08 be       	out	0x38, r0	; 56
 a26:	0f 90       	pop	r0
 a28:	0f be       	out	0x3f, r0	; 63
 a2a:	0f 90       	pop	r0
 a2c:	1f 90       	pop	r1
 a2e:	18 95       	reti

00000a30 <spiPC_write_read>:
	SPIC.DATA = spi_data;
	while(!(SPIC.STATUS & SPI_IF_bm)); // Wait until the data transfer is complete
	_delay_us(6);
	return SPIC.DATA;

}
 a30:	e0 ec       	ldi	r30, 0xC0	; 192
 a32:	fa e0       	ldi	r31, 0x0A	; 10
 a34:	83 83       	std	Z+3, r24	; 0x03
 a36:	82 81       	ldd	r24, Z+2	; 0x02
 a38:	88 23       	and	r24, r24
 a3a:	ec f7       	brge	.-6      	; 0xa36 <spiPC_write_read+0x6>
 a3c:	8a e2       	ldi	r24, 0x2A	; 42
 a3e:	8a 95       	dec	r24
 a40:	f1 f7       	brne	.-4      	; 0xa3e <spiPC_write_read+0xe>
 a42:	00 c0       	rjmp	.+0      	; 0xa44 <spiPC_write_read+0x14>
 a44:	e0 ec       	ldi	r30, 0xC0	; 192
 a46:	fa e0       	ldi	r31, 0x0A	; 10
 a48:	83 81       	ldd	r24, Z+3	; 0x03
 a4a:	08 95       	ret

00000a4c <spiIMU_write_read>:
 a4c:	e0 ec       	ldi	r30, 0xC0	; 192
 a4e:	fb e0       	ldi	r31, 0x0B	; 11
 a50:	83 83       	std	Z+3, r24	; 0x03
 a52:	82 81       	ldd	r24, Z+2	; 0x02
 a54:	88 23       	and	r24, r24
 a56:	ec f7       	brge	.-6      	; 0xa52 <spiIMU_write_read+0x6>
 a58:	80 e2       	ldi	r24, 0x20	; 32
 a5a:	8a 95       	dec	r24
 a5c:	f1 f7       	brne	.-4      	; 0xa5a <spiIMU_write_read+0xe>
 a5e:	e0 ec       	ldi	r30, 0xC0	; 192
 a60:	fb e0       	ldi	r31, 0x0B	; 11
 a62:	83 81       	ldd	r24, Z+3	; 0x03
 a64:	08 95       	ret

00000a66 <spi_set_up>:
DISCRIPTION:    Initialize SPI master on port F for the IMU communication.
			    Initialize SPI master on port F for the PC communication
*********************************************************************************************************** */
	
void spi_set_up()
{
 a66:	af 92       	push	r10
 a68:	cf 92       	push	r12
 a6a:	ef 92       	push	r14
 a6c:	0f 93       	push	r16
 a6e:	cf 93       	push	r28
 a70:	df 93       	push	r29
	///* Initialize SPI master on port F for the IMU communication. */
	///* Init SS pin as output with wired AND and pull-up. */
	////*************************************************************
	PORTF.DIRSET = PIN4_bm;
 a72:	e0 ea       	ldi	r30, 0xA0	; 160
 a74:	f6 e0       	ldi	r31, 0x06	; 6
 a76:	c0 e1       	ldi	r28, 0x10	; 16
 a78:	c1 83       	std	Z+1, r28	; 0x01
	PORTF.PIN4CTRL = PORT_OPC_WIREDANDPULL_gc;
 a7a:	d8 e3       	ldi	r29, 0x38	; 56
 a7c:	d4 8b       	std	Z+20, r29	; 0x14

	/* Set SS output to high. (No slave addressed). */
	PORTF.OUTSET = PIN4_bm;
 a7e:	c5 83       	std	Z+5, r28	; 0x05

	/* Initialize SPI master on port F for the IMU communication. */
	SPI_MasterInit(&spiMasterF,
 a80:	0f 2e       	mov	r0, r31
 a82:	f3 e0       	ldi	r31, 0x03	; 3
 a84:	af 2e       	mov	r10, r31
 a86:	f0 2d       	mov	r31, r0
 a88:	c1 2c       	mov	r12, r1
 a8a:	e1 2c       	mov	r14, r1
 a8c:	00 e0       	ldi	r16, 0x00	; 0
 a8e:	20 e0       	ldi	r18, 0x00	; 0
 a90:	40 ea       	ldi	r20, 0xA0	; 160
 a92:	56 e0       	ldi	r21, 0x06	; 6
 a94:	60 ec       	ldi	r22, 0xC0	; 192
 a96:	7b e0       	ldi	r23, 0x0B	; 11
 a98:	80 e7       	ldi	r24, 0x70	; 112
 a9a:	91 e2       	ldi	r25, 0x21	; 33
 a9c:	31 d0       	rcall	.+98     	; 0xb00 <SPI_MasterInit>
		SPI_MODE_0_gc,							//The UM6 SPI clock (SCK) is active high, with data clocked in on the first rising edge1
		SPI_INTLVL_OFF_gc,
		false,									// false to double clock mode
		SPI_PRESCALER_DIV128_gc);					//32MHz /128 = 250kHz  MAX rate is 400kHz but there is not prescaler

		SPIF.DATA = 0x00;						// init SPI data register
 a9e:	e0 ec       	ldi	r30, 0xC0	; 192
 aa0:	fb e0       	ldi	r31, 0x0B	; 11
 aa2:	13 82       	std	Z+3, r1	; 0x03
		
		
			///* Initialize SPI master on port F for the IMU communication. */
	///* Init SS pin as output with wired AND and pull-up. */
	////*************************************************************
	PORTC.DIRSET = PIN4_bm;
 aa4:	e0 e4       	ldi	r30, 0x40	; 64
 aa6:	f6 e0       	ldi	r31, 0x06	; 6
 aa8:	c1 83       	std	Z+1, r28	; 0x01
	PORTC.PIN4CTRL = PORT_OPC_WIREDANDPULL_gc;
 aaa:	d4 8b       	std	Z+20, r29	; 0x14

	/* Set SS output to high. (No slave addressed). */
	PORTC.OUTSET = PIN4_bm;
 aac:	c5 83       	std	Z+5, r28	; 0x05

	/* Initialize SPI master on port F for the IMU communication. */
	SPI_MasterInit(&spiMasterC,
 aae:	68 94       	set
 ab0:	aa 24       	eor	r10, r10
 ab2:	a1 f8       	bld	r10, 1
 ab4:	20 e0       	ldi	r18, 0x00	; 0
 ab6:	40 e4       	ldi	r20, 0x40	; 64
 ab8:	56 e0       	ldi	r21, 0x06	; 6
 aba:	60 ec       	ldi	r22, 0xC0	; 192
 abc:	78 e0       	ldi	r23, 0x08	; 8
 abe:	87 e7       	ldi	r24, 0x77	; 119
 ac0:	91 e2       	ldi	r25, 0x21	; 33
 ac2:	1e d0       	rcall	.+60     	; 0xb00 <SPI_MasterInit>
		SPI_MODE_0_gc,							//The UM6 SPI clock (SCK) is active high, with data clocked in on the first rising edge1
		SPI_INTLVL_OFF_gc,
		false,									// false to double clock mode
		SPI_PRESCALER_DIV64_gc);				//32MHz /128 = 250kHz  MAX rate is 400kHz but there is not prescaler

		SPIC.DATA = 0x00;						// init SPI data register
 ac4:	e0 ec       	ldi	r30, 0xC0	; 192
 ac6:	f8 e0       	ldi	r31, 0x08	; 8
 ac8:	13 82       	std	Z+3, r1	; 0x03
	
		
		/* Initialize SPI master on port F for the PC communication */
		//*************************************************************
		/* Init SS pin as output with wired AND and pull-up. */
		PORTE.DIRSET = PIN4_bm;
 aca:	e0 e8       	ldi	r30, 0x80	; 128
 acc:	f6 e0       	ldi	r31, 0x06	; 6
 ace:	c1 83       	std	Z+1, r28	; 0x01
		PORTE.PIN4CTRL = PORT_OPC_WIREDANDPULL_gc;
 ad0:	d4 8b       	std	Z+20, r29	; 0x14

		/* Set SS output to high. (No slave addressed). */
		PORTE.OUTSET = PIN4_bm;
 ad2:	c5 83       	std	Z+5, r28	; 0x05

		SPI_MasterInit(&spiMasterE,
 ad4:	0f 2e       	mov	r0, r31
 ad6:	f3 e0       	ldi	r31, 0x03	; 3
 ad8:	af 2e       	mov	r10, r31
 ada:	f0 2d       	mov	r31, r0
 adc:	20 e0       	ldi	r18, 0x00	; 0
 ade:	40 e8       	ldi	r20, 0x80	; 128
 ae0:	56 e0       	ldi	r21, 0x06	; 6
 ae2:	60 ec       	ldi	r22, 0xC0	; 192
 ae4:	7a e0       	ldi	r23, 0x0A	; 10
 ae6:	8e e7       	ldi	r24, 0x7E	; 126
 ae8:	91 e2       	ldi	r25, 0x21	; 33
 aea:	0a d0       	rcall	.+20     	; 0xb00 <SPI_MasterInit>
		false,
		SPI_MODE_0_gc,							//The UM6 SPI clock (SCK) is active high, with data clocked in on the first rising edge1
		SPI_INTLVL_OFF_gc,
		false,									// false to double clock mode
		SPI_PRESCALER_DIV128_gc);				//32MHz /64 = 500,000 bps
		SPIE.DATA = 0x00;						// init SPI data register
 aec:	e0 ec       	ldi	r30, 0xC0	; 192
 aee:	fa e0       	ldi	r31, 0x0A	; 10
 af0:	13 82       	std	Z+3, r1	; 0x03

}
 af2:	df 91       	pop	r29
 af4:	cf 91       	pop	r28
 af6:	0f 91       	pop	r16
 af8:	ef 90       	pop	r14
 afa:	cf 90       	pop	r12
 afc:	af 90       	pop	r10
 afe:	08 95       	ret

00000b00 <SPI_MasterInit>:
                    bool lsbFirst,
                    SPI_MODE_t mode,
                    SPI_INTLVL_t intLevel,
                    bool clk2x,
                    SPI_PRESCALER_t clockDivision)
{
 b00:	af 92       	push	r10
 b02:	cf 92       	push	r12
 b04:	ef 92       	push	r14
 b06:	0f 93       	push	r16
 b08:	fc 01       	movw	r30, r24
	spi->module         = module;
 b0a:	60 83       	st	Z, r22
 b0c:	71 83       	std	Z+1, r23	; 0x01
	spi->port           = port;
 b0e:	42 83       	std	Z+2, r20	; 0x02
 b10:	53 83       	std	Z+3, r21	; 0x03
	spi->interrupted    = false;
 b12:	14 82       	std	Z+4, r1	; 0x04

	spi->module->CTRL   = clockDivision |                  /* SPI prescaler. */
 b14:	cc 20       	and	r12, r12
 b16:	11 f0       	breq	.+4      	; 0xb1c <SPI_MasterInit+0x1c>
 b18:	90 e8       	ldi	r25, 0x80	; 128
 b1a:	01 c0       	rjmp	.+2      	; 0xb1e <SPI_MasterInit+0x1e>
 b1c:	90 e0       	ldi	r25, 0x00	; 0
 b1e:	22 23       	and	r18, r18
 b20:	11 f0       	breq	.+4      	; 0xb26 <SPI_MasterInit+0x26>
 b22:	80 e2       	ldi	r24, 0x20	; 32
 b24:	01 c0       	rjmp	.+2      	; 0xb28 <SPI_MasterInit+0x28>
 b26:	80 e0       	ldi	r24, 0x00	; 0
 b28:	00 65       	ori	r16, 0x50	; 80
 b2a:	0a 29       	or	r16, r10
 b2c:	09 2b       	or	r16, r25
 b2e:	08 2b       	or	r16, r24
 b30:	db 01       	movw	r26, r22
 b32:	0c 93       	st	X, r16
	                      (lsbFirst ? SPI_DORD_bm  : 0) |  /* Data order. */
	                      SPI_MASTER_bm |                  /* SPI master. */
	                      mode;                            /* SPI mode. */

	/* Interrupt level. */
	spi->module->INTCTRL = intLevel;
 b34:	a0 81       	ld	r26, Z
 b36:	b1 81       	ldd	r27, Z+1	; 0x01
 b38:	11 96       	adiw	r26, 0x01	; 1
 b3a:	ec 92       	st	X, r14

	/* No assigned data packet. */
	spi->dataPacket = NULL;
 b3c:	15 82       	std	Z+5, r1	; 0x05
 b3e:	16 82       	std	Z+6, r1	; 0x06

 	/* MOSI and SCK as output. */
	spi->port->DIRSET  = SPI_MOSI_bm | SPI_SCK_bm;
 b40:	02 80       	ldd	r0, Z+2	; 0x02
 b42:	f3 81       	ldd	r31, Z+3	; 0x03
 b44:	e0 2d       	mov	r30, r0
 b46:	80 ea       	ldi	r24, 0xA0	; 160
 b48:	81 83       	std	Z+1, r24	; 0x01
}
 b4a:	0f 91       	pop	r16
 b4c:	ef 90       	pop	r14
 b4e:	cf 90       	pop	r12
 b50:	af 90       	pop	r10
 b52:	08 95       	ret

00000b54 <TC0_ConfigClockSource>:
 *  \param tc              Timer/Counter module instance.
 *  \param clockSelection  Timer/Counter clock source setting.
 */
void TC0_ConfigClockSource( volatile TC0_t * tc, TC_CLKSEL_t clockSelection )
{
	tc->CTRLA = ( tc->CTRLA & ~TC0_CLKSEL_gm ) | clockSelection;
 b54:	fc 01       	movw	r30, r24
 b56:	20 81       	ld	r18, Z
 b58:	20 7f       	andi	r18, 0xF0	; 240
 b5a:	62 2b       	or	r22, r18
 b5c:	60 83       	st	Z, r22
 b5e:	08 95       	ret

00000b60 <initUART>:
void initUART()
{
	
	//  XBEE on USARTD1
	/* PD6 (RXD1) input*/
	PORTD.DIRCLR = PIN6_bm;
 b60:	e0 e6       	ldi	r30, 0x60	; 96
 b62:	f6 e0       	ldi	r31, 0x06	; 6
 b64:	90 e4       	ldi	r25, 0x40	; 64
 b66:	92 83       	std	Z+2, r25	; 0x02
	/* PD7 (TXD1) as output. */
	PORTD.DIRSET = PIN7_bm;
 b68:	80 e8       	ldi	r24, 0x80	; 128
 b6a:	81 83       	std	Z+1, r24	; 0x01
	
	
	//  IMU on USARTC1
	/* PC6 (RXD1) input*/
	PORTC.DIRCLR = PIN6_bm;
 b6c:	e0 e4       	ldi	r30, 0x40	; 64
 b6e:	f6 e0       	ldi	r31, 0x06	; 6
 b70:	92 83       	std	Z+2, r25	; 0x02
	/* PD7 (TXD1) as output. */
	PORTC.DIRSET = PIN7_bm;
 b72:	81 83       	std	Z+1, r24	; 0x01
	
	USART_Format_Set(&XBEE_USART, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, true);
 b74:	e0 eb       	ldi	r30, 0xB0	; 176
 b76:	f9 e0       	ldi	r31, 0x09	; 9
 b78:	8b e0       	ldi	r24, 0x0B	; 11
 b7a:	85 83       	std	Z+5, r24	; 0x05
	USART_Baudrate_Set(&XBEE_USART, 1047 , -6);			// set for 32MHZ and 115200
 b7c:	87 e1       	ldi	r24, 0x17	; 23
 b7e:	86 83       	std	Z+6, r24	; 0x06
 b80:	84 ea       	ldi	r24, 0xA4	; 164
 b82:	87 83       	std	Z+7, r24	; 0x07
	
	/* Enable both RX and TX. */
	USART_Rx_Enable(&XBEE_USART);
 b84:	84 81       	ldd	r24, Z+4	; 0x04
 b86:	80 61       	ori	r24, 0x10	; 16
 b88:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(&XBEE_USART);
 b8a:	84 81       	ldd	r24, Z+4	; 0x04
 b8c:	88 60       	ori	r24, 0x08	; 8
 b8e:	84 83       	std	Z+4, r24	; 0x04
 b90:	08 95       	ret

00000b92 <put_USART_PC_char>:
void put_USART_PC_char(uint8_t sendThis)
{

	do{

	}while(!USART_IsTXDataRegisterEmpty(&XBEE_USART));
 b92:	e0 eb       	ldi	r30, 0xB0	; 176
 b94:	f9 e0       	ldi	r31, 0x09	; 9
 b96:	91 81       	ldd	r25, Z+1	; 0x01
 b98:	95 ff       	sbrs	r25, 5
 b9a:	fd cf       	rjmp	.-6      	; 0xb96 <put_USART_PC_char+0x4>
	USART_PutChar(&XBEE_USART, sendThis);
 b9c:	80 93 b0 09 	sts	0x09B0, r24
 ba0:	08 95       	ret

00000ba2 <sendData_int16_t>:
}


//send 16 bit data on USART, 2 bytes
void sendData_int16_t(int16_t sendthis)
{
 ba2:	cf 93       	push	r28
 ba4:	df 93       	push	r29
 ba6:	ec 01       	movw	r28, r24
	put_USART_PC_char( MASK_TOP_BYTE & (sendthis >> 8));
 ba8:	8d 2f       	mov	r24, r29
 baa:	90 e0       	ldi	r25, 0x00	; 0
 bac:	f2 df       	rcall	.-28     	; 0xb92 <put_USART_PC_char>
	put_USART_PC_char (MASK_TOP_BYTE & sendthis);
 bae:	ce 01       	movw	r24, r28
 bb0:	99 27       	eor	r25, r25
 bb2:	ef df       	rcall	.-34     	; 0xb92 <put_USART_PC_char>
}
 bb4:	df 91       	pop	r29
 bb6:	cf 91       	pop	r28
 bb8:	08 95       	ret

00000bba <__divmodhi4>:
 bba:	97 fb       	bst	r25, 7
 bbc:	07 2e       	mov	r0, r23
 bbe:	16 f4       	brtc	.+4      	; 0xbc4 <__divmodhi4+0xa>
 bc0:	00 94       	com	r0
 bc2:	06 d0       	rcall	.+12     	; 0xbd0 <__divmodhi4_neg1>
 bc4:	77 fd       	sbrc	r23, 7
 bc6:	08 d0       	rcall	.+16     	; 0xbd8 <__divmodhi4_neg2>
 bc8:	0b d0       	rcall	.+22     	; 0xbe0 <__udivmodhi4>
 bca:	07 fc       	sbrc	r0, 7
 bcc:	05 d0       	rcall	.+10     	; 0xbd8 <__divmodhi4_neg2>
 bce:	3e f4       	brtc	.+14     	; 0xbde <__divmodhi4_exit>

00000bd0 <__divmodhi4_neg1>:
 bd0:	90 95       	com	r25
 bd2:	81 95       	neg	r24
 bd4:	9f 4f       	sbci	r25, 0xFF	; 255
 bd6:	08 95       	ret

00000bd8 <__divmodhi4_neg2>:
 bd8:	70 95       	com	r23
 bda:	61 95       	neg	r22
 bdc:	7f 4f       	sbci	r23, 0xFF	; 255

00000bde <__divmodhi4_exit>:
 bde:	08 95       	ret

00000be0 <__udivmodhi4>:
 be0:	aa 1b       	sub	r26, r26
 be2:	bb 1b       	sub	r27, r27
 be4:	51 e1       	ldi	r21, 0x11	; 17
 be6:	07 c0       	rjmp	.+14     	; 0xbf6 <__udivmodhi4_ep>

00000be8 <__udivmodhi4_loop>:
 be8:	aa 1f       	adc	r26, r26
 bea:	bb 1f       	adc	r27, r27
 bec:	a6 17       	cp	r26, r22
 bee:	b7 07       	cpc	r27, r23
 bf0:	10 f0       	brcs	.+4      	; 0xbf6 <__udivmodhi4_ep>
 bf2:	a6 1b       	sub	r26, r22
 bf4:	b7 0b       	sbc	r27, r23

00000bf6 <__udivmodhi4_ep>:
 bf6:	88 1f       	adc	r24, r24
 bf8:	99 1f       	adc	r25, r25
 bfa:	5a 95       	dec	r21
 bfc:	a9 f7       	brne	.-22     	; 0xbe8 <__udivmodhi4_loop>
 bfe:	80 95       	com	r24
 c00:	90 95       	com	r25
 c02:	bc 01       	movw	r22, r24
 c04:	cd 01       	movw	r24, r26
 c06:	08 95       	ret

00000c08 <_exit>:
 c08:	f8 94       	cli

00000c0a <__stop_program>:
 c0a:	ff cf       	rjmp	.-2      	; 0xc0a <__stop_program>
