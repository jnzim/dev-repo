
PSU_quadcopter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c66  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00802000  00000c66  00000cfa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000144  00802002  00802002  00000cfc  2**0
                  ALLOC
  3 .stab         00001698  00000000  00000000  00000cfc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000592  00000000  00000000  00002394  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00002926  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000002f0  00000000  00000000  00002955  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000048b9  00000000  00000000  00002c45  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000d66  00000000  00000000  000074fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001ba7  00000000  00000000  00008264  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000076c  00000000  00000000  00009e0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000019c3  00000000  00000000  0000a578  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000016ca  00000000  00000000  0000bf3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000270  00000000  00000000  0000d605  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	f9 c0       	rjmp	.+498    	; 0x1f4 <__ctors_end>
   2:	00 00       	nop
   4:	1b c1       	rjmp	.+566    	; 0x23c <__bad_interrupt>
   6:	00 00       	nop
   8:	19 c1       	rjmp	.+562    	; 0x23c <__bad_interrupt>
   a:	00 00       	nop
   c:	17 c1       	rjmp	.+558    	; 0x23c <__bad_interrupt>
   e:	00 00       	nop
  10:	15 c1       	rjmp	.+554    	; 0x23c <__bad_interrupt>
  12:	00 00       	nop
  14:	13 c1       	rjmp	.+550    	; 0x23c <__bad_interrupt>
  16:	00 00       	nop
  18:	11 c1       	rjmp	.+546    	; 0x23c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	0f c1       	rjmp	.+542    	; 0x23c <__bad_interrupt>
  1e:	00 00       	nop
  20:	0d c1       	rjmp	.+538    	; 0x23c <__bad_interrupt>
  22:	00 00       	nop
  24:	0b c1       	rjmp	.+534    	; 0x23c <__bad_interrupt>
  26:	00 00       	nop
  28:	09 c1       	rjmp	.+530    	; 0x23c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	07 c1       	rjmp	.+526    	; 0x23c <__bad_interrupt>
  2e:	00 00       	nop
  30:	05 c1       	rjmp	.+522    	; 0x23c <__bad_interrupt>
  32:	00 00       	nop
  34:	03 c1       	rjmp	.+518    	; 0x23c <__bad_interrupt>
  36:	00 00       	nop
  38:	01 c1       	rjmp	.+514    	; 0x23c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	ff c0       	rjmp	.+510    	; 0x23c <__bad_interrupt>
  3e:	00 00       	nop
  40:	fd c0       	rjmp	.+506    	; 0x23c <__bad_interrupt>
  42:	00 00       	nop
  44:	fb c0       	rjmp	.+502    	; 0x23c <__bad_interrupt>
  46:	00 00       	nop
  48:	f9 c0       	rjmp	.+498    	; 0x23c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	f7 c0       	rjmp	.+494    	; 0x23c <__bad_interrupt>
  4e:	00 00       	nop
  50:	f5 c0       	rjmp	.+490    	; 0x23c <__bad_interrupt>
  52:	00 00       	nop
  54:	f3 c0       	rjmp	.+486    	; 0x23c <__bad_interrupt>
  56:	00 00       	nop
  58:	f1 c0       	rjmp	.+482    	; 0x23c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	ef c0       	rjmp	.+478    	; 0x23c <__bad_interrupt>
  5e:	00 00       	nop
  60:	ed c0       	rjmp	.+474    	; 0x23c <__bad_interrupt>
  62:	00 00       	nop
  64:	eb c0       	rjmp	.+470    	; 0x23c <__bad_interrupt>
  66:	00 00       	nop
  68:	e9 c0       	rjmp	.+466    	; 0x23c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	e7 c0       	rjmp	.+462    	; 0x23c <__bad_interrupt>
  6e:	00 00       	nop
  70:	e5 c0       	rjmp	.+458    	; 0x23c <__bad_interrupt>
  72:	00 00       	nop
  74:	e3 c0       	rjmp	.+454    	; 0x23c <__bad_interrupt>
  76:	00 00       	nop
  78:	e1 c0       	rjmp	.+450    	; 0x23c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	df c0       	rjmp	.+446    	; 0x23c <__bad_interrupt>
  7e:	00 00       	nop
  80:	dd c0       	rjmp	.+442    	; 0x23c <__bad_interrupt>
  82:	00 00       	nop
  84:	db c0       	rjmp	.+438    	; 0x23c <__bad_interrupt>
  86:	00 00       	nop
  88:	d9 c0       	rjmp	.+434    	; 0x23c <__bad_interrupt>
  8a:	00 00       	nop
  8c:	d7 c0       	rjmp	.+430    	; 0x23c <__bad_interrupt>
  8e:	00 00       	nop
  90:	d5 c0       	rjmp	.+426    	; 0x23c <__bad_interrupt>
  92:	00 00       	nop
  94:	d3 c0       	rjmp	.+422    	; 0x23c <__bad_interrupt>
  96:	00 00       	nop
  98:	d1 c0       	rjmp	.+418    	; 0x23c <__bad_interrupt>
  9a:	00 00       	nop
  9c:	cf c0       	rjmp	.+414    	; 0x23c <__bad_interrupt>
  9e:	00 00       	nop
  a0:	cd c0       	rjmp	.+410    	; 0x23c <__bad_interrupt>
  a2:	00 00       	nop
  a4:	cb c0       	rjmp	.+406    	; 0x23c <__bad_interrupt>
  a6:	00 00       	nop
  a8:	c9 c0       	rjmp	.+402    	; 0x23c <__bad_interrupt>
  aa:	00 00       	nop
  ac:	c7 c0       	rjmp	.+398    	; 0x23c <__bad_interrupt>
  ae:	00 00       	nop
  b0:	c5 c0       	rjmp	.+394    	; 0x23c <__bad_interrupt>
  b2:	00 00       	nop
  b4:	c3 c0       	rjmp	.+390    	; 0x23c <__bad_interrupt>
  b6:	00 00       	nop
  b8:	c1 c0       	rjmp	.+386    	; 0x23c <__bad_interrupt>
  ba:	00 00       	nop
  bc:	bf c0       	rjmp	.+382    	; 0x23c <__bad_interrupt>
  be:	00 00       	nop
  c0:	bd c0       	rjmp	.+378    	; 0x23c <__bad_interrupt>
  c2:	00 00       	nop
  c4:	bb c0       	rjmp	.+374    	; 0x23c <__bad_interrupt>
  c6:	00 00       	nop
  c8:	b9 c0       	rjmp	.+370    	; 0x23c <__bad_interrupt>
  ca:	00 00       	nop
  cc:	b7 c0       	rjmp	.+366    	; 0x23c <__bad_interrupt>
  ce:	00 00       	nop
  d0:	b5 c0       	rjmp	.+362    	; 0x23c <__bad_interrupt>
  d2:	00 00       	nop
  d4:	b3 c0       	rjmp	.+358    	; 0x23c <__bad_interrupt>
  d6:	00 00       	nop
  d8:	b1 c0       	rjmp	.+354    	; 0x23c <__bad_interrupt>
  da:	00 00       	nop
  dc:	af c0       	rjmp	.+350    	; 0x23c <__bad_interrupt>
  de:	00 00       	nop
  e0:	ad c0       	rjmp	.+346    	; 0x23c <__bad_interrupt>
  e2:	00 00       	nop
  e4:	ab c0       	rjmp	.+342    	; 0x23c <__bad_interrupt>
  e6:	00 00       	nop
  e8:	a9 c0       	rjmp	.+338    	; 0x23c <__bad_interrupt>
  ea:	00 00       	nop
  ec:	a7 c0       	rjmp	.+334    	; 0x23c <__bad_interrupt>
  ee:	00 00       	nop
  f0:	a5 c0       	rjmp	.+330    	; 0x23c <__bad_interrupt>
  f2:	00 00       	nop
  f4:	a3 c0       	rjmp	.+326    	; 0x23c <__bad_interrupt>
  f6:	00 00       	nop
  f8:	a1 c0       	rjmp	.+322    	; 0x23c <__bad_interrupt>
  fa:	00 00       	nop
  fc:	9f c0       	rjmp	.+318    	; 0x23c <__bad_interrupt>
  fe:	00 00       	nop
 100:	9d c0       	rjmp	.+314    	; 0x23c <__bad_interrupt>
 102:	00 00       	nop
 104:	9b c0       	rjmp	.+310    	; 0x23c <__bad_interrupt>
 106:	00 00       	nop
 108:	99 c0       	rjmp	.+306    	; 0x23c <__bad_interrupt>
 10a:	00 00       	nop
 10c:	97 c0       	rjmp	.+302    	; 0x23c <__bad_interrupt>
 10e:	00 00       	nop
 110:	95 c0       	rjmp	.+298    	; 0x23c <__bad_interrupt>
 112:	00 00       	nop
 114:	93 c0       	rjmp	.+294    	; 0x23c <__bad_interrupt>
 116:	00 00       	nop
 118:	91 c0       	rjmp	.+290    	; 0x23c <__bad_interrupt>
 11a:	00 00       	nop
 11c:	8f c0       	rjmp	.+286    	; 0x23c <__bad_interrupt>
 11e:	00 00       	nop
 120:	8d c0       	rjmp	.+282    	; 0x23c <__bad_interrupt>
 122:	00 00       	nop
 124:	8b c0       	rjmp	.+278    	; 0x23c <__bad_interrupt>
 126:	00 00       	nop
 128:	89 c0       	rjmp	.+274    	; 0x23c <__bad_interrupt>
 12a:	00 00       	nop
 12c:	87 c0       	rjmp	.+270    	; 0x23c <__bad_interrupt>
 12e:	00 00       	nop
 130:	85 c0       	rjmp	.+266    	; 0x23c <__bad_interrupt>
 132:	00 00       	nop
 134:	9d c4       	rjmp	.+2362   	; 0xa70 <__vector_77>
 136:	00 00       	nop
 138:	81 c0       	rjmp	.+258    	; 0x23c <__bad_interrupt>
 13a:	00 00       	nop
 13c:	7f c0       	rjmp	.+254    	; 0x23c <__bad_interrupt>
 13e:	00 00       	nop
 140:	7d c0       	rjmp	.+250    	; 0x23c <__bad_interrupt>
 142:	00 00       	nop
 144:	7b c0       	rjmp	.+246    	; 0x23c <__bad_interrupt>
 146:	00 00       	nop
 148:	79 c0       	rjmp	.+242    	; 0x23c <__bad_interrupt>
 14a:	00 00       	nop
 14c:	77 c0       	rjmp	.+238    	; 0x23c <__bad_interrupt>
 14e:	00 00       	nop
 150:	75 c0       	rjmp	.+234    	; 0x23c <__bad_interrupt>
 152:	00 00       	nop
 154:	73 c0       	rjmp	.+230    	; 0x23c <__bad_interrupt>
 156:	00 00       	nop
 158:	71 c0       	rjmp	.+226    	; 0x23c <__bad_interrupt>
 15a:	00 00       	nop
 15c:	6f c0       	rjmp	.+222    	; 0x23c <__bad_interrupt>
 15e:	00 00       	nop
 160:	6d c0       	rjmp	.+218    	; 0x23c <__bad_interrupt>
 162:	00 00       	nop
 164:	6b c0       	rjmp	.+214    	; 0x23c <__bad_interrupt>
 166:	00 00       	nop
 168:	69 c0       	rjmp	.+210    	; 0x23c <__bad_interrupt>
 16a:	00 00       	nop
 16c:	67 c0       	rjmp	.+206    	; 0x23c <__bad_interrupt>
 16e:	00 00       	nop
 170:	65 c0       	rjmp	.+202    	; 0x23c <__bad_interrupt>
 172:	00 00       	nop
 174:	63 c0       	rjmp	.+198    	; 0x23c <__bad_interrupt>
 176:	00 00       	nop
 178:	61 c0       	rjmp	.+194    	; 0x23c <__bad_interrupt>
 17a:	00 00       	nop
 17c:	5f c0       	rjmp	.+190    	; 0x23c <__bad_interrupt>
 17e:	00 00       	nop
 180:	5d c0       	rjmp	.+186    	; 0x23c <__bad_interrupt>
 182:	00 00       	nop
 184:	5b c0       	rjmp	.+182    	; 0x23c <__bad_interrupt>
 186:	00 00       	nop
 188:	59 c0       	rjmp	.+178    	; 0x23c <__bad_interrupt>
 18a:	00 00       	nop
 18c:	57 c0       	rjmp	.+174    	; 0x23c <__bad_interrupt>
 18e:	00 00       	nop
 190:	55 c0       	rjmp	.+170    	; 0x23c <__bad_interrupt>
 192:	00 00       	nop
 194:	53 c0       	rjmp	.+166    	; 0x23c <__bad_interrupt>
 196:	00 00       	nop
 198:	51 c0       	rjmp	.+162    	; 0x23c <__bad_interrupt>
 19a:	00 00       	nop
 19c:	4f c0       	rjmp	.+158    	; 0x23c <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	4d c0       	rjmp	.+154    	; 0x23c <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	4b c0       	rjmp	.+150    	; 0x23c <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	49 c0       	rjmp	.+146    	; 0x23c <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	47 c0       	rjmp	.+142    	; 0x23c <__bad_interrupt>
 1ae:	00 00       	nop
 1b0:	45 c0       	rjmp	.+138    	; 0x23c <__bad_interrupt>
 1b2:	00 00       	nop
 1b4:	43 c0       	rjmp	.+134    	; 0x23c <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	41 c0       	rjmp	.+130    	; 0x23c <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	3f c0       	rjmp	.+126    	; 0x23c <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	3d c0       	rjmp	.+122    	; 0x23c <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	3b c0       	rjmp	.+118    	; 0x23c <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	39 c0       	rjmp	.+114    	; 0x23c <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	37 c0       	rjmp	.+110    	; 0x23c <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	35 c0       	rjmp	.+106    	; 0x23c <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	33 c0       	rjmp	.+102    	; 0x23c <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	31 c0       	rjmp	.+98     	; 0x23c <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	2f c0       	rjmp	.+94     	; 0x23c <__bad_interrupt>
 1de:	00 00       	nop
 1e0:	2d c0       	rjmp	.+90     	; 0x23c <__bad_interrupt>
 1e2:	00 00       	nop
 1e4:	2b c0       	rjmp	.+86     	; 0x23c <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	29 c0       	rjmp	.+82     	; 0x23c <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	27 c0       	rjmp	.+78     	; 0x23c <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	25 c0       	rjmp	.+74     	; 0x23c <__bad_interrupt>
	...

000001f4 <__ctors_end>:
 1f4:	11 24       	eor	r1, r1
 1f6:	1f be       	out	0x3f, r1	; 63
 1f8:	cf ef       	ldi	r28, 0xFF	; 255
 1fa:	df e3       	ldi	r29, 0x3F	; 63
 1fc:	de bf       	out	0x3e, r29	; 62
 1fe:	cd bf       	out	0x3d, r28	; 61
 200:	00 e0       	ldi	r16, 0x00	; 0
 202:	0c bf       	out	0x3c, r16	; 60
 204:	18 be       	out	0x38, r1	; 56
 206:	19 be       	out	0x39, r1	; 57
 208:	1a be       	out	0x3a, r1	; 58
 20a:	1b be       	out	0x3b, r1	; 59

0000020c <__do_copy_data>:
 20c:	10 e2       	ldi	r17, 0x20	; 32
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	e6 e6       	ldi	r30, 0x66	; 102
 214:	fc e0       	ldi	r31, 0x0C	; 12
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	0b bf       	out	0x3b, r16	; 59
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
 21c:	07 90       	elpm	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	a2 30       	cpi	r26, 0x02	; 2
 222:	b1 07       	cpc	r27, r17
 224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>
 226:	1b be       	out	0x3b, r1	; 59

00000228 <__do_clear_bss>:
 228:	21 e2       	ldi	r18, 0x21	; 33
 22a:	a2 e0       	ldi	r26, 0x02	; 2
 22c:	b0 e2       	ldi	r27, 0x20	; 32
 22e:	01 c0       	rjmp	.+2      	; 0x232 <.do_clear_bss_start>

00000230 <.do_clear_bss_loop>:
 230:	1d 92       	st	X+, r1

00000232 <.do_clear_bss_start>:
 232:	a6 34       	cpi	r26, 0x46	; 70
 234:	b2 07       	cpc	r27, r18
 236:	e1 f7       	brne	.-8      	; 0x230 <.do_clear_bss_loop>
 238:	84 d3       	rcall	.+1800   	; 0x942 <main>
 23a:	13 c5       	rjmp	.+2598   	; 0xc62 <_exit>

0000023c <__bad_interrupt>:
 23c:	e1 ce       	rjmp	.-574    	; 0x0 <__vectors>

0000023e <pid_attitude_rate>:
		
}

//  pid  position control loop
void pid_attitude_rate(PID_data * pid_data)
{
 23e:	af 92       	push	r10
 240:	bf 92       	push	r11
 242:	cf 92       	push	r12
 244:	df 92       	push	r13
 246:	ef 92       	push	r14
 248:	ff 92       	push	r15
 24a:	0f 93       	push	r16
 24c:	1f 93       	push	r17
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	fc 01       	movw	r30, r24
	
	
	////  save the last error calculation so we can calculate the derivative
	pid_data->previousError0 = pid_data->previousError1;
 254:	80 ad       	ldd	r24, Z+56	; 0x38
 256:	91 ad       	ldd	r25, Z+57	; 0x39
 258:	86 ab       	std	Z+54, r24	; 0x36
 25a:	97 ab       	std	Z+55, r25	; 0x37
	pid_data->previousError1 = pid_data->previousError2;
 25c:	c2 ac       	ldd	r12, Z+58	; 0x3a
 25e:	d3 ac       	ldd	r13, Z+59	; 0x3b
 260:	c0 ae       	std	Z+56, r12	; 0x38
 262:	d1 ae       	std	Z+57, r13	; 0x39
	pid_data->previousError2 = pid_data->attitude_error;
 264:	e2 a4       	ldd	r14, Z+42	; 0x2a
 266:	f3 a4       	ldd	r15, Z+43	; 0x2b
 268:	e2 ae       	std	Z+58, r14	; 0x3a
 26a:	f3 ae       	std	Z+59, r15	; 0x3b
	//pid_data->previousError0 = pid_data->error;
	////  calculate the new error
	////10 - 23 = -13
	pid_data->attitude_command = 0;
 26c:	12 a2       	std	Z+34, r1	; 0x22
 26e:	13 a2       	std	Z+35, r1	; 0x23
	pid_data->attitude_error = (pid_data->attitude_command - pid_data->attitude_feedback);
 270:	c6 8d       	ldd	r28, Z+30	; 0x1e
 272:	d7 8d       	ldd	r29, Z+31	; 0x1f
 274:	d1 95       	neg	r29
 276:	c1 95       	neg	r28
 278:	d1 09       	sbc	r29, r1
 27a:	c2 a7       	std	Z+42, r28	; 0x2a
 27c:	d3 a7       	std	Z+43, r29	; 0x2b
	

	pid_data->attitude_total_error = (pid_data->previousError0/integral_addup_reducer + pid_data->previousError1/integral_addup_reducer +
 27e:	20 91 00 20 	lds	r18, 0x2000
 282:	30 91 01 20 	lds	r19, 0x2001
 286:	b9 01       	movw	r22, r18
 288:	c5 d4       	rcall	.+2442   	; 0xc14 <__divmodhi4>
 28a:	8b 01       	movw	r16, r22
 28c:	c6 01       	movw	r24, r12
 28e:	b9 01       	movw	r22, r18
 290:	c1 d4       	rcall	.+2434   	; 0xc14 <__divmodhi4>
 292:	06 0f       	add	r16, r22
 294:	17 1f       	adc	r17, r23
	 pid_data->previousError2/integral_addup_reducer + pid_data->attitude_error/integral_addup_reducer);
 296:	c7 01       	movw	r24, r14
 298:	b9 01       	movw	r22, r18
 29a:	bc d4       	rcall	.+2424   	; 0xc14 <__divmodhi4>
	////10 - 23 = -13
	pid_data->attitude_command = 0;
	pid_data->attitude_error = (pid_data->attitude_command - pid_data->attitude_feedback);
	

	pid_data->attitude_total_error = (pid_data->previousError0/integral_addup_reducer + pid_data->previousError1/integral_addup_reducer +
 29c:	06 0f       	add	r16, r22
 29e:	17 1f       	adc	r17, r23
	 pid_data->previousError2/integral_addup_reducer + pid_data->attitude_error/integral_addup_reducer);
 2a0:	ce 01       	movw	r24, r28
 2a2:	b9 01       	movw	r22, r18
 2a4:	b7 d4       	rcall	.+2414   	; 0xc14 <__divmodhi4>
 2a6:	06 0f       	add	r16, r22
 2a8:	17 1f       	adc	r17, r23
	////10 - 23 = -13
	pid_data->attitude_command = 0;
	pid_data->attitude_error = (pid_data->attitude_command - pid_data->attitude_feedback);
	

	pid_data->attitude_total_error = (pid_data->previousError0/integral_addup_reducer + pid_data->previousError1/integral_addup_reducer +
 2aa:	02 ab       	std	Z+50, r16	; 0x32
 2ac:	13 ab       	std	Z+51, r17	; 0x33
	 pid_data->previousError2/integral_addup_reducer + pid_data->attitude_error/integral_addup_reducer);
	//pid_data->total_error = Limit_value_signed(pid_data->total_error);

	//p_term = Limit_value_signed(((pid_data->error  *  pid_data->Kp)/100), pid_data->error);
	pid_data->p_term_attitude = (pid_data->attitude_error  *  pid_data->Kp)/100;
 2ae:	46 89       	ldd	r20, Z+22	; 0x16
 2b0:	57 89       	ldd	r21, Z+23	; 0x17
 2b2:	c4 9f       	mul	r28, r20
 2b4:	c0 01       	movw	r24, r0
 2b6:	c5 9f       	mul	r28, r21
 2b8:	90 0d       	add	r25, r0
 2ba:	d4 9f       	mul	r29, r20
 2bc:	90 0d       	add	r25, r0
 2be:	11 24       	eor	r1, r1
 2c0:	64 e6       	ldi	r22, 0x64	; 100
 2c2:	70 e0       	ldi	r23, 0x00	; 0
 2c4:	a7 d4       	rcall	.+2382   	; 0xc14 <__divmodhi4>
 2c6:	eb 01       	movw	r28, r22
 2c8:	62 87       	std	Z+10, r22	; 0x0a
 2ca:	73 87       	std	Z+11, r23	; 0x0b
	
	//calculate integral term
	pid_data->i_term_attitude =(pid_data->attitude_total_error  * pid_data->Ki)/1000;
 2cc:	40 8d       	ldd	r20, Z+24	; 0x18
 2ce:	51 8d       	ldd	r21, Z+25	; 0x19
 2d0:	04 9f       	mul	r16, r20
 2d2:	c0 01       	movw	r24, r0
 2d4:	05 9f       	mul	r16, r21
 2d6:	90 0d       	add	r25, r0
 2d8:	14 9f       	mul	r17, r20
 2da:	90 0d       	add	r25, r0
 2dc:	11 24       	eor	r1, r1
 2de:	68 ee       	ldi	r22, 0xE8	; 232
 2e0:	73 e0       	ldi	r23, 0x03	; 3
 2e2:	98 d4       	rcall	.+2352   	; 0xc14 <__divmodhi4>
 2e4:	64 87       	std	Z+12, r22	; 0x0c
 2e6:	75 87       	std	Z+13, r23	; 0x0d

	
	// calculate the pid output
	pid_data->attitude_loop_out = pid_data->p_term_attitude + pid_data->i_term_attitude;
 2e8:	c6 0f       	add	r28, r22
 2ea:	d7 1f       	adc	r29, r23
 2ec:	df 01       	movw	r26, r30
 2ee:	a6 5b       	subi	r26, 0xB6	; 182
 2f0:	bf 4f       	sbci	r27, 0xFF	; 255
 2f2:	cd 93       	st	X+, r28
 2f4:	dc 93       	st	X, r29
	//pid_rate(pid_data);

	
	//  rate calculations start here
	pid_data->previousRateError0 = pid_data->previousRateError1;
 2f6:	c6 ac       	ldd	r12, Z+62	; 0x3e
 2f8:	d7 ac       	ldd	r13, Z+63	; 0x3f
 2fa:	c4 ae       	std	Z+60, r12	; 0x3c
 2fc:	d5 ae       	std	Z+61, r13	; 0x3d
	pid_data->previousRateError1 = pid_data->previousRateError2;
 2fe:	df 01       	movw	r26, r30
 300:	a0 5c       	subi	r26, 0xC0	; 192
 302:	bf 4f       	sbci	r27, 0xFF	; 255
 304:	ed 90       	ld	r14, X+
 306:	fc 90       	ld	r15, X
 308:	11 97       	sbiw	r26, 0x01	; 1
 30a:	e6 ae       	std	Z+62, r14	; 0x3e
 30c:	f7 ae       	std	Z+63, r15	; 0x3f
	pid_data->previousRateError2 = pid_data->rate_error;
 30e:	04 a5       	ldd	r16, Z+44	; 0x2c
 310:	15 a5       	ldd	r17, Z+45	; 0x2d
 312:	0d 93       	st	X+, r16
 314:	1c 93       	st	X, r17
	
	pid_data->rate_error = (-pid_data->attitude_loop_out- pid_data->rate_feedback);
 316:	d1 95       	neg	r29
 318:	c1 95       	neg	r28
 31a:	d1 09       	sbc	r29, r1
 31c:	80 a1       	ldd	r24, Z+32	; 0x20
 31e:	91 a1       	ldd	r25, Z+33	; 0x21
 320:	c8 1b       	sub	r28, r24
 322:	d9 0b       	sbc	r29, r25
 324:	c4 a7       	std	Z+44, r28	; 0x2c
 326:	d5 a7       	std	Z+45, r29	; 0x2d
	
	pid_data->rate_integral = pid_data->rate_error/integral_addup_reducer + pid_data->previousRateError0/integral_addup_reducer +
 328:	ce 01       	movw	r24, r28
 32a:	b9 01       	movw	r22, r18
 32c:	73 d4       	rcall	.+2278   	; 0xc14 <__divmodhi4>
 32e:	5b 01       	movw	r10, r22
 330:	c6 01       	movw	r24, r12
 332:	b9 01       	movw	r22, r18
 334:	6f d4       	rcall	.+2270   	; 0xc14 <__divmodhi4>
 336:	65 01       	movw	r12, r10
 338:	c6 0e       	add	r12, r22
 33a:	d7 1e       	adc	r13, r23
	pid_data->previousRateError1/integral_addup_reducer + pid_data->previousRateError2/integral_addup_reducer;
 33c:	c7 01       	movw	r24, r14
 33e:	b9 01       	movw	r22, r18
 340:	69 d4       	rcall	.+2258   	; 0xc14 <__divmodhi4>
	pid_data->previousRateError1 = pid_data->previousRateError2;
	pid_data->previousRateError2 = pid_data->rate_error;
	
	pid_data->rate_error = (-pid_data->attitude_loop_out- pid_data->rate_feedback);
	
	pid_data->rate_integral = pid_data->rate_error/integral_addup_reducer + pid_data->previousRateError0/integral_addup_reducer +
 342:	76 01       	movw	r14, r12
 344:	e6 0e       	add	r14, r22
 346:	f7 1e       	adc	r15, r23
	pid_data->previousRateError1/integral_addup_reducer + pid_data->previousRateError2/integral_addup_reducer;
 348:	c8 01       	movw	r24, r16
 34a:	b9 01       	movw	r22, r18
 34c:	63 d4       	rcall	.+2246   	; 0xc14 <__divmodhi4>
 34e:	e6 0e       	add	r14, r22
 350:	f7 1e       	adc	r15, r23
	pid_data->previousRateError1 = pid_data->previousRateError2;
	pid_data->previousRateError2 = pid_data->rate_error;
	
	pid_data->rate_error = (-pid_data->attitude_loop_out- pid_data->rate_feedback);
	
	pid_data->rate_integral = pid_data->rate_error/integral_addup_reducer + pid_data->previousRateError0/integral_addup_reducer +
 352:	e0 82       	st	Z, r14
 354:	f1 82       	std	Z+1, r15	; 0x01
	pid_data->previousRateError1/integral_addup_reducer + pid_data->previousRateError2/integral_addup_reducer;
	
	pid_data->p_term_rate = (pid_data->rate_error * pid_data->Kp_rate)/10;
 356:	20 89       	ldd	r18, Z+16	; 0x10
 358:	31 89       	ldd	r19, Z+17	; 0x11
 35a:	c2 9f       	mul	r28, r18
 35c:	c0 01       	movw	r24, r0
 35e:	c3 9f       	mul	r28, r19
 360:	90 0d       	add	r25, r0
 362:	d2 9f       	mul	r29, r18
 364:	90 0d       	add	r25, r0
 366:	11 24       	eor	r1, r1
 368:	ca e0       	ldi	r28, 0x0A	; 10
 36a:	d0 e0       	ldi	r29, 0x00	; 0
 36c:	be 01       	movw	r22, r28
 36e:	52 d4       	rcall	.+2212   	; 0xc14 <__divmodhi4>
 370:	9b 01       	movw	r18, r22
 372:	64 83       	std	Z+4, r22	; 0x04
 374:	75 83       	std	Z+5, r23	; 0x05
	
	pid_data->i_term_rate = (pid_data->rate_total_error  * pid_data->Ki_rate)/10;
 376:	64 a9       	ldd	r22, Z+52	; 0x34
 378:	75 a9       	ldd	r23, Z+53	; 0x35
 37a:	42 89       	ldd	r20, Z+18	; 0x12
 37c:	53 89       	ldd	r21, Z+19	; 0x13
 37e:	64 9f       	mul	r22, r20
 380:	c0 01       	movw	r24, r0
 382:	65 9f       	mul	r22, r21
 384:	90 0d       	add	r25, r0
 386:	74 9f       	mul	r23, r20
 388:	90 0d       	add	r25, r0
 38a:	11 24       	eor	r1, r1
 38c:	be 01       	movw	r22, r28
 38e:	42 d4       	rcall	.+2180   	; 0xc14 <__divmodhi4>
 390:	66 83       	std	Z+6, r22	; 0x06
 392:	77 83       	std	Z+7, r23	; 0x07

	pid_data->pid_total =(pid_data->p_term_rate + pid_data->i_term_rate);
 394:	26 0f       	add	r18, r22
 396:	37 1f       	adc	r19, r23
 398:	24 8f       	std	Z+28, r18	; 0x1c
 39a:	35 8f       	std	Z+29, r19	; 0x1d
	//}
	//pid_data->pid_total = pid_data->p_term_rate;
	
	
	
}
 39c:	df 91       	pop	r29
 39e:	cf 91       	pop	r28
 3a0:	1f 91       	pop	r17
 3a2:	0f 91       	pop	r16
 3a4:	ff 90       	pop	r15
 3a6:	ef 90       	pop	r14
 3a8:	df 90       	pop	r13
 3aa:	cf 90       	pop	r12
 3ac:	bf 90       	pop	r11
 3ae:	af 90       	pop	r10
 3b0:	08 95       	ret

000003b2 <initPWM>:
*********************************************************************************************************** */
void sendUM6_Data()
{

		sendData_int16_t(0xCCCC);					//0xCCCC is the heade
		sendData_int16_t(command);
 3b2:	e0 e0       	ldi	r30, 0x00	; 0
 3b4:	f8 e0       	ldi	r31, 0x08	; 8
 3b6:	83 e0       	ldi	r24, 0x03	; 3
 3b8:	80 83       	st	Z, r24
 3ba:	81 83       	std	Z+1, r24	; 0x01
 3bc:	82 83       	std	Z+2, r24	; 0x02
 3be:	83 83       	std	Z+3, r24	; 0x03
 3c0:	81 81       	ldd	r24, Z+1	; 0x01
 3c2:	80 61       	ori	r24, 0x10	; 16
 3c4:	81 83       	std	Z+1, r24	; 0x01
 3c6:	81 81       	ldd	r24, Z+1	; 0x01
 3c8:	80 62       	ori	r24, 0x20	; 32
 3ca:	81 83       	std	Z+1, r24	; 0x01
 3cc:	81 81       	ldd	r24, Z+1	; 0x01
 3ce:	80 64       	ori	r24, 0x40	; 64
 3d0:	81 83       	std	Z+1, r24	; 0x01
 3d2:	81 81       	ldd	r24, Z+1	; 0x01
 3d4:	80 68       	ori	r24, 0x80	; 128
 3d6:	81 83       	std	Z+1, r24	; 0x01
 3d8:	8f e0       	ldi	r24, 0x0F	; 15
 3da:	a0 e4       	ldi	r26, 0x40	; 64
 3dc:	b6 e0       	ldi	r27, 0x06	; 6
 3de:	11 96       	adiw	r26, 0x01	; 1
 3e0:	8c 93       	st	X, r24
 3e2:	10 ae       	std	Z+56, r1	; 0x38
 3e4:	11 ae       	std	Z+57, r1	; 0x39
 3e6:	12 ae       	std	Z+58, r1	; 0x3a
 3e8:	13 ae       	std	Z+59, r1	; 0x3b
 3ea:	14 ae       	std	Z+60, r1	; 0x3c
 3ec:	15 ae       	std	Z+61, r1	; 0x3d
 3ee:	10 92 3e 08 	sts	0x083E, r1
 3f2:	10 92 3f 08 	sts	0x083F, r1
 3f6:	89 e2       	ldi	r24, 0x29	; 41
 3f8:	98 e6       	ldi	r25, 0x68	; 104
 3fa:	86 a3       	std	Z+38, r24	; 0x26
 3fc:	97 a3       	std	Z+39, r25	; 0x27
 3fe:	63 e0       	ldi	r22, 0x03	; 3
 400:	80 e0       	ldi	r24, 0x00	; 0
 402:	98 e0       	ldi	r25, 0x08	; 8
 404:	e8 c3       	rjmp	.+2000   	; 0xbd6 <TC0_ConfigClockSource>

00000406 <DisablePWM>:
 406:	e0 e0       	ldi	r30, 0x00	; 0
 408:	f8 e0       	ldi	r31, 0x08	; 8
 40a:	81 81       	ldd	r24, Z+1	; 0x01
 40c:	81 83       	std	Z+1, r24	; 0x01
 40e:	81 81       	ldd	r24, Z+1	; 0x01
 410:	81 83       	std	Z+1, r24	; 0x01
 412:	81 81       	ldd	r24, Z+1	; 0x01
 414:	81 83       	std	Z+1, r24	; 0x01
 416:	81 81       	ldd	r24, Z+1	; 0x01
 418:	81 83       	std	Z+1, r24	; 0x01
 41a:	08 95       	ret

0000041c <doPWM>:
 41c:	e0 e0       	ldi	r30, 0x00	; 0
 41e:	f8 e0       	ldi	r31, 0x08	; 8
 420:	e4 85       	ldd	r30, Z+12	; 0x0c
 422:	e0 ff       	sbrs	r30, 0
 424:	0e c0       	rjmp	.+28     	; 0x442 <doPWM+0x26>
 426:	e0 e0       	ldi	r30, 0x00	; 0
 428:	f8 e0       	ldi	r31, 0x08	; 8
 42a:	a1 e0       	ldi	r26, 0x01	; 1
 42c:	a4 87       	std	Z+12, r26	; 0x0c
 42e:	80 af       	std	Z+56, r24	; 0x38
 430:	91 af       	std	Z+57, r25	; 0x39
 432:	62 af       	std	Z+58, r22	; 0x3a
 434:	73 af       	std	Z+59, r23	; 0x3b
 436:	44 af       	std	Z+60, r20	; 0x3c
 438:	55 af       	std	Z+61, r21	; 0x3d
 43a:	20 93 3e 08 	sts	0x083E, r18
 43e:	30 93 3f 08 	sts	0x083F, r19
 442:	08 95       	ret

00000444 <SetPulseWidths>:
 444:	80 91 e6 20 	lds	r24, 0x20E6
 448:	90 91 e7 20 	lds	r25, 0x20E7
 44c:	9c 01       	movw	r18, r24
 44e:	21 5d       	subi	r18, 0xD1	; 209
 450:	37 40       	sbci	r19, 0x07	; 7
 452:	2f 32       	cpi	r18, 0x2F	; 47
 454:	38 40       	sbci	r19, 0x08	; 8
 456:	c8 f4       	brcc	.+50     	; 0x48a <SetPulseWidths+0x46>
 458:	88 0f       	add	r24, r24
 45a:	99 1f       	adc	r25, r25
 45c:	88 0f       	add	r24, r24
 45e:	99 1f       	adc	r25, r25
 460:	60 91 6e 20 	lds	r22, 0x206E
 464:	70 91 6f 20 	lds	r23, 0x206F
 468:	e0 91 1f 20 	lds	r30, 0x201F
 46c:	f0 91 20 20 	lds	r31, 0x2020
 470:	9c 01       	movw	r18, r24
 472:	26 0f       	add	r18, r22
 474:	37 1f       	adc	r19, r23
 476:	ac 01       	movw	r20, r24
 478:	4e 0f       	add	r20, r30
 47a:	5f 1f       	adc	r21, r31
 47c:	dc 01       	movw	r26, r24
 47e:	a6 1b       	sub	r26, r22
 480:	b7 0b       	sbc	r27, r23
 482:	bd 01       	movw	r22, r26
 484:	8e 1b       	sub	r24, r30
 486:	9f 0b       	sbc	r25, r31
 488:	c9 cf       	rjmp	.-110    	; 0x41c <doPWM>
 48a:	20 e0       	ldi	r18, 0x00	; 0
 48c:	30 e0       	ldi	r19, 0x00	; 0
 48e:	40 e0       	ldi	r20, 0x00	; 0
 490:	50 e0       	ldi	r21, 0x00	; 0
 492:	60 e0       	ldi	r22, 0x00	; 0
 494:	70 e0       	ldi	r23, 0x00	; 0
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	c0 cf       	rjmp	.-128    	; 0x41c <doPWM>

0000049c <intPID_gains>:
 49c:	85 e0       	ldi	r24, 0x05	; 5
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	80 93 13 20 	sts	0x2013, r24
 4a4:	90 93 14 20 	sts	0x2014, r25
 4a8:	10 92 15 20 	sts	0x2015, r1
 4ac:	10 92 16 20 	sts	0x2016, r1
 4b0:	80 93 17 20 	sts	0x2017, r24
 4b4:	90 93 18 20 	sts	0x2018, r25
 4b8:	8c e0       	ldi	r24, 0x0C	; 12
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	80 93 62 20 	sts	0x2062, r24
 4c0:	90 93 63 20 	sts	0x2063, r25
 4c4:	88 e1       	ldi	r24, 0x18	; 24
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	80 93 64 20 	sts	0x2064, r24
 4cc:	90 93 65 20 	sts	0x2065, r25
 4d0:	10 92 66 20 	sts	0x2066, r1
 4d4:	10 92 67 20 	sts	0x2067, r1
 4d8:	88 ec       	ldi	r24, 0xC8	; 200
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	80 93 33 20 	sts	0x2033, r24
 4e0:	90 93 34 20 	sts	0x2034, r25
 4e4:	80 93 82 20 	sts	0x2082, r24
 4e8:	90 93 83 20 	sts	0x2083, r25
 4ec:	80 93 1a 21 	sts	0x211A, r24
 4f0:	90 93 1b 21 	sts	0x211B, r25
 4f4:	08 95       	ret

000004f6 <WriteToPC_SPI>:
  OUTPUT:
  DISCRIPTION:  Write data packet to the SPI bus connected to the ATmega, 
  the ATmega should be set up to parse this data.
*********************************************************************************************************** */
int16_t WriteToPC_SPI()
{
 4f6:	af 92       	push	r10
 4f8:	bf 92       	push	r11
 4fa:	df 92       	push	r13
 4fc:	ef 92       	push	r14
 4fe:	ff 92       	push	r15
 500:	0f 93       	push	r16
 502:	1f 93       	push	r17
 504:	cf 93       	push	r28
 506:	df 93       	push	r29
	PORTE.OUTCLR = PIN4_bm;
 508:	0f 2e       	mov	r0, r31
 50a:	f0 e8       	ldi	r31, 0x80	; 128
 50c:	ef 2e       	mov	r14, r31
 50e:	f6 e0       	ldi	r31, 0x06	; 6
 510:	ff 2e       	mov	r15, r31
 512:	f0 2d       	mov	r31, r0
 514:	68 94       	set
 516:	dd 24       	eor	r13, r13
 518:	d4 f8       	bld	r13, 4
 51a:	f7 01       	movw	r30, r14
 51c:	d6 82       	std	Z+6, r13	; 0x06
	
	throttleAxis.thrust = spiPC_write_read(upperByte16(throttleAxis.thrust )) << 8;						
 51e:	06 ee       	ldi	r16, 0xE6	; 230
 520:	10 e2       	ldi	r17, 0x20	; 32
 522:	f8 01       	movw	r30, r16
 524:	81 81       	ldd	r24, Z+1	; 0x01
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	d9 d2       	rcall	.+1458   	; 0xadc <spiPC_write_read>
 52a:	d8 2f       	mov	r29, r24
 52c:	f0 e0       	ldi	r31, 0x00	; 0
 52e:	cf 2f       	mov	r28, r31
 530:	f8 01       	movw	r30, r16
 532:	c0 83       	st	Z, r28
 534:	d1 83       	std	Z+1, r29	; 0x01
	throttleAxis.thrust += spiPC_write_read(lowerByte16(throttleAxis.thrust ));							
 536:	80 e0       	ldi	r24, 0x00	; 0
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	d0 d2       	rcall	.+1440   	; 0xadc <spiPC_write_read>
 53c:	8c 0f       	add	r24, r28
 53e:	9d 1f       	adc	r25, r29
 540:	f8 01       	movw	r30, r16
 542:	80 83       	st	Z, r24
 544:	91 83       	std	Z+1, r25	; 0x01
	
	rollAxis.attitude_command = spiPC_write_read(upperByte16(pitchAxis.attitude_feedback)) << 8;
 546:	0f 2e       	mov	r0, r31
 548:	f0 e7       	ldi	r31, 0x70	; 112
 54a:	af 2e       	mov	r10, r31
 54c:	f0 e2       	ldi	r31, 0x20	; 32
 54e:	bf 2e       	mov	r11, r31
 550:	f0 2d       	mov	r31, r0
 552:	f5 01       	movw	r30, r10
 554:	81 81       	ldd	r24, Z+1	; 0x01
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	c1 d2       	rcall	.+1410   	; 0xadc <spiPC_write_read>
 55a:	d8 2f       	mov	r29, r24
 55c:	f0 e0       	ldi	r31, 0x00	; 0
 55e:	cf 2f       	mov	r28, r31
 560:	05 e2       	ldi	r16, 0x25	; 37
 562:	10 e2       	ldi	r17, 0x20	; 32
 564:	f8 01       	movw	r30, r16
 566:	c0 83       	st	Z, r28
 568:	d1 83       	std	Z+1, r29	; 0x01
	rollAxis.attitude_command  += spiPC_write_read(lowerByte16(pitchAxis.attitude_feedback));
 56a:	f5 01       	movw	r30, r10
 56c:	80 81       	ld	r24, Z
 56e:	91 81       	ldd	r25, Z+1	; 0x01
 570:	99 27       	eor	r25, r25
 572:	b4 d2       	rcall	.+1384   	; 0xadc <spiPC_write_read>
 574:	8c 0f       	add	r24, r28
 576:	9d 1f       	adc	r25, r29
 578:	f8 01       	movw	r30, r16
 57a:	80 83       	st	Z, r24
 57c:	91 83       	std	Z+1, r25	; 0x01
	
	pitchAxis.attitude_command = spiPC_write_read(upperByte16(rollAxis.attitude_feedback)) << 8;
 57e:	0f 2e       	mov	r0, r31
 580:	f1 e2       	ldi	r31, 0x21	; 33
 582:	af 2e       	mov	r10, r31
 584:	f0 e2       	ldi	r31, 0x20	; 32
 586:	bf 2e       	mov	r11, r31
 588:	f0 2d       	mov	r31, r0
 58a:	f5 01       	movw	r30, r10
 58c:	81 81       	ldd	r24, Z+1	; 0x01
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	a5 d2       	rcall	.+1354   	; 0xadc <spiPC_write_read>
 592:	d8 2f       	mov	r29, r24
 594:	f0 e0       	ldi	r31, 0x00	; 0
 596:	cf 2f       	mov	r28, r31
 598:	04 e7       	ldi	r16, 0x74	; 116
 59a:	10 e2       	ldi	r17, 0x20	; 32
 59c:	f8 01       	movw	r30, r16
 59e:	c0 83       	st	Z, r28
 5a0:	d1 83       	std	Z+1, r29	; 0x01
	pitchAxis.attitude_command += spiPC_write_read(lowerByte16(rollAxis.attitude_feedback));
 5a2:	f5 01       	movw	r30, r10
 5a4:	80 81       	ld	r24, Z
 5a6:	91 81       	ldd	r25, Z+1	; 0x01
 5a8:	99 27       	eor	r25, r25
 5aa:	98 d2       	rcall	.+1328   	; 0xadc <spiPC_write_read>
 5ac:	8c 0f       	add	r24, r28
 5ae:	9d 1f       	adc	r25, r29
 5b0:	f8 01       	movw	r30, r16
 5b2:	80 83       	st	Z, r24
 5b4:	91 83       	std	Z+1, r25	; 0x01

	yawAxis.attitude_command = spiPC_write_read(upperByte16(yawAxis.attitude_feedback)) << 8;
 5b6:	0f 2e       	mov	r0, r31
 5b8:	f8 e0       	ldi	r31, 0x08	; 8
 5ba:	af 2e       	mov	r10, r31
 5bc:	f1 e2       	ldi	r31, 0x21	; 33
 5be:	bf 2e       	mov	r11, r31
 5c0:	f0 2d       	mov	r31, r0
 5c2:	f5 01       	movw	r30, r10
 5c4:	81 81       	ldd	r24, Z+1	; 0x01
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	89 d2       	rcall	.+1298   	; 0xadc <spiPC_write_read>
 5ca:	d8 2f       	mov	r29, r24
 5cc:	f0 e0       	ldi	r31, 0x00	; 0
 5ce:	cf 2f       	mov	r28, r31
 5d0:	0c e0       	ldi	r16, 0x0C	; 12
 5d2:	11 e2       	ldi	r17, 0x21	; 33
 5d4:	f8 01       	movw	r30, r16
 5d6:	c0 83       	st	Z, r28
 5d8:	d1 83       	std	Z+1, r29	; 0x01
	yawAxis.attitude_command += spiPC_write_read(lowerByte16(yawAxis.attitude_feedback));
 5da:	f5 01       	movw	r30, r10
 5dc:	80 81       	ld	r24, Z
 5de:	91 81       	ldd	r25, Z+1	; 0x01
 5e0:	99 27       	eor	r25, r25
 5e2:	7c d2       	rcall	.+1272   	; 0xadc <spiPC_write_read>
 5e4:	8c 0f       	add	r24, r28
 5e6:	9d 1f       	adc	r25, r29
 5e8:	f8 01       	movw	r30, r16
 5ea:	80 83       	st	Z, r24
 5ec:	91 83       	std	Z+1, r25	; 0x01
		
	pitchAxis.Kp = (spiPC_write_read(upperByte16(pitchAxis.pid_total ))) << 8;					
 5ee:	ce e6       	ldi	r28, 0x6E	; 110
 5f0:	d0 e2       	ldi	r29, 0x20	; 32
 5f2:	89 81       	ldd	r24, Y+1	; 0x01
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	72 d2       	rcall	.+1252   	; 0xadc <spiPC_write_read>
 5f8:	18 2f       	mov	r17, r24
 5fa:	00 e0       	ldi	r16, 0x00	; 0
 5fc:	0f 2e       	mov	r0, r31
 5fe:	f8 e6       	ldi	r31, 0x68	; 104
 600:	af 2e       	mov	r10, r31
 602:	f0 e2       	ldi	r31, 0x20	; 32
 604:	bf 2e       	mov	r11, r31
 606:	f0 2d       	mov	r31, r0
 608:	f5 01       	movw	r30, r10
 60a:	00 83       	st	Z, r16
 60c:	11 83       	std	Z+1, r17	; 0x01
	pitchAxis.Kp += spiPC_write_read(lowerByte16(pitchAxis.pid_total ));							
 60e:	88 81       	ld	r24, Y
 610:	99 81       	ldd	r25, Y+1	; 0x01
 612:	99 27       	eor	r25, r25
 614:	63 d2       	rcall	.+1222   	; 0xadc <spiPC_write_read>
 616:	80 0f       	add	r24, r16
 618:	91 1f       	adc	r25, r17
 61a:	f5 01       	movw	r30, r10
 61c:	80 83       	st	Z, r24
 61e:	91 83       	std	Z+1, r25	; 0x01
	
	pitchAxis.Ki = (spiPC_write_read(upperByte16(pitchAxis.pid_total  ))) << 8;					
 620:	89 81       	ldd	r24, Y+1	; 0x01
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	5b d2       	rcall	.+1206   	; 0xadc <spiPC_write_read>
 626:	18 2f       	mov	r17, r24
 628:	00 e0       	ldi	r16, 0x00	; 0
 62a:	0f 2e       	mov	r0, r31
 62c:	fa e6       	ldi	r31, 0x6A	; 106
 62e:	af 2e       	mov	r10, r31
 630:	f0 e2       	ldi	r31, 0x20	; 32
 632:	bf 2e       	mov	r11, r31
 634:	f0 2d       	mov	r31, r0
 636:	f5 01       	movw	r30, r10
 638:	00 83       	st	Z, r16
 63a:	11 83       	std	Z+1, r17	; 0x01
	pitchAxis.Ki += spiPC_write_read(lowerByte16(pitchAxis.pid_total ));							
 63c:	88 81       	ld	r24, Y
 63e:	99 81       	ldd	r25, Y+1	; 0x01
 640:	99 27       	eor	r25, r25
 642:	4c d2       	rcall	.+1176   	; 0xadc <spiPC_write_read>
 644:	80 0f       	add	r24, r16
 646:	91 1f       	adc	r25, r17
 648:	f5 01       	movw	r30, r10
 64a:	80 83       	st	Z, r24
 64c:	91 83       	std	Z+1, r25	; 0x01
		
	pitchAxis.Kd= (spiPC_write_read(upperByte16(pitchAxis.pid_total))) << 8;					
 64e:	89 81       	ldd	r24, Y+1	; 0x01
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	44 d2       	rcall	.+1160   	; 0xadc <spiPC_write_read>
 654:	18 2f       	mov	r17, r24
 656:	00 e0       	ldi	r16, 0x00	; 0
 658:	0f 2e       	mov	r0, r31
 65a:	fc e6       	ldi	r31, 0x6C	; 108
 65c:	af 2e       	mov	r10, r31
 65e:	f0 e2       	ldi	r31, 0x20	; 32
 660:	bf 2e       	mov	r11, r31
 662:	f0 2d       	mov	r31, r0
 664:	f5 01       	movw	r30, r10
 666:	00 83       	st	Z, r16
 668:	11 83       	std	Z+1, r17	; 0x01
	pitchAxis.Kd+= spiPC_write_read(lowerByte16(pitchAxis.pid_total));			
 66a:	88 81       	ld	r24, Y
 66c:	99 81       	ldd	r25, Y+1	; 0x01
 66e:	99 27       	eor	r25, r25
 670:	35 d2       	rcall	.+1130   	; 0xadc <spiPC_write_read>
 672:	80 0f       	add	r24, r16
 674:	91 1f       	adc	r25, r17
 676:	f5 01       	movw	r30, r10
 678:	80 83       	st	Z, r24
 67a:	91 83       	std	Z+1, r25	; 0x01
	
	command= (spiPC_write_read(upperByte16(pitchAxis.pid_total))) << 8;
 67c:	89 81       	ldd	r24, Y+1	; 0x01
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	2d d2       	rcall	.+1114   	; 0xadc <spiPC_write_read>
 682:	10 92 4f 20 	sts	0x204F, r1
 686:	80 93 50 20 	sts	0x2050, r24
	command+= spiPC_write_read(lowerByte16(pitchAxis.pid_total));			
 68a:	88 81       	ld	r24, Y
 68c:	99 81       	ldd	r25, Y+1	; 0x01
 68e:	99 27       	eor	r25, r25
 690:	25 d2       	rcall	.+1098   	; 0xadc <spiPC_write_read>
 692:	20 91 4f 20 	lds	r18, 0x204F
 696:	30 91 50 20 	lds	r19, 0x2050
 69a:	82 0f       	add	r24, r18
 69c:	93 1f       	adc	r25, r19
 69e:	80 93 4f 20 	sts	0x204F, r24
 6a2:	90 93 50 20 	sts	0x2050, r25
	
	dummy_read = spiPC_write_read(END_PACKET_CHAR);													
 6a6:	8c ec       	ldi	r24, 0xCC	; 204
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	18 d2       	rcall	.+1072   	; 0xadc <spiPC_write_read>
 6ac:	80 93 51 20 	sts	0x2051, r24
	dummy_read = spiPC_write_read(END_PACKET_CHAR);			
 6b0:	8c ec       	ldi	r24, 0xCC	; 204
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	13 d2       	rcall	.+1062   	; 0xadc <spiPC_write_read>
 6b6:	80 93 51 20 	sts	0x2051, r24
	//rollAxis.Kp = pitchAxis.Kp;
	//rollAxis.Ki = rollAxis.Ki;
	//rollAxis.Kd_rate = rollAxis.Kd_rate;										
	
	
	PORTE.OUTSET = PIN4_bm;
 6ba:	f7 01       	movw	r30, r14
 6bc:	d5 82       	std	Z+5, r13	; 0x05
	
	return command;
	
}
 6be:	80 91 4f 20 	lds	r24, 0x204F
 6c2:	90 91 50 20 	lds	r25, 0x2050
 6c6:	df 91       	pop	r29
 6c8:	cf 91       	pop	r28
 6ca:	1f 91       	pop	r17
 6cc:	0f 91       	pop	r16
 6ce:	ff 90       	pop	r15
 6d0:	ef 90       	pop	r14
 6d2:	df 90       	pop	r13
 6d4:	bf 90       	pop	r11
 6d6:	af 90       	pop	r10
 6d8:	08 95       	ret

000006da <UpdateEulerAngles>:
OUTPUT:
DISCRIPTION:   Read in data from the IMU.  Most of the IMU data are 16 bits sorted in 32 bit registers, see
data sheet for read commands
*********************************************************************************************************** */
void UpdateEulerAngles()
{
 6da:	0f 93       	push	r16
 6dc:	1f 93       	push	r17
 6de:	cf 93       	push	r28
 6e0:	df 93       	push	r29

	PORTF.OUTCLR = PIN4_bm;
 6e2:	c0 ea       	ldi	r28, 0xA0	; 160
 6e4:	d6 e0       	ldi	r29, 0x06	; 6
 6e6:	10 e1       	ldi	r17, 0x10	; 16
 6e8:	1e 83       	std	Y+6, r17	; 0x06

	uint8_t dummy_read = 0x00;
	//psi = yaw  phi = roll    theta = pitch
	dummy_read = spiIMU_write_read(READ_COMMAND);
 6ea:	80 e0       	ldi	r24, 0x00	; 0
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	03 d2       	rcall	.+1030   	; 0xaf6 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(UM6_EULER_PHI_THETA);
 6f0:	82 e6       	ldi	r24, 0x62	; 98
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	00 d2       	rcall	.+1024   	; 0xaf6 <spiIMU_write_read>
	
	//MSB first
	rollAxis.attitude_feedback = (spiIMU_write_read(DUMMY_READ)<< 8) | spiIMU_write_read(DUMMY_READ);
 6f6:	80 e0       	ldi	r24, 0x00	; 0
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	fd d1       	rcall	.+1018   	; 0xaf6 <spiIMU_write_read>
 6fc:	08 2f       	mov	r16, r24
 6fe:	80 e0       	ldi	r24, 0x00	; 0
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	f9 d1       	rcall	.+1010   	; 0xaf6 <spiIMU_write_read>
 704:	30 2f       	mov	r19, r16
 706:	20 e0       	ldi	r18, 0x00	; 0
 708:	82 2b       	or	r24, r18
 70a:	93 2b       	or	r25, r19
 70c:	80 93 21 20 	sts	0x2021, r24
 710:	90 93 22 20 	sts	0x2022, r25

	pitchAxis.attitude_feedback = (spiIMU_write_read(DUMMY_READ)<< 8) | spiIMU_write_read(UM6_EULER_PSI);
 714:	80 e0       	ldi	r24, 0x00	; 0
 716:	90 e0       	ldi	r25, 0x00	; 0
 718:	ee d1       	rcall	.+988    	; 0xaf6 <spiIMU_write_read>
 71a:	08 2f       	mov	r16, r24
 71c:	83 e6       	ldi	r24, 0x63	; 99
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	ea d1       	rcall	.+980    	; 0xaf6 <spiIMU_write_read>
 722:	30 2f       	mov	r19, r16
 724:	20 e0       	ldi	r18, 0x00	; 0
 726:	82 2b       	or	r24, r18
 728:	93 2b       	or	r25, r19
 72a:	80 93 70 20 	sts	0x2070, r24
 72e:	90 93 71 20 	sts	0x2071, r25
	
	yawAxis.attitude_feedback = (spiIMU_write_read(DUMMY_READ)<< 8) | spiIMU_write_read(DUMMY_READ);
 732:	80 e0       	ldi	r24, 0x00	; 0
 734:	90 e0       	ldi	r25, 0x00	; 0
 736:	df d1       	rcall	.+958    	; 0xaf6 <spiIMU_write_read>
 738:	08 2f       	mov	r16, r24
 73a:	80 e0       	ldi	r24, 0x00	; 0
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	db d1       	rcall	.+950    	; 0xaf6 <spiIMU_write_read>
 740:	30 2f       	mov	r19, r16
 742:	20 e0       	ldi	r18, 0x00	; 0
 744:	82 2b       	or	r24, r18
 746:	93 2b       	or	r25, r19
 748:	80 93 08 21 	sts	0x2108, r24
 74c:	90 93 09 21 	sts	0x2109, r25

	dummy_read = spiIMU_write_read(DUMMY_READ);     dummy_read =  spiIMU_write_read(UM6_GYRO_PROC_XY);			// reserved bytes
 750:	80 e0       	ldi	r24, 0x00	; 0
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	d0 d1       	rcall	.+928    	; 0xaf6 <spiIMU_write_read>
 756:	8c e5       	ldi	r24, 0x5C	; 92
 758:	90 e0       	ldi	r25, 0x00	; 0
 75a:	cd d1       	rcall	.+922    	; 0xaf6 <spiIMU_write_read>
	
	pitchAxis.rate_feedback  = (spiIMU_write_read(DUMMY_READ)<< 8) | spiIMU_write_read(DUMMY_READ);
 75c:	80 e0       	ldi	r24, 0x00	; 0
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	ca d1       	rcall	.+916    	; 0xaf6 <spiIMU_write_read>
 762:	08 2f       	mov	r16, r24
 764:	80 e0       	ldi	r24, 0x00	; 0
 766:	90 e0       	ldi	r25, 0x00	; 0
 768:	c6 d1       	rcall	.+908    	; 0xaf6 <spiIMU_write_read>
 76a:	30 2f       	mov	r19, r16
 76c:	20 e0       	ldi	r18, 0x00	; 0
 76e:	82 2b       	or	r24, r18
 770:	93 2b       	or	r25, r19
 772:	80 93 72 20 	sts	0x2072, r24
 776:	90 93 73 20 	sts	0x2073, r25

	rollAxis.rate_feedback = (spiIMU_write_read(DUMMY_READ)<< 8) | spiIMU_write_read(UM6_GYRO_PROC_Z);
 77a:	80 e0       	ldi	r24, 0x00	; 0
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	bb d1       	rcall	.+886    	; 0xaf6 <spiIMU_write_read>
 780:	08 2f       	mov	r16, r24
 782:	8d e5       	ldi	r24, 0x5D	; 93
 784:	90 e0       	ldi	r25, 0x00	; 0
 786:	b7 d1       	rcall	.+878    	; 0xaf6 <spiIMU_write_read>
 788:	30 2f       	mov	r19, r16
 78a:	20 e0       	ldi	r18, 0x00	; 0
 78c:	82 2b       	or	r24, r18
 78e:	93 2b       	or	r25, r19
 790:	80 93 23 20 	sts	0x2023, r24
 794:	90 93 24 20 	sts	0x2024, r25
	
	yawAxis.rate_feedback = (spiIMU_write_read(DUMMY_READ)<< 8) | spiIMU_write_read(DUMMY_READ);
 798:	80 e0       	ldi	r24, 0x00	; 0
 79a:	90 e0       	ldi	r25, 0x00	; 0
 79c:	ac d1       	rcall	.+856    	; 0xaf6 <spiIMU_write_read>
 79e:	08 2f       	mov	r16, r24
 7a0:	80 e0       	ldi	r24, 0x00	; 0
 7a2:	90 e0       	ldi	r25, 0x00	; 0
 7a4:	a8 d1       	rcall	.+848    	; 0xaf6 <spiIMU_write_read>
 7a6:	30 2f       	mov	r19, r16
 7a8:	20 e0       	ldi	r18, 0x00	; 0
 7aa:	82 2b       	or	r24, r18
 7ac:	93 2b       	or	r25, r19
 7ae:	80 93 0a 21 	sts	0x210A, r24
 7b2:	90 93 0b 21 	sts	0x210B, r25

	dummy_read = spiIMU_write_read(DUMMY_READ);     dummy_read =  spiIMU_write_read(DUMMY_READ);			// reserved bytes
 7b6:	80 e0       	ldi	r24, 0x00	; 0
 7b8:	90 e0       	ldi	r25, 0x00	; 0
 7ba:	9d d1       	rcall	.+826    	; 0xaf6 <spiIMU_write_read>
 7bc:	80 e0       	ldi	r24, 0x00	; 0
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	9a d1       	rcall	.+820    	; 0xaf6 <spiIMU_write_read>
	


	PORTF.OUTSET = PIN4_bm;
 7c2:	1d 83       	std	Y+5, r17	; 0x05
	//
	//rollAxis.attitude_feedback /= CONVERT_EULER_TO_DEG;
	//pitchAxis.attitude_feedback /= CONVERT_EULER_TO_DEG;
	//yawAxis.attitude_feedback /= CONVERT_EULER_TO_DEG;
	
}
 7c4:	df 91       	pop	r29
 7c6:	cf 91       	pop	r28
 7c8:	1f 91       	pop	r17
 7ca:	0f 91       	pop	r16
 7cc:	08 95       	ret

000007ce <ControlLoop>:
*********************************************************************************************************** */
void ControlLoop()
{
	

	int16counter++;
 7ce:	80 91 36 21 	lds	r24, 0x2136
 7d2:	90 91 37 21 	lds	r25, 0x2137
 7d6:	01 96       	adiw	r24, 0x01	; 1
 7d8:	80 93 36 21 	sts	0x2136, r24
 7dc:	90 93 37 21 	sts	0x2137, r25
	UpdateEulerAngles();
 7e0:	7c df       	rcall	.-264    	; 0x6da <UpdateEulerAngles>
	SetPulseWidths();
 7e2:	30 de       	rcall	.-928    	; 0x444 <SetPulseWidths>
	//PI_attitude_rate(&pitchAxis);
	pid_attitude_rate(&pitchAxis);
 7e4:	82 e5       	ldi	r24, 0x52	; 82
 7e6:	90 e2       	ldi	r25, 0x20	; 32
 7e8:	2a dd       	rcall	.-1452   	; 0x23e <pid_attitude_rate>
	//PI_rate(&pitchAxis);

	if (int16counter >= 31)
 7ea:	80 91 36 21 	lds	r24, 0x2136
 7ee:	90 91 37 21 	lds	r25, 0x2137
 7f2:	4f 97       	sbiw	r24, 0x1f	; 31
 7f4:	28 f0       	brcs	.+10     	; 0x800 <ControlLoop+0x32>

	{

		WriteToPC_SPI();	// 400uSec	
 7f6:	7f de       	rcall	.-770    	; 0x4f6 <WriteToPC_SPI>
		int16counter = 0;
 7f8:	10 92 36 21 	sts	0x2136, r1
 7fc:	10 92 37 21 	sts	0x2137, r1
 800:	08 95       	ret

00000802 <init32MHzClock>:
*********************************************************************************************************** */
void init32MHzClock(void)
{

	//	Enable the 32 MHz internal RC oscillator.
	OSC.CTRL|=OSC_RC32MEN_bm;
 802:	e0 e5       	ldi	r30, 0x50	; 80
 804:	f0 e0       	ldi	r31, 0x00	; 0
 806:	80 81       	ld	r24, Z
 808:	82 60       	ori	r24, 0x02	; 2
 80a:	80 83       	st	Z, r24
	//	The R32MRFY flag is set when the 32 MHz internal RC oscillator is stable
	//	and ready to be used as the System Clock source.
	while(!(OSC.STATUS &OSC_RC32MRDY_bm ));
 80c:	81 81       	ldd	r24, Z+1	; 0x01
 80e:	81 ff       	sbrs	r24, 1
 810:	fd cf       	rjmp	.-6      	; 0x80c <init32MHzClock+0xa>
	CCP=CCP_IOREG_gc;
 812:	88 ed       	ldi	r24, 0xD8	; 216
 814:	84 bf       	out	0x34, r24	; 52
	//	Select the 32MHz RC oscillator for the system clock
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
 816:	81 e0       	ldi	r24, 0x01	; 1
 818:	80 93 40 00 	sts	0x0040, r24
 81c:	08 95       	ret

0000081e <intiLoopTimer>:
void intiLoopTimer()
{
	

	// Set the timer prescale.
	TCD0.CTRLA = TC_CLKSEL_DIV4_gc;
 81e:	e0 e0       	ldi	r30, 0x00	; 0
 820:	f9 e0       	ldi	r31, 0x09	; 9
 822:	83 e0       	ldi	r24, 0x03	; 3
 824:	80 83       	st	Z, r24

	/* Configure the timer for normal counting. */
	TCD0.CTRLB = TC_WGMODE_NORMAL_gc;
 826:	11 82       	std	Z+1, r1	; 0x01

	
	// 21000 counts set f = 305HZ by trial and error
	// frequency depends on IMU SPI clock pre scaler?
	// TCD0.PER = 18000;
	TCD0.PER = 21000;
 828:	88 e0       	ldi	r24, 0x08	; 8
 82a:	92 e5       	ldi	r25, 0x52	; 82
 82c:	86 a3       	std	Z+38, r24	; 0x26
 82e:	97 a3       	std	Z+39, r25	; 0x27

	//Configure timer to generate an interrupt on overflow. */
	TCD0.INTCTRLA = TC_OVFINTLVL_LO_gc;
 830:	81 e0       	ldi	r24, 0x01	; 1
 832:	86 83       	std	Z+6, r24	; 0x06

	/* Enable this interrupt level. */
	PMIC.CTRL |= PMIC_LOLVLEN_bm;
 834:	e0 ea       	ldi	r30, 0xA0	; 160
 836:	f0 e0       	ldi	r31, 0x00	; 0
 838:	82 81       	ldd	r24, Z+2	; 0x02
 83a:	81 60       	ori	r24, 0x01	; 1
 83c:	82 83       	std	Z+2, r24	; 0x02
 83e:	08 95       	ret

00000840 <zeroSensor>:




uint8_t zeroSensor()
{
 840:	1f 93       	push	r17
 842:	cf 93       	push	r28
 844:	df 93       	push	r29
	
	PORTF.OUTCLR = PIN4_bm;
 846:	c0 ea       	ldi	r28, 0xA0	; 160
 848:	d6 e0       	ldi	r29, 0x06	; 6
 84a:	10 e1       	ldi	r17, 0x10	; 16
 84c:	1e 83       	std	Y+6, r17	; 0x06
	//zero mad 0xB0
	
	uint8_t dummy_read = 0x00;
	//psi = yaw  phi = roll    theta = pitch
	//0x01 0xAC 0x00 0x00 0x00 0x00
	dummy_read = spiIMU_write_read(WRITE_COMMAND);
 84e:	81 e0       	ldi	r24, 0x01	; 1
 850:	90 e0       	ldi	r25, 0x00	; 0
 852:	51 d1       	rcall	.+674    	; 0xaf6 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(ZERO_GYROS);
 854:	8c ea       	ldi	r24, 0xAC	; 172
 856:	90 e0       	ldi	r25, 0x00	; 0
 858:	4e d1       	rcall	.+668    	; 0xaf6 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(DUMMY_READ);
 85a:	80 e0       	ldi	r24, 0x00	; 0
 85c:	90 e0       	ldi	r25, 0x00	; 0
 85e:	4b d1       	rcall	.+662    	; 0xaf6 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(DUMMY_READ);
 860:	80 e0       	ldi	r24, 0x00	; 0
 862:	90 e0       	ldi	r25, 0x00	; 0
 864:	48 d1       	rcall	.+656    	; 0xaf6 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(DUMMY_READ);
 866:	80 e0       	ldi	r24, 0x00	; 0
 868:	90 e0       	ldi	r25, 0x00	; 0
 86a:	45 d1       	rcall	.+650    	; 0xaf6 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(DUMMY_READ);
 86c:	80 e0       	ldi	r24, 0x00	; 0
 86e:	90 e0       	ldi	r25, 0x00	; 0
 870:	42 d1       	rcall	.+644    	; 0xaf6 <spiIMU_write_read>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 872:	8f e8       	ldi	r24, 0x8F	; 143
 874:	91 e0       	ldi	r25, 0x01	; 1
 876:	01 97       	sbiw	r24, 0x01	; 1
 878:	f1 f7       	brne	.-4      	; 0x876 <zeroSensor+0x36>
 87a:	00 c0       	rjmp	.+0      	; 0x87c <zeroSensor+0x3c>
 87c:	00 00       	nop
	
	_delay_us(50);
	dummy_read = spiIMU_write_read(WRITE_COMMAND);
 87e:	81 e0       	ldi	r24, 0x01	; 1
 880:	90 e0       	ldi	r25, 0x00	; 0
 882:	39 d1       	rcall	.+626    	; 0xaf6 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(SET_ACCEL_REF);
 884:	8f ea       	ldi	r24, 0xAF	; 175
 886:	90 e0       	ldi	r25, 0x00	; 0
 888:	36 d1       	rcall	.+620    	; 0xaf6 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(DUMMY_READ);
 88a:	80 e0       	ldi	r24, 0x00	; 0
 88c:	90 e0       	ldi	r25, 0x00	; 0
 88e:	33 d1       	rcall	.+614    	; 0xaf6 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(DUMMY_READ);
 890:	80 e0       	ldi	r24, 0x00	; 0
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	30 d1       	rcall	.+608    	; 0xaf6 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(DUMMY_READ);
 896:	80 e0       	ldi	r24, 0x00	; 0
 898:	90 e0       	ldi	r25, 0x00	; 0
 89a:	2d d1       	rcall	.+602    	; 0xaf6 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(DUMMY_READ);
 89c:	80 e0       	ldi	r24, 0x00	; 0
 89e:	90 e0       	ldi	r25, 0x00	; 0
 8a0:	2a d1       	rcall	.+596    	; 0xaf6 <spiIMU_write_read>
 8a2:	8f e8       	ldi	r24, 0x8F	; 143
 8a4:	91 e0       	ldi	r25, 0x01	; 1
 8a6:	01 97       	sbiw	r24, 0x01	; 1
 8a8:	f1 f7       	brne	.-4      	; 0x8a6 <zeroSensor+0x66>
 8aa:	00 c0       	rjmp	.+0      	; 0x8ac <zeroSensor+0x6c>
 8ac:	00 00       	nop
	

	_delay_us(50);
	dummy_read = spiIMU_write_read(WRITE_COMMAND);
 8ae:	81 e0       	ldi	r24, 0x01	; 1
 8b0:	90 e0       	ldi	r25, 0x00	; 0
 8b2:	21 d1       	rcall	.+578    	; 0xaf6 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(SET_MAG_REF);
 8b4:	80 eb       	ldi	r24, 0xB0	; 176
 8b6:	90 e0       	ldi	r25, 0x00	; 0
 8b8:	1e d1       	rcall	.+572    	; 0xaf6 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(DUMMY_READ);
 8ba:	80 e0       	ldi	r24, 0x00	; 0
 8bc:	90 e0       	ldi	r25, 0x00	; 0
 8be:	1b d1       	rcall	.+566    	; 0xaf6 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(DUMMY_READ);
 8c0:	80 e0       	ldi	r24, 0x00	; 0
 8c2:	90 e0       	ldi	r25, 0x00	; 0
 8c4:	18 d1       	rcall	.+560    	; 0xaf6 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(DUMMY_READ);
 8c6:	80 e0       	ldi	r24, 0x00	; 0
 8c8:	90 e0       	ldi	r25, 0x00	; 0
 8ca:	15 d1       	rcall	.+554    	; 0xaf6 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(DUMMY_READ);
 8cc:	80 e0       	ldi	r24, 0x00	; 0
 8ce:	90 e0       	ldi	r25, 0x00	; 0
 8d0:	12 d1       	rcall	.+548    	; 0xaf6 <spiIMU_write_read>
 8d2:	8f e8       	ldi	r24, 0x8F	; 143
 8d4:	91 e0       	ldi	r25, 0x01	; 1
 8d6:	01 97       	sbiw	r24, 0x01	; 1
 8d8:	f1 f7       	brne	.-4      	; 0x8d6 <zeroSensor+0x96>
 8da:	00 c0       	rjmp	.+0      	; 0x8dc <zeroSensor+0x9c>
 8dc:	00 00       	nop
	
	_delay_us(50);
	dummy_read = spiIMU_write_read(WRITE_COMMAND);
 8de:	81 e0       	ldi	r24, 0x01	; 1
 8e0:	90 e0       	ldi	r25, 0x00	; 0
 8e2:	09 d1       	rcall	.+530    	; 0xaf6 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(UM6_RESET_EKF);
 8e4:	8d ea       	ldi	r24, 0xAD	; 173
 8e6:	90 e0       	ldi	r25, 0x00	; 0
 8e8:	06 d1       	rcall	.+524    	; 0xaf6 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(DUMMY_READ);
 8ea:	80 e0       	ldi	r24, 0x00	; 0
 8ec:	90 e0       	ldi	r25, 0x00	; 0
 8ee:	03 d1       	rcall	.+518    	; 0xaf6 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(DUMMY_READ);
 8f0:	80 e0       	ldi	r24, 0x00	; 0
 8f2:	90 e0       	ldi	r25, 0x00	; 0
 8f4:	00 d1       	rcall	.+512    	; 0xaf6 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(DUMMY_READ);
 8f6:	80 e0       	ldi	r24, 0x00	; 0
 8f8:	90 e0       	ldi	r25, 0x00	; 0
 8fa:	fd d0       	rcall	.+506    	; 0xaf6 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(DUMMY_READ);
 8fc:	80 e0       	ldi	r24, 0x00	; 0
 8fe:	90 e0       	ldi	r25, 0x00	; 0
 900:	fa d0       	rcall	.+500    	; 0xaf6 <spiIMU_write_read>
	

	PORTF.OUTSET = PIN4_bm;
 902:	1d 83       	std	Y+5, r17	; 0x05
	
	return 1;
	
}
 904:	81 e0       	ldi	r24, 0x01	; 1
 906:	df 91       	pop	r29
 908:	cf 91       	pop	r28
 90a:	1f 91       	pop	r17
 90c:	08 95       	ret

0000090e <initSystem>:
  INPUT:
  OUTPUT:
  DISCRIPTION:  Do all the pre control loop set up tasks
*********************************************************************************************************** */
uint8_t initSystem()
{
 90e:	cf 93       	push	r28
 910:	df 93       	push	r29
	PORTA.DIRSET = 0xFF;			//  LEDS
 912:	c0 e0       	ldi	r28, 0x00	; 0
 914:	d6 e0       	ldi	r29, 0x06	; 6
 916:	8f ef       	ldi	r24, 0xFF	; 255
 918:	89 83       	std	Y+1, r24	; 0x01
	sei();
 91a:	78 94       	sei
	initUART();
 91c:	62 d1       	rcall	.+708    	; 0xbe2 <initUART>
	spi_set_up();
 91e:	f8 d0       	rcall	.+496    	; 0xb10 <spi_set_up>
	intPID_gains();
 920:	bd dd       	rcall	.-1158   	; 0x49c <intPID_gains>
	zeroSensor();
 922:	8e df       	rcall	.-228    	; 0x840 <zeroSensor>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 924:	2f ef       	ldi	r18, 0xFF	; 255
 926:	8f e4       	ldi	r24, 0x4F	; 79
 928:	93 ec       	ldi	r25, 0xC3	; 195
 92a:	21 50       	subi	r18, 0x01	; 1
 92c:	80 40       	sbci	r24, 0x00	; 0
 92e:	90 40       	sbci	r25, 0x00	; 0
 930:	e1 f7       	brne	.-8      	; 0x92a <initSystem+0x1c>
 932:	00 c0       	rjmp	.+0      	; 0x934 <initSystem+0x26>
 934:	00 00       	nop
	_delay_ms(2000);
	zeroSensor();
 936:	84 df       	rcall	.-248    	; 0x840 <zeroSensor>
	PORTA.DIRSET = 0x00;			//  LEDS
 938:	19 82       	std	Y+1, r1	; 0x01
	return 1;

}
 93a:	81 e0       	ldi	r24, 0x01	; 1
 93c:	df 91       	pop	r29
 93e:	cf 91       	pop	r28
 940:	08 95       	ret

00000942 <main>:
OUTPUT:
DISCRIPTION: Main is used for set up and then just an infinite loop
*********************************************************************************************************** */
int main()
{
		PORTA.OUTTGL = 0x0F;
 942:	8f e0       	ldi	r24, 0x0F	; 15
 944:	e0 e0       	ldi	r30, 0x00	; 0
 946:	f6 e0       	ldi	r31, 0x06	; 6
 948:	87 83       	std	Z+7, r24	; 0x07
		systemState = SYSTEM_STATE_STARTUP;
 94a:	10 92 02 20 	sts	0x2002, r1
		init32MHzClock();
 94e:	59 df       	rcall	.-334    	; 0x802 <init32MHzClock>
		intiLoopTimer();
 950:	66 df       	rcall	.-308    	; 0x81e <intiLoopTimer>
		initSystem();
 952:	dd df       	rcall	.-70     	; 0x90e <initSystem>

		while(1)
		{
			nop();
 954:	00 00       	nop
 956:	fe cf       	rjmp	.-4      	; 0x954 <main+0x12>

00000958 <State>:
INPUT:
OUTPUT:
DISCRIPTION:   Determine what to do based on systemState.  Used to initializes and arm the quad.
*********************************************************************************************************** */
void State()
{
 958:	1f 93       	push	r17
 95a:	cf 93       	push	r28
 95c:	df 93       	push	r29
	
	//sendUM6_Data();
	switch(systemState)
 95e:	80 91 02 20 	lds	r24, 0x2002
 962:	82 30       	cpi	r24, 0x02	; 2
 964:	69 f1       	breq	.+90     	; 0x9c0 <State+0x68>
 966:	30 f4       	brcc	.+12     	; 0x974 <State+0x1c>
 968:	88 23       	and	r24, r24
 96a:	59 f0       	breq	.+22     	; 0x982 <State+0x2a>
 96c:	81 30       	cpi	r24, 0x01	; 1
 96e:	09 f0       	breq	.+2      	; 0x972 <State+0x1a>
 970:	7b c0       	rjmp	.+246    	; 0xa68 <State+0x110>
 972:	15 c0       	rjmp	.+42     	; 0x99e <State+0x46>
 974:	84 30       	cpi	r24, 0x04	; 4
 976:	09 f4       	brne	.+2      	; 0x97a <State+0x22>
 978:	41 c0       	rjmp	.+130    	; 0x9fc <State+0xa4>
 97a:	85 30       	cpi	r24, 0x05	; 5
 97c:	09 f0       	breq	.+2      	; 0x980 <State+0x28>
 97e:	74 c0       	rjmp	.+232    	; 0xa68 <State+0x110>
 980:	44 c0       	rjmp	.+136    	; 0xa0a <State+0xb2>
	{
		case SYSTEM_STATE_STARTUP:
			PORTA.OUTTGL = 0x00;
 982:	e0 e0       	ldi	r30, 0x00	; 0
 984:	f6 e0       	ldi	r31, 0x06	; 6
 986:	17 82       	std	Z+7, r1	; 0x07
			PORTA.OUTTGL = PIN2_bm;
 988:	84 e0       	ldi	r24, 0x04	; 4
 98a:	87 83       	std	Z+7, r24	; 0x07
			if (initSystem() ==  1)
 98c:	c0 df       	rcall	.-128    	; 0x90e <initSystem>
 98e:	81 30       	cpi	r24, 0x01	; 1
 990:	11 f4       	brne	.+4      	; 0x996 <State+0x3e>
			{
				systemState = SYSTEM_ZERO;
 992:	80 93 02 20 	sts	0x2002, r24
			}
			PORTA.OUTSET = 0x00;
 996:	e0 e0       	ldi	r30, 0x00	; 0
 998:	f6 e0       	ldi	r31, 0x06	; 6
 99a:	15 82       	std	Z+5, r1	; 0x05
			break;
 99c:	65 c0       	rjmp	.+202    	; 0xa68 <State+0x110>
		
		case SYSTEM_ZERO:
			// read commands from the PC and zero the system as necessary
			// PC transaction, read in command and send out sensor data
			UpdateEulerAngles();
 99e:	9d de       	rcall	.-710    	; 0x6da <UpdateEulerAngles>
		
			PORTA.OUTTGL = PIN3_bm;
 9a0:	88 e0       	ldi	r24, 0x08	; 8
 9a2:	e0 e0       	ldi	r30, 0x00	; 0
 9a4:	f6 e0       	ldi	r31, 0x06	; 6
 9a6:	87 83       	std	Z+7, r24	; 0x07
			//  get the last command sent form the PC, either zero the IMU or get ready to arm the system
			if (WriteToPC_SPI() == SYSTEM_ZERO)
 9a8:	a6 dd       	rcall	.-1204   	; 0x4f6 <WriteToPC_SPI>
 9aa:	01 97       	sbiw	r24, 0x01	; 1
 9ac:	09 f4       	brne	.+2      	; 0x9b0 <State+0x58>
			{
				zeroSensor();
 9ae:	48 df       	rcall	.-368    	; 0x840 <zeroSensor>
			}
			
			if (WriteToPC_SPI() == SYSTEM_ARM)
 9b0:	a2 dd       	rcall	.-1212   	; 0x4f6 <WriteToPC_SPI>
 9b2:	02 97       	sbiw	r24, 0x02	; 2
 9b4:	09 f0       	breq	.+2      	; 0x9b8 <State+0x60>
 9b6:	58 c0       	rjmp	.+176    	; 0xa68 <State+0x110>
			{
				systemState = SYSTEM_ARM;
 9b8:	82 e0       	ldi	r24, 0x02	; 2
 9ba:	80 93 02 20 	sts	0x2002, r24
 9be:	54 c0       	rjmp	.+168    	; 0xa68 <State+0x110>
		
			break;
		
		case SYSTEM_ARM:
			//Arm the system by enabling the PWM
			PORTA.OUTTGL = 0x00;
 9c0:	c0 e0       	ldi	r28, 0x00	; 0
 9c2:	d6 e0       	ldi	r29, 0x06	; 6
 9c4:	1f 82       	std	Y+7, r1	; 0x07
			PORTA.OUTTGL = PIN2_bm;
 9c6:	14 e0       	ldi	r17, 0x04	; 4
 9c8:	1f 83       	std	Y+7, r17	; 0x07
			initPWM();
 9ca:	f3 dc       	rcall	.-1562   	; 0x3b2 <initPWM>
			systemState = SYSTEM_STATE_FLY;
 9cc:	10 93 02 20 	sts	0x2002, r17
			PORTA.OUTTGL = PIN2_bm;
 9d0:	1f 83       	std	Y+7, r17	; 0x07
 9d2:	2f ef       	ldi	r18, 0xFF	; 255
 9d4:	37 ea       	ldi	r19, 0xA7	; 167
 9d6:	81 e6       	ldi	r24, 0x61	; 97
 9d8:	21 50       	subi	r18, 0x01	; 1
 9da:	30 40       	sbci	r19, 0x00	; 0
 9dc:	80 40       	sbci	r24, 0x00	; 0
 9de:	e1 f7       	brne	.-8      	; 0x9d8 <State+0x80>
 9e0:	00 c0       	rjmp	.+0      	; 0x9e2 <State+0x8a>
 9e2:	00 00       	nop
			_delay_ms(1000);
			PORTA.OUTTGL = PIN2_bm;
 9e4:	1f 83       	std	Y+7, r17	; 0x07
 9e6:	9f ef       	ldi	r25, 0xFF	; 255
 9e8:	27 ea       	ldi	r18, 0xA7	; 167
 9ea:	31 e6       	ldi	r19, 0x61	; 97
 9ec:	91 50       	subi	r25, 0x01	; 1
 9ee:	20 40       	sbci	r18, 0x00	; 0
 9f0:	30 40       	sbci	r19, 0x00	; 0
 9f2:	e1 f7       	brne	.-8      	; 0x9ec <State+0x94>
 9f4:	00 c0       	rjmp	.+0      	; 0x9f6 <State+0x9e>
 9f6:	00 00       	nop
			_delay_ms(1000);
			PORTA.OUTTGL = PIN2_bm;
 9f8:	1f 83       	std	Y+7, r17	; 0x07
			break;
 9fa:	36 c0       	rjmp	.+108    	; 0xa68 <State+0x110>
		
		case SYSTEM_STATE_FLY:
			// run the control loop
			PORTA.OUTCLR = 0x00;
 9fc:	e0 e0       	ldi	r30, 0x00	; 0
 9fe:	f6 e0       	ldi	r31, 0x06	; 6
 a00:	16 82       	std	Z+6, r1	; 0x06
			PORTA.OUTTGL = PIN3_bm;
 a02:	88 e0       	ldi	r24, 0x08	; 8
 a04:	87 83       	std	Z+7, r24	; 0x07
			ControlLoop();
 a06:	e3 de       	rcall	.-570    	; 0x7ce <ControlLoop>
			break;
 a08:	2f c0       	rjmp	.+94     	; 0xa68 <State+0x110>
			
			case SYSTEM_DISARM:
			
			DisablePWM();
 a0a:	fd dc       	rcall	.-1542   	; 0x406 <DisablePWM>
			PORTA.OUTTGL = PIN2_bm;
 a0c:	e0 e0       	ldi	r30, 0x00	; 0
 a0e:	f6 e0       	ldi	r31, 0x06	; 6
 a10:	84 e0       	ldi	r24, 0x04	; 4
 a12:	87 83       	std	Z+7, r24	; 0x07
 a14:	9f ef       	ldi	r25, 0xFF	; 255
 a16:	27 ea       	ldi	r18, 0xA7	; 167
 a18:	31 e6       	ldi	r19, 0x61	; 97
 a1a:	91 50       	subi	r25, 0x01	; 1
 a1c:	20 40       	sbci	r18, 0x00	; 0
 a1e:	30 40       	sbci	r19, 0x00	; 0
 a20:	e1 f7       	brne	.-8      	; 0xa1a <State+0xc2>
 a22:	00 c0       	rjmp	.+0      	; 0xa24 <State+0xcc>
 a24:	00 00       	nop
			_delay_ms(1000);
			PORTA.OUTTGL = PIN2_bm;
 a26:	87 83       	std	Z+7, r24	; 0x07
 a28:	9f ef       	ldi	r25, 0xFF	; 255
 a2a:	27 ea       	ldi	r18, 0xA7	; 167
 a2c:	31 e6       	ldi	r19, 0x61	; 97
 a2e:	91 50       	subi	r25, 0x01	; 1
 a30:	20 40       	sbci	r18, 0x00	; 0
 a32:	30 40       	sbci	r19, 0x00	; 0
 a34:	e1 f7       	brne	.-8      	; 0xa2e <State+0xd6>
 a36:	00 c0       	rjmp	.+0      	; 0xa38 <State+0xe0>
 a38:	00 00       	nop
			_delay_ms(1000);
			PORTA.OUTTGL = PIN2_bm;
 a3a:	87 83       	std	Z+7, r24	; 0x07
 a3c:	9f ef       	ldi	r25, 0xFF	; 255
 a3e:	27 ea       	ldi	r18, 0xA7	; 167
 a40:	31 e6       	ldi	r19, 0x61	; 97
 a42:	91 50       	subi	r25, 0x01	; 1
 a44:	20 40       	sbci	r18, 0x00	; 0
 a46:	30 40       	sbci	r19, 0x00	; 0
 a48:	e1 f7       	brne	.-8      	; 0xa42 <State+0xea>
 a4a:	00 c0       	rjmp	.+0      	; 0xa4c <State+0xf4>
 a4c:	00 00       	nop
			_delay_ms(1000);
			PORTA.OUTTGL = PIN2_bm;
 a4e:	87 83       	std	Z+7, r24	; 0x07
 a50:	9f ef       	ldi	r25, 0xFF	; 255
 a52:	27 ea       	ldi	r18, 0xA7	; 167
 a54:	31 e6       	ldi	r19, 0x61	; 97
 a56:	91 50       	subi	r25, 0x01	; 1
 a58:	20 40       	sbci	r18, 0x00	; 0
 a5a:	30 40       	sbci	r19, 0x00	; 0
 a5c:	e1 f7       	brne	.-8      	; 0xa56 <State+0xfe>
 a5e:	00 c0       	rjmp	.+0      	; 0xa60 <State+0x108>
 a60:	00 00       	nop
			_delay_ms(1000);
			PORTA.OUTTGL = PIN2_bm;
 a62:	87 83       	std	Z+7, r24	; 0x07
			systemState = SYSTEM_STATE_STARTUP;
 a64:	10 92 02 20 	sts	0x2002, r1
		
		default:
			break;
		
	}			// end case
}
 a68:	df 91       	pop	r29
 a6a:	cf 91       	pop	r28
 a6c:	1f 91       	pop	r17
 a6e:	08 95       	ret

00000a70 <__vector_77>:
  INPUT:
  OUTPUT:
  DISCRIPTION:   Interrupt vector
*********************************************************************************************************** */
ISR(TCD0_OVF_vect)
{
 a70:	1f 92       	push	r1
 a72:	0f 92       	push	r0
 a74:	0f b6       	in	r0, 0x3f	; 63
 a76:	0f 92       	push	r0
 a78:	11 24       	eor	r1, r1
 a7a:	08 b6       	in	r0, 0x38	; 56
 a7c:	0f 92       	push	r0
 a7e:	18 be       	out	0x38, r1	; 56
 a80:	09 b6       	in	r0, 0x39	; 57
 a82:	0f 92       	push	r0
 a84:	19 be       	out	0x39, r1	; 57
 a86:	0b b6       	in	r0, 0x3b	; 59
 a88:	0f 92       	push	r0
 a8a:	1b be       	out	0x3b, r1	; 59
 a8c:	2f 93       	push	r18
 a8e:	3f 93       	push	r19
 a90:	4f 93       	push	r20
 a92:	5f 93       	push	r21
 a94:	6f 93       	push	r22
 a96:	7f 93       	push	r23
 a98:	8f 93       	push	r24
 a9a:	9f 93       	push	r25
 a9c:	af 93       	push	r26
 a9e:	bf 93       	push	r27
 aa0:	ef 93       	push	r30
 aa2:	ff 93       	push	r31
	
	//ControlLoop();
	 State();
 aa4:	59 df       	rcall	.-334    	; 0x958 <State>
	TCD0.CNT = 0;
 aa6:	e0 e0       	ldi	r30, 0x00	; 0
 aa8:	f9 e0       	ldi	r31, 0x09	; 9
 aaa:	10 a2       	std	Z+32, r1	; 0x20
 aac:	11 a2       	std	Z+33, r1	; 0x21
	
}
 aae:	ff 91       	pop	r31
 ab0:	ef 91       	pop	r30
 ab2:	bf 91       	pop	r27
 ab4:	af 91       	pop	r26
 ab6:	9f 91       	pop	r25
 ab8:	8f 91       	pop	r24
 aba:	7f 91       	pop	r23
 abc:	6f 91       	pop	r22
 abe:	5f 91       	pop	r21
 ac0:	4f 91       	pop	r20
 ac2:	3f 91       	pop	r19
 ac4:	2f 91       	pop	r18
 ac6:	0f 90       	pop	r0
 ac8:	0b be       	out	0x3b, r0	; 59
 aca:	0f 90       	pop	r0
 acc:	09 be       	out	0x39, r0	; 57
 ace:	0f 90       	pop	r0
 ad0:	08 be       	out	0x38, r0	; 56
 ad2:	0f 90       	pop	r0
 ad4:	0f be       	out	0x3f, r0	; 63
 ad6:	0f 90       	pop	r0
 ad8:	1f 90       	pop	r1
 ada:	18 95       	reti

00000adc <spiPC_write_read>:
			  Read the data from the data register, this was on MISO
*********************************************************************************************************** */

unsigned char spiPC_write_read(unsigned char spi_data1)
{
	SPIE.DATA = spi_data1;
 adc:	e0 ec       	ldi	r30, 0xC0	; 192
 ade:	fa e0       	ldi	r31, 0x0A	; 10
 ae0:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIE.STATUS & SPI_IF_bm)); // Wait until the data transfer is complete
 ae2:	82 81       	ldd	r24, Z+2	; 0x02
 ae4:	88 23       	and	r24, r24
 ae6:	ec f7       	brge	.-6      	; 0xae2 <spiPC_write_read+0x6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 ae8:	80 e4       	ldi	r24, 0x40	; 64
 aea:	8a 95       	dec	r24
 aec:	f1 f7       	brne	.-4      	; 0xaea <spiPC_write_read+0xe>
	_delay_us(6);
	return SPIE.DATA;
 aee:	e0 ec       	ldi	r30, 0xC0	; 192
 af0:	fa e0       	ldi	r31, 0x0A	; 10
 af2:	83 81       	ldd	r24, Z+3	; 0x03
}
 af4:	08 95       	ret

00000af6 <spiIMU_write_read>:
			  Wait until the interrupt flag is set	
			  Read the data from the data register, this was on MISO
*********************************************************************************************************** */
unsigned char spiIMU_write_read(unsigned char spi_data)
{
	SPIF.DATA = spi_data;
 af6:	e0 ec       	ldi	r30, 0xC0	; 192
 af8:	fb e0       	ldi	r31, 0x0B	; 11
 afa:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIF.STATUS & SPI_IF_bm)); // Wait until the data transfer is complete
 afc:	82 81       	ldd	r24, Z+2	; 0x02
 afe:	88 23       	and	r24, r24
 b00:	ec f7       	brge	.-6      	; 0xafc <spiIMU_write_read+0x6>
 b02:	80 e2       	ldi	r24, 0x20	; 32
 b04:	8a 95       	dec	r24
 b06:	f1 f7       	brne	.-4      	; 0xb04 <spiIMU_write_read+0xe>
	_delay_us(3);
	return SPIF.DATA;
 b08:	e0 ec       	ldi	r30, 0xC0	; 192
 b0a:	fb e0       	ldi	r31, 0x0B	; 11
 b0c:	83 81       	ldd	r24, Z+3	; 0x03
}
 b0e:	08 95       	ret

00000b10 <spi_set_up>:
DISCRIPTION:    Initialize SPI master on port F for the IMU communication.
			    Initialize SPI master on port F for the PC communication
*********************************************************************************************************** */
	
void spi_set_up()
{
 b10:	af 92       	push	r10
 b12:	cf 92       	push	r12
 b14:	ef 92       	push	r14
 b16:	0f 93       	push	r16
 b18:	cf 93       	push	r28
 b1a:	df 93       	push	r29
	/* Initialize SPI master on port F for the IMU communication. */
	/* Init SS pin as output with wired AND and pull-up. */
	//*************************************************************
	PORTF.DIRSET = PIN4_bm;
 b1c:	e0 ea       	ldi	r30, 0xA0	; 160
 b1e:	f6 e0       	ldi	r31, 0x06	; 6
 b20:	c0 e1       	ldi	r28, 0x10	; 16
 b22:	c1 83       	std	Z+1, r28	; 0x01
	PORTF.PIN4CTRL = PORT_OPC_WIREDANDPULL_gc;
 b24:	d8 e3       	ldi	r29, 0x38	; 56
 b26:	d4 8b       	std	Z+20, r29	; 0x14

	/* Set SS output to high. (No slave addressed). */
	PORTF.OUTSET = PIN4_bm;
 b28:	c5 83       	std	Z+5, r28	; 0x05

	/* Initialize SPI master on port F for the IMU communication. */
	SPI_MasterInit(&spiMasterF,
 b2a:	0f 2e       	mov	r0, r31
 b2c:	f3 e0       	ldi	r31, 0x03	; 3
 b2e:	af 2e       	mov	r10, r31
 b30:	f0 2d       	mov	r31, r0
 b32:	c1 2c       	mov	r12, r1
 b34:	e1 2c       	mov	r14, r1
 b36:	00 e0       	ldi	r16, 0x00	; 0
 b38:	20 e0       	ldi	r18, 0x00	; 0
 b3a:	40 ea       	ldi	r20, 0xA0	; 160
 b3c:	56 e0       	ldi	r21, 0x06	; 6
 b3e:	60 ec       	ldi	r22, 0xC0	; 192
 b40:	7b e0       	ldi	r23, 0x0B	; 11
 b42:	88 e3       	ldi	r24, 0x38	; 56
 b44:	91 e2       	ldi	r25, 0x21	; 33
 b46:	1d d0       	rcall	.+58     	; 0xb82 <SPI_MasterInit>
		SPI_MODE_0_gc,							//The UM6 SPI clock (SCK) is active high, with data clocked in on the first rising edge1
		SPI_INTLVL_OFF_gc,
		false,									// false to double clock mode
		SPI_PRESCALER_DIV128_gc);					//32mHz /128 = 250kHz  MAX rate is 400kHz but there is not prescaler

		SPIF.DATA = 0x00;						// init SPI data register
 b48:	e0 ec       	ldi	r30, 0xC0	; 192
 b4a:	fb e0       	ldi	r31, 0x0B	; 11
 b4c:	13 82       	std	Z+3, r1	; 0x03
		
		
		/* Initialize SPI master on port F for the PC communication */
		//*************************************************************
		/* Init SS pin as output with wired AND and pull-up. */
		PORTE.DIRSET = PIN4_bm;
 b4e:	e0 e8       	ldi	r30, 0x80	; 128
 b50:	f6 e0       	ldi	r31, 0x06	; 6
 b52:	c1 83       	std	Z+1, r28	; 0x01
		PORTE.PIN4CTRL = PORT_OPC_WIREDANDPULL_gc;
 b54:	d4 8b       	std	Z+20, r29	; 0x14

		/* Set SS output to high. (No slave addressed). */
		PORTE.OUTSET = PIN4_bm;
 b56:	c5 83       	std	Z+5, r28	; 0x05

		SPI_MasterInit(&spiMasterE,
 b58:	68 94       	set
 b5a:	aa 24       	eor	r10, r10
 b5c:	a1 f8       	bld	r10, 1
 b5e:	20 e0       	ldi	r18, 0x00	; 0
 b60:	40 e8       	ldi	r20, 0x80	; 128
 b62:	56 e0       	ldi	r21, 0x06	; 6
 b64:	60 ec       	ldi	r22, 0xC0	; 192
 b66:	7a e0       	ldi	r23, 0x0A	; 10
 b68:	8f e3       	ldi	r24, 0x3F	; 63
 b6a:	91 e2       	ldi	r25, 0x21	; 33
 b6c:	0a d0       	rcall	.+20     	; 0xb82 <SPI_MasterInit>
		false,
		SPI_MODE_0_gc,							//The UM6 SPI clock (SCK) is active high, with data clocked in on the first rising edge1
		SPI_INTLVL_OFF_gc,
		false,									// false to double clock mode
		SPI_PRESCALER_DIV64_gc);				//32mHz /64 = 500,000 bps
		SPIE.DATA = 0x00;						// init SPI data register
 b6e:	e0 ec       	ldi	r30, 0xC0	; 192
 b70:	fa e0       	ldi	r31, 0x0A	; 10
 b72:	13 82       	std	Z+3, r1	; 0x03

}
 b74:	df 91       	pop	r29
 b76:	cf 91       	pop	r28
 b78:	0f 91       	pop	r16
 b7a:	ef 90       	pop	r14
 b7c:	cf 90       	pop	r12
 b7e:	af 90       	pop	r10
 b80:	08 95       	ret

00000b82 <SPI_MasterInit>:
                    bool lsbFirst,
                    SPI_MODE_t mode,
                    SPI_INTLVL_t intLevel,
                    bool clk2x,
                    SPI_PRESCALER_t clockDivision)
{
 b82:	af 92       	push	r10
 b84:	cf 92       	push	r12
 b86:	ef 92       	push	r14
 b88:	0f 93       	push	r16
 b8a:	fc 01       	movw	r30, r24
	spi->module         = module;
 b8c:	60 83       	st	Z, r22
 b8e:	71 83       	std	Z+1, r23	; 0x01
	spi->port           = port;
 b90:	42 83       	std	Z+2, r20	; 0x02
 b92:	53 83       	std	Z+3, r21	; 0x03
	spi->interrupted    = false;
 b94:	14 82       	std	Z+4, r1	; 0x04

	spi->module->CTRL   = clockDivision |                  /* SPI prescaler. */
 b96:	cc 20       	and	r12, r12
 b98:	11 f0       	breq	.+4      	; 0xb9e <SPI_MasterInit+0x1c>
 b9a:	90 e8       	ldi	r25, 0x80	; 128
 b9c:	01 c0       	rjmp	.+2      	; 0xba0 <SPI_MasterInit+0x1e>
 b9e:	90 e0       	ldi	r25, 0x00	; 0
 ba0:	22 23       	and	r18, r18
 ba2:	11 f0       	breq	.+4      	; 0xba8 <SPI_MasterInit+0x26>
 ba4:	80 e2       	ldi	r24, 0x20	; 32
 ba6:	01 c0       	rjmp	.+2      	; 0xbaa <SPI_MasterInit+0x28>
 ba8:	80 e0       	ldi	r24, 0x00	; 0
 baa:	00 65       	ori	r16, 0x50	; 80
 bac:	0a 29       	or	r16, r10
 bae:	09 2b       	or	r16, r25
 bb0:	08 2b       	or	r16, r24
 bb2:	db 01       	movw	r26, r22
 bb4:	0c 93       	st	X, r16
	                      (lsbFirst ? SPI_DORD_bm  : 0) |  /* Data order. */
	                      SPI_MASTER_bm |                  /* SPI master. */
	                      mode;                            /* SPI mode. */

	/* Interrupt level. */
	spi->module->INTCTRL = intLevel;
 bb6:	a0 81       	ld	r26, Z
 bb8:	b1 81       	ldd	r27, Z+1	; 0x01
 bba:	11 96       	adiw	r26, 0x01	; 1
 bbc:	ec 92       	st	X, r14

	/* No assigned data packet. */
	spi->dataPacket = NULL;
 bbe:	15 82       	std	Z+5, r1	; 0x05
 bc0:	16 82       	std	Z+6, r1	; 0x06

 	/* MOSI and SCK as output. */
	spi->port->DIRSET  = SPI_MOSI_bm | SPI_SCK_bm;
 bc2:	02 80       	ldd	r0, Z+2	; 0x02
 bc4:	f3 81       	ldd	r31, Z+3	; 0x03
 bc6:	e0 2d       	mov	r30, r0
 bc8:	80 ea       	ldi	r24, 0xA0	; 160
 bca:	81 83       	std	Z+1, r24	; 0x01
}
 bcc:	0f 91       	pop	r16
 bce:	ef 90       	pop	r14
 bd0:	cf 90       	pop	r12
 bd2:	af 90       	pop	r10
 bd4:	08 95       	ret

00000bd6 <TC0_ConfigClockSource>:
 *  \param tc              Timer/Counter module instance.
 *  \param clockSelection  Timer/Counter clock source setting.
 */
void TC0_ConfigClockSource( volatile TC0_t * tc, TC_CLKSEL_t clockSelection )
{
	tc->CTRLA = ( tc->CTRLA & ~TC0_CLKSEL_gm ) | clockSelection;
 bd6:	fc 01       	movw	r30, r24
 bd8:	20 81       	ld	r18, Z
 bda:	20 7f       	andi	r18, 0xF0	; 240
 bdc:	62 2b       	or	r22, r18
 bde:	60 83       	st	Z, r22
 be0:	08 95       	ret

00000be2 <initUART>:
void initUART()
{
	
	//  XBEE on USARTD1
	/* PD6 (RXD1) input*/
	PORTD.DIRCLR = PIN6_bm;
 be2:	e0 e6       	ldi	r30, 0x60	; 96
 be4:	f6 e0       	ldi	r31, 0x06	; 6
 be6:	90 e4       	ldi	r25, 0x40	; 64
 be8:	92 83       	std	Z+2, r25	; 0x02
	/* PD7 (TXD1) as output. */
	PORTD.DIRSET = PIN7_bm;
 bea:	80 e8       	ldi	r24, 0x80	; 128
 bec:	81 83       	std	Z+1, r24	; 0x01
	
	
	//  IMU on USARTC1
	/* PC6 (RXD1) input*/
	PORTC.DIRCLR = PIN6_bm;
 bee:	e0 e4       	ldi	r30, 0x40	; 64
 bf0:	f6 e0       	ldi	r31, 0x06	; 6
 bf2:	92 83       	std	Z+2, r25	; 0x02
	/* PD7 (TXD1) as output. */
	PORTC.DIRSET = PIN7_bm;
 bf4:	81 83       	std	Z+1, r24	; 0x01
	
	USART_Format_Set(&XBEE_USART, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, true);
 bf6:	e0 eb       	ldi	r30, 0xB0	; 176
 bf8:	f9 e0       	ldi	r31, 0x09	; 9
 bfa:	8b e0       	ldi	r24, 0x0B	; 11
 bfc:	85 83       	std	Z+5, r24	; 0x05
	USART_Baudrate_Set(&XBEE_USART, 1047 , -6);			// set for 32MHZ and 115200
 bfe:	87 e1       	ldi	r24, 0x17	; 23
 c00:	86 83       	std	Z+6, r24	; 0x06
 c02:	84 ea       	ldi	r24, 0xA4	; 164
 c04:	87 83       	std	Z+7, r24	; 0x07
	/* Enable both RX and TX. */
	USART_Rx_Enable(&XBEE_USART);
 c06:	84 81       	ldd	r24, Z+4	; 0x04
 c08:	80 61       	ori	r24, 0x10	; 16
 c0a:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(&XBEE_USART);
 c0c:	84 81       	ldd	r24, Z+4	; 0x04
 c0e:	88 60       	ori	r24, 0x08	; 8
 c10:	84 83       	std	Z+4, r24	; 0x04
 c12:	08 95       	ret

00000c14 <__divmodhi4>:
 c14:	97 fb       	bst	r25, 7
 c16:	07 2e       	mov	r0, r23
 c18:	16 f4       	brtc	.+4      	; 0xc1e <__divmodhi4+0xa>
 c1a:	00 94       	com	r0
 c1c:	06 d0       	rcall	.+12     	; 0xc2a <__divmodhi4_neg1>
 c1e:	77 fd       	sbrc	r23, 7
 c20:	08 d0       	rcall	.+16     	; 0xc32 <__divmodhi4_neg2>
 c22:	0b d0       	rcall	.+22     	; 0xc3a <__udivmodhi4>
 c24:	07 fc       	sbrc	r0, 7
 c26:	05 d0       	rcall	.+10     	; 0xc32 <__divmodhi4_neg2>
 c28:	3e f4       	brtc	.+14     	; 0xc38 <__divmodhi4_exit>

00000c2a <__divmodhi4_neg1>:
 c2a:	90 95       	com	r25
 c2c:	81 95       	neg	r24
 c2e:	9f 4f       	sbci	r25, 0xFF	; 255
 c30:	08 95       	ret

00000c32 <__divmodhi4_neg2>:
 c32:	70 95       	com	r23
 c34:	61 95       	neg	r22
 c36:	7f 4f       	sbci	r23, 0xFF	; 255

00000c38 <__divmodhi4_exit>:
 c38:	08 95       	ret

00000c3a <__udivmodhi4>:
 c3a:	aa 1b       	sub	r26, r26
 c3c:	bb 1b       	sub	r27, r27
 c3e:	51 e1       	ldi	r21, 0x11	; 17
 c40:	07 c0       	rjmp	.+14     	; 0xc50 <__udivmodhi4_ep>

00000c42 <__udivmodhi4_loop>:
 c42:	aa 1f       	adc	r26, r26
 c44:	bb 1f       	adc	r27, r27
 c46:	a6 17       	cp	r26, r22
 c48:	b7 07       	cpc	r27, r23
 c4a:	10 f0       	brcs	.+4      	; 0xc50 <__udivmodhi4_ep>
 c4c:	a6 1b       	sub	r26, r22
 c4e:	b7 0b       	sbc	r27, r23

00000c50 <__udivmodhi4_ep>:
 c50:	88 1f       	adc	r24, r24
 c52:	99 1f       	adc	r25, r25
 c54:	5a 95       	dec	r21
 c56:	a9 f7       	brne	.-22     	; 0xc42 <__udivmodhi4_loop>
 c58:	80 95       	com	r24
 c5a:	90 95       	com	r25
 c5c:	bc 01       	movw	r22, r24
 c5e:	cd 01       	movw	r24, r26
 c60:	08 95       	ret

00000c62 <_exit>:
 c62:	f8 94       	cli

00000c64 <__stop_program>:
 c64:	ff cf       	rjmp	.-2      	; 0xc64 <__stop_program>
