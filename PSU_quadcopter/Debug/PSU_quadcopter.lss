
PSU_quadcopter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c5c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00000c5c  00000cf0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000013c  00802000  00802000  00000cf0  2**0
                  ALLOC
  3 .stab         00000714  00000000  00000000  00000cf0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00001404  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000149b  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000002d0  00000000  00000000  000014ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004767  00000000  00000000  0000179a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000ced  00000000  00000000  00005f01  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001aed  00000000  00000000  00006bee  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000006e0  00000000  00000000  000086dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000019a3  00000000  00000000  00008dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001692  00000000  00000000  0000a75f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000260  00000000  00000000  0000bdf1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	f9 c0       	rjmp	.+498    	; 0x1f4 <__ctors_end>
   2:	00 00       	nop
   4:	1b c1       	rjmp	.+566    	; 0x23c <__bad_interrupt>
   6:	00 00       	nop
   8:	19 c1       	rjmp	.+562    	; 0x23c <__bad_interrupt>
   a:	00 00       	nop
   c:	17 c1       	rjmp	.+558    	; 0x23c <__bad_interrupt>
   e:	00 00       	nop
  10:	15 c1       	rjmp	.+554    	; 0x23c <__bad_interrupt>
  12:	00 00       	nop
  14:	13 c1       	rjmp	.+550    	; 0x23c <__bad_interrupt>
  16:	00 00       	nop
  18:	11 c1       	rjmp	.+546    	; 0x23c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	0f c1       	rjmp	.+542    	; 0x23c <__bad_interrupt>
  1e:	00 00       	nop
  20:	0d c1       	rjmp	.+538    	; 0x23c <__bad_interrupt>
  22:	00 00       	nop
  24:	0b c1       	rjmp	.+534    	; 0x23c <__bad_interrupt>
  26:	00 00       	nop
  28:	09 c1       	rjmp	.+530    	; 0x23c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	07 c1       	rjmp	.+526    	; 0x23c <__bad_interrupt>
  2e:	00 00       	nop
  30:	05 c1       	rjmp	.+522    	; 0x23c <__bad_interrupt>
  32:	00 00       	nop
  34:	03 c1       	rjmp	.+518    	; 0x23c <__bad_interrupt>
  36:	00 00       	nop
  38:	01 c1       	rjmp	.+514    	; 0x23c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	ff c0       	rjmp	.+510    	; 0x23c <__bad_interrupt>
  3e:	00 00       	nop
  40:	fd c0       	rjmp	.+506    	; 0x23c <__bad_interrupt>
  42:	00 00       	nop
  44:	fb c0       	rjmp	.+502    	; 0x23c <__bad_interrupt>
  46:	00 00       	nop
  48:	f9 c0       	rjmp	.+498    	; 0x23c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	f7 c0       	rjmp	.+494    	; 0x23c <__bad_interrupt>
  4e:	00 00       	nop
  50:	f5 c0       	rjmp	.+490    	; 0x23c <__bad_interrupt>
  52:	00 00       	nop
  54:	f3 c0       	rjmp	.+486    	; 0x23c <__bad_interrupt>
  56:	00 00       	nop
  58:	f1 c0       	rjmp	.+482    	; 0x23c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	ef c0       	rjmp	.+478    	; 0x23c <__bad_interrupt>
  5e:	00 00       	nop
  60:	ed c0       	rjmp	.+474    	; 0x23c <__bad_interrupt>
  62:	00 00       	nop
  64:	eb c0       	rjmp	.+470    	; 0x23c <__bad_interrupt>
  66:	00 00       	nop
  68:	e9 c0       	rjmp	.+466    	; 0x23c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	e7 c0       	rjmp	.+462    	; 0x23c <__bad_interrupt>
  6e:	00 00       	nop
  70:	e5 c0       	rjmp	.+458    	; 0x23c <__bad_interrupt>
  72:	00 00       	nop
  74:	e3 c0       	rjmp	.+454    	; 0x23c <__bad_interrupt>
  76:	00 00       	nop
  78:	e1 c0       	rjmp	.+450    	; 0x23c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	df c0       	rjmp	.+446    	; 0x23c <__bad_interrupt>
  7e:	00 00       	nop
  80:	dd c0       	rjmp	.+442    	; 0x23c <__bad_interrupt>
  82:	00 00       	nop
  84:	db c0       	rjmp	.+438    	; 0x23c <__bad_interrupt>
  86:	00 00       	nop
  88:	d9 c0       	rjmp	.+434    	; 0x23c <__bad_interrupt>
  8a:	00 00       	nop
  8c:	d7 c0       	rjmp	.+430    	; 0x23c <__bad_interrupt>
  8e:	00 00       	nop
  90:	d5 c0       	rjmp	.+426    	; 0x23c <__bad_interrupt>
  92:	00 00       	nop
  94:	d3 c0       	rjmp	.+422    	; 0x23c <__bad_interrupt>
  96:	00 00       	nop
  98:	d1 c0       	rjmp	.+418    	; 0x23c <__bad_interrupt>
  9a:	00 00       	nop
  9c:	cf c0       	rjmp	.+414    	; 0x23c <__bad_interrupt>
  9e:	00 00       	nop
  a0:	cd c0       	rjmp	.+410    	; 0x23c <__bad_interrupt>
  a2:	00 00       	nop
  a4:	cb c0       	rjmp	.+406    	; 0x23c <__bad_interrupt>
  a6:	00 00       	nop
  a8:	c9 c0       	rjmp	.+402    	; 0x23c <__bad_interrupt>
  aa:	00 00       	nop
  ac:	c7 c0       	rjmp	.+398    	; 0x23c <__bad_interrupt>
  ae:	00 00       	nop
  b0:	c5 c0       	rjmp	.+394    	; 0x23c <__bad_interrupt>
  b2:	00 00       	nop
  b4:	c3 c0       	rjmp	.+390    	; 0x23c <__bad_interrupt>
  b6:	00 00       	nop
  b8:	c1 c0       	rjmp	.+386    	; 0x23c <__bad_interrupt>
  ba:	00 00       	nop
  bc:	bf c0       	rjmp	.+382    	; 0x23c <__bad_interrupt>
  be:	00 00       	nop
  c0:	bd c0       	rjmp	.+378    	; 0x23c <__bad_interrupt>
  c2:	00 00       	nop
  c4:	bb c0       	rjmp	.+374    	; 0x23c <__bad_interrupt>
  c6:	00 00       	nop
  c8:	b9 c0       	rjmp	.+370    	; 0x23c <__bad_interrupt>
  ca:	00 00       	nop
  cc:	b7 c0       	rjmp	.+366    	; 0x23c <__bad_interrupt>
  ce:	00 00       	nop
  d0:	b5 c0       	rjmp	.+362    	; 0x23c <__bad_interrupt>
  d2:	00 00       	nop
  d4:	b3 c0       	rjmp	.+358    	; 0x23c <__bad_interrupt>
  d6:	00 00       	nop
  d8:	b1 c0       	rjmp	.+354    	; 0x23c <__bad_interrupt>
  da:	00 00       	nop
  dc:	af c0       	rjmp	.+350    	; 0x23c <__bad_interrupt>
  de:	00 00       	nop
  e0:	ad c0       	rjmp	.+346    	; 0x23c <__bad_interrupt>
  e2:	00 00       	nop
  e4:	ab c0       	rjmp	.+342    	; 0x23c <__bad_interrupt>
  e6:	00 00       	nop
  e8:	a9 c0       	rjmp	.+338    	; 0x23c <__bad_interrupt>
  ea:	00 00       	nop
  ec:	a7 c0       	rjmp	.+334    	; 0x23c <__bad_interrupt>
  ee:	00 00       	nop
  f0:	a5 c0       	rjmp	.+330    	; 0x23c <__bad_interrupt>
  f2:	00 00       	nop
  f4:	a3 c0       	rjmp	.+326    	; 0x23c <__bad_interrupt>
  f6:	00 00       	nop
  f8:	a1 c0       	rjmp	.+322    	; 0x23c <__bad_interrupt>
  fa:	00 00       	nop
  fc:	9f c0       	rjmp	.+318    	; 0x23c <__bad_interrupt>
  fe:	00 00       	nop
 100:	9d c0       	rjmp	.+314    	; 0x23c <__bad_interrupt>
 102:	00 00       	nop
 104:	9b c0       	rjmp	.+310    	; 0x23c <__bad_interrupt>
 106:	00 00       	nop
 108:	99 c0       	rjmp	.+306    	; 0x23c <__bad_interrupt>
 10a:	00 00       	nop
 10c:	97 c0       	rjmp	.+302    	; 0x23c <__bad_interrupt>
 10e:	00 00       	nop
 110:	95 c0       	rjmp	.+298    	; 0x23c <__bad_interrupt>
 112:	00 00       	nop
 114:	93 c0       	rjmp	.+294    	; 0x23c <__bad_interrupt>
 116:	00 00       	nop
 118:	91 c0       	rjmp	.+290    	; 0x23c <__bad_interrupt>
 11a:	00 00       	nop
 11c:	8f c0       	rjmp	.+286    	; 0x23c <__bad_interrupt>
 11e:	00 00       	nop
 120:	8d c0       	rjmp	.+282    	; 0x23c <__bad_interrupt>
 122:	00 00       	nop
 124:	8b c0       	rjmp	.+278    	; 0x23c <__bad_interrupt>
 126:	00 00       	nop
 128:	89 c0       	rjmp	.+274    	; 0x23c <__bad_interrupt>
 12a:	00 00       	nop
 12c:	87 c0       	rjmp	.+270    	; 0x23c <__bad_interrupt>
 12e:	00 00       	nop
 130:	85 c0       	rjmp	.+266    	; 0x23c <__bad_interrupt>
 132:	00 00       	nop
 134:	9b c4       	rjmp	.+2358   	; 0xa6c <__vector_77>
 136:	00 00       	nop
 138:	81 c0       	rjmp	.+258    	; 0x23c <__bad_interrupt>
 13a:	00 00       	nop
 13c:	7f c0       	rjmp	.+254    	; 0x23c <__bad_interrupt>
 13e:	00 00       	nop
 140:	7d c0       	rjmp	.+250    	; 0x23c <__bad_interrupt>
 142:	00 00       	nop
 144:	7b c0       	rjmp	.+246    	; 0x23c <__bad_interrupt>
 146:	00 00       	nop
 148:	79 c0       	rjmp	.+242    	; 0x23c <__bad_interrupt>
 14a:	00 00       	nop
 14c:	77 c0       	rjmp	.+238    	; 0x23c <__bad_interrupt>
 14e:	00 00       	nop
 150:	75 c0       	rjmp	.+234    	; 0x23c <__bad_interrupt>
 152:	00 00       	nop
 154:	73 c0       	rjmp	.+230    	; 0x23c <__bad_interrupt>
 156:	00 00       	nop
 158:	71 c0       	rjmp	.+226    	; 0x23c <__bad_interrupt>
 15a:	00 00       	nop
 15c:	6f c0       	rjmp	.+222    	; 0x23c <__bad_interrupt>
 15e:	00 00       	nop
 160:	6d c0       	rjmp	.+218    	; 0x23c <__bad_interrupt>
 162:	00 00       	nop
 164:	6b c0       	rjmp	.+214    	; 0x23c <__bad_interrupt>
 166:	00 00       	nop
 168:	69 c0       	rjmp	.+210    	; 0x23c <__bad_interrupt>
 16a:	00 00       	nop
 16c:	67 c0       	rjmp	.+206    	; 0x23c <__bad_interrupt>
 16e:	00 00       	nop
 170:	65 c0       	rjmp	.+202    	; 0x23c <__bad_interrupt>
 172:	00 00       	nop
 174:	63 c0       	rjmp	.+198    	; 0x23c <__bad_interrupt>
 176:	00 00       	nop
 178:	61 c0       	rjmp	.+194    	; 0x23c <__bad_interrupt>
 17a:	00 00       	nop
 17c:	5f c0       	rjmp	.+190    	; 0x23c <__bad_interrupt>
 17e:	00 00       	nop
 180:	5d c0       	rjmp	.+186    	; 0x23c <__bad_interrupt>
 182:	00 00       	nop
 184:	5b c0       	rjmp	.+182    	; 0x23c <__bad_interrupt>
 186:	00 00       	nop
 188:	59 c0       	rjmp	.+178    	; 0x23c <__bad_interrupt>
 18a:	00 00       	nop
 18c:	57 c0       	rjmp	.+174    	; 0x23c <__bad_interrupt>
 18e:	00 00       	nop
 190:	55 c0       	rjmp	.+170    	; 0x23c <__bad_interrupt>
 192:	00 00       	nop
 194:	53 c0       	rjmp	.+166    	; 0x23c <__bad_interrupt>
 196:	00 00       	nop
 198:	51 c0       	rjmp	.+162    	; 0x23c <__bad_interrupt>
 19a:	00 00       	nop
 19c:	4f c0       	rjmp	.+158    	; 0x23c <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	4d c0       	rjmp	.+154    	; 0x23c <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	4b c0       	rjmp	.+150    	; 0x23c <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	49 c0       	rjmp	.+146    	; 0x23c <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	47 c0       	rjmp	.+142    	; 0x23c <__bad_interrupt>
 1ae:	00 00       	nop
 1b0:	45 c0       	rjmp	.+138    	; 0x23c <__bad_interrupt>
 1b2:	00 00       	nop
 1b4:	43 c0       	rjmp	.+134    	; 0x23c <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	41 c0       	rjmp	.+130    	; 0x23c <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	3f c0       	rjmp	.+126    	; 0x23c <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	3d c0       	rjmp	.+122    	; 0x23c <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	3b c0       	rjmp	.+118    	; 0x23c <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	39 c0       	rjmp	.+114    	; 0x23c <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	37 c0       	rjmp	.+110    	; 0x23c <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	35 c0       	rjmp	.+106    	; 0x23c <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	33 c0       	rjmp	.+102    	; 0x23c <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	31 c0       	rjmp	.+98     	; 0x23c <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	2f c0       	rjmp	.+94     	; 0x23c <__bad_interrupt>
 1de:	00 00       	nop
 1e0:	2d c0       	rjmp	.+90     	; 0x23c <__bad_interrupt>
 1e2:	00 00       	nop
 1e4:	2b c0       	rjmp	.+86     	; 0x23c <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	29 c0       	rjmp	.+82     	; 0x23c <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	27 c0       	rjmp	.+78     	; 0x23c <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	25 c0       	rjmp	.+74     	; 0x23c <__bad_interrupt>
	...

000001f4 <__ctors_end>:
 1f4:	11 24       	eor	r1, r1
 1f6:	1f be       	out	0x3f, r1	; 63
 1f8:	cf ef       	ldi	r28, 0xFF	; 255
 1fa:	df e3       	ldi	r29, 0x3F	; 63
 1fc:	de bf       	out	0x3e, r29	; 62
 1fe:	cd bf       	out	0x3d, r28	; 61
 200:	00 e0       	ldi	r16, 0x00	; 0
 202:	0c bf       	out	0x3c, r16	; 60
 204:	18 be       	out	0x38, r1	; 56
 206:	19 be       	out	0x39, r1	; 57
 208:	1a be       	out	0x3a, r1	; 58
 20a:	1b be       	out	0x3b, r1	; 59

0000020c <__do_copy_data>:
 20c:	10 e2       	ldi	r17, 0x20	; 32
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	ec e5       	ldi	r30, 0x5C	; 92
 214:	fc e0       	ldi	r31, 0x0C	; 12
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	0b bf       	out	0x3b, r16	; 59
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
 21c:	07 90       	elpm	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	a0 30       	cpi	r26, 0x00	; 0
 222:	b1 07       	cpc	r27, r17
 224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>
 226:	1b be       	out	0x3b, r1	; 59

00000228 <__do_clear_bss>:
 228:	21 e2       	ldi	r18, 0x21	; 33
 22a:	a0 e0       	ldi	r26, 0x00	; 0
 22c:	b0 e2       	ldi	r27, 0x20	; 32
 22e:	01 c0       	rjmp	.+2      	; 0x232 <.do_clear_bss_start>

00000230 <.do_clear_bss_loop>:
 230:	1d 92       	st	X+, r1

00000232 <.do_clear_bss_start>:
 232:	ac 33       	cpi	r26, 0x3C	; 60
 234:	b2 07       	cpc	r27, r18
 236:	e1 f7       	brne	.-8      	; 0x230 <.do_clear_bss_loop>
 238:	82 d3       	rcall	.+1796   	; 0x93e <main>
 23a:	0e c5       	rjmp	.+2588   	; 0xc58 <_exit>

0000023c <__bad_interrupt>:
 23c:	e1 ce       	rjmp	.-574    	; 0x0 <__vectors>

0000023e <pid_attitude_rate>:
}


//  pid  position control loop
void pid_attitude_rate(PID_data *pid_data)
{
 23e:	af 92       	push	r10
 240:	bf 92       	push	r11
 242:	cf 92       	push	r12
 244:	df 92       	push	r13
 246:	ef 92       	push	r14
 248:	ff 92       	push	r15
 24a:	0f 93       	push	r16
 24c:	1f 93       	push	r17
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	fc 01       	movw	r30, r24
	
	int16_t attitude_loop_out;
	////  save the last error calculation so we can calculate the derivative
	pid_data->previousError0 = pid_data->previousError1;
 254:	c0 ad       	ldd	r28, Z+56	; 0x38
 256:	d1 ad       	ldd	r29, Z+57	; 0x39
 258:	c6 ab       	std	Z+54, r28	; 0x36
 25a:	d7 ab       	std	Z+55, r29	; 0x37
	pid_data->previousError1 = pid_data->previousError2;
 25c:	a2 ac       	ldd	r10, Z+58	; 0x3a
 25e:	b3 ac       	ldd	r11, Z+59	; 0x3b
 260:	a0 ae       	std	Z+56, r10	; 0x38
 262:	b1 ae       	std	Z+57, r11	; 0x39
	pid_data->previousError2 = pid_data->attitude_error;
 264:	c2 a4       	ldd	r12, Z+42	; 0x2a
 266:	d3 a4       	ldd	r13, Z+43	; 0x2b
 268:	c2 ae       	std	Z+58, r12	; 0x3a
 26a:	d3 ae       	std	Z+59, r13	; 0x3b
	//pid_data->previousError0 = pid_data->error;
	////  calculate the new error
	////10 - 23 = -13
	
	
	pid_data->attitude_error = (pid_data->attitude_command  - pid_data->attitude_feedback);
 26c:	02 a1       	ldd	r16, Z+34	; 0x22
 26e:	13 a1       	ldd	r17, Z+35	; 0x23
 270:	86 8d       	ldd	r24, Z+30	; 0x1e
 272:	97 8d       	ldd	r25, Z+31	; 0x1f
 274:	08 1b       	sub	r16, r24
 276:	19 0b       	sbc	r17, r25
 278:	02 a7       	std	Z+42, r16	; 0x2a
 27a:	13 a7       	std	Z+43, r17	; 0x2b
	
	//p_term = Limit_value_signed(((pid_data->error  *  pid_data->Kp)/100), pid_data->error);
	pid_data->p_term_attitude =(pid_data->Kp * pid_data->attitude_error)/10;
 27c:	26 89       	ldd	r18, Z+22	; 0x16
 27e:	37 89       	ldd	r19, Z+23	; 0x17
 280:	02 9f       	mul	r16, r18
 282:	c0 01       	movw	r24, r0
 284:	03 9f       	mul	r16, r19
 286:	90 0d       	add	r25, r0
 288:	12 9f       	mul	r17, r18
 28a:	90 0d       	add	r25, r0
 28c:	11 24       	eor	r1, r1
 28e:	2a e0       	ldi	r18, 0x0A	; 10
 290:	30 e0       	ldi	r19, 0x00	; 0
 292:	b9 01       	movw	r22, r18
 294:	ba d4       	rcall	.+2420   	; 0xc0a <__divmodhi4>
 296:	7b 01       	movw	r14, r22
 298:	62 87       	std	Z+10, r22	; 0x0a
 29a:	73 87       	std	Z+11, r23	; 0x0b
	
	//calculate integral term
	pid_data->attitude_total_error = pid_data->previousError0/10 + pid_data->previousError1/10 +  pid_data->previousError2/10 + pid_data->attitude_error/10;
 29c:	ce 01       	movw	r24, r28
 29e:	b9 01       	movw	r22, r18
 2a0:	b4 d4       	rcall	.+2408   	; 0xc0a <__divmodhi4>
 2a2:	eb 01       	movw	r28, r22
 2a4:	c5 01       	movw	r24, r10
 2a6:	b9 01       	movw	r22, r18
 2a8:	b0 d4       	rcall	.+2400   	; 0xc0a <__divmodhi4>
 2aa:	c6 0f       	add	r28, r22
 2ac:	d7 1f       	adc	r29, r23
 2ae:	c6 01       	movw	r24, r12
 2b0:	b9 01       	movw	r22, r18
 2b2:	ab d4       	rcall	.+2390   	; 0xc0a <__divmodhi4>
 2b4:	c6 0f       	add	r28, r22
 2b6:	d7 1f       	adc	r29, r23
 2b8:	c8 01       	movw	r24, r16
 2ba:	b9 01       	movw	r22, r18
 2bc:	a6 d4       	rcall	.+2380   	; 0xc0a <__divmodhi4>
 2be:	c6 0f       	add	r28, r22
 2c0:	d7 1f       	adc	r29, r23
 2c2:	c2 ab       	std	Z+50, r28	; 0x32
 2c4:	d3 ab       	std	Z+51, r29	; 0x33
		
	
	//calculate integral term
	pid_data->i_term_attitude =(pid_data->attitude_total_error  * pid_data->Ki)/50;
 2c6:	40 8d       	ldd	r20, Z+24	; 0x18
 2c8:	51 8d       	ldd	r21, Z+25	; 0x19
 2ca:	c4 9f       	mul	r28, r20
 2cc:	c0 01       	movw	r24, r0
 2ce:	c5 9f       	mul	r28, r21
 2d0:	90 0d       	add	r25, r0
 2d2:	d4 9f       	mul	r29, r20
 2d4:	90 0d       	add	r25, r0
 2d6:	11 24       	eor	r1, r1
 2d8:	62 e3       	ldi	r22, 0x32	; 50
 2da:	70 e0       	ldi	r23, 0x00	; 0
 2dc:	96 d4       	rcall	.+2348   	; 0xc0a <__divmodhi4>

	// calculate the pid output
	attitude_loop_out = (pid_data->p_term_attitude + pid_data->i_term_attitude);
 2de:	e6 0e       	add	r14, r22
 2e0:	f7 1e       	adc	r15, r23

	//  rate calculations start here
	pid_data->previousRateError0 = pid_data->previousRateError1;
 2e2:	86 ad       	ldd	r24, Z+62	; 0x3e
 2e4:	97 ad       	ldd	r25, Z+63	; 0x3f
 2e6:	84 af       	std	Z+60, r24	; 0x3c
 2e8:	95 af       	std	Z+61, r25	; 0x3d
	pid_data->previousRateError1 = pid_data->previousRateError2;
 2ea:	df 01       	movw	r26, r30
 2ec:	a0 5c       	subi	r26, 0xC0	; 192
 2ee:	bf 4f       	sbci	r27, 0xFF	; 255
 2f0:	8d 91       	ld	r24, X+
 2f2:	9c 91       	ld	r25, X
 2f4:	11 97       	sbiw	r26, 0x01	; 1
 2f6:	86 af       	std	Z+62, r24	; 0x3e
 2f8:	97 af       	std	Z+63, r25	; 0x3f
	pid_data->previousRateError2 = pid_data->rate_error;
 2fa:	84 a5       	ldd	r24, Z+44	; 0x2c
 2fc:	95 a5       	ldd	r25, Z+45	; 0x2d
 2fe:	8d 93       	st	X+, r24
 300:	9c 93       	st	X, r25
	
	pid_data->rate_error = (attitude_loop_out - pid_data->rate_feedback);
 302:	80 a1       	ldd	r24, Z+32	; 0x20
 304:	91 a1       	ldd	r25, Z+33	; 0x21
 306:	e8 1a       	sub	r14, r24
 308:	f9 0a       	sbc	r15, r25
 30a:	e4 a6       	std	Z+44, r14	; 0x2c
 30c:	f5 a6       	std	Z+45, r15	; 0x2d
	
	pid_data->p_term_rate = (pid_data->rate_error * pid_data->Kp_rate)/10;
 30e:	40 89       	ldd	r20, Z+16	; 0x10
 310:	51 89       	ldd	r21, Z+17	; 0x11
 312:	e4 9e       	mul	r14, r20
 314:	c0 01       	movw	r24, r0
 316:	e5 9e       	mul	r14, r21
 318:	90 0d       	add	r25, r0
 31a:	f4 9e       	mul	r15, r20
 31c:	90 0d       	add	r25, r0
 31e:	11 24       	eor	r1, r1
 320:	b9 01       	movw	r22, r18
 322:	73 d4       	rcall	.+2278   	; 0xc0a <__divmodhi4>
 324:	8b 01       	movw	r16, r22
 326:	64 83       	std	Z+4, r22	; 0x04
 328:	75 83       	std	Z+5, r23	; 0x05
	
	//calculate integral term
	pid_data->attitude_total_error = pid_data->previousError0/10 + pid_data->previousError1/10 +  pid_data->previousError2/10 + pid_data->attitude_error/10;
		
	//calculate integral term
	pid_data->i_term_attitude =(pid_data->attitude_total_error  * pid_data->Ki_rate)/10;
 32a:	42 89       	ldd	r20, Z+18	; 0x12
 32c:	53 89       	ldd	r21, Z+19	; 0x13
 32e:	c4 9f       	mul	r28, r20
 330:	c0 01       	movw	r24, r0
 332:	c5 9f       	mul	r28, r21
 334:	90 0d       	add	r25, r0
 336:	d4 9f       	mul	r29, r20
 338:	90 0d       	add	r25, r0
 33a:	11 24       	eor	r1, r1
 33c:	b9 01       	movw	r22, r18
 33e:	65 d4       	rcall	.+2250   	; 0xc0a <__divmodhi4>
 340:	64 87       	std	Z+12, r22	; 0x0c
 342:	75 87       	std	Z+13, r23	; 0x0d
		//pid_data->i_term_rate = pid_data->windupGuard;
	//}
	
	////pid_data->d_term_rate = (pid_data->rate_feedback * pid_data->Kd)/100;
	
	pid_data->pid_total = (pid_data->p_term_rate + pid_data->i_term_attitude)/10;
 344:	c8 01       	movw	r24, r16
 346:	86 0f       	add	r24, r22
 348:	97 1f       	adc	r25, r23
 34a:	b9 01       	movw	r22, r18
 34c:	5e d4       	rcall	.+2236   	; 0xc0a <__divmodhi4>
 34e:	64 8f       	std	Z+28, r22	; 0x1c
 350:	75 8f       	std	Z+29, r23	; 0x1d
	
	
	
	
}
 352:	df 91       	pop	r29
 354:	cf 91       	pop	r28
 356:	1f 91       	pop	r17
 358:	0f 91       	pop	r16
 35a:	ff 90       	pop	r15
 35c:	ef 90       	pop	r14
 35e:	df 90       	pop	r13
 360:	cf 90       	pop	r12
 362:	bf 90       	pop	r11
 364:	af 90       	pop	r10
 366:	08 95       	ret

00000368 <initPWM>:
*********************************************************************************************************** */
void sendUM6_Data()
{

		sendData_int16_t(0xCCCC);					//0xCCCC is the heade
		sendData_int16_t(command);
 368:	e0 e0       	ldi	r30, 0x00	; 0
 36a:	f8 e0       	ldi	r31, 0x08	; 8
 36c:	83 e0       	ldi	r24, 0x03	; 3
 36e:	80 83       	st	Z, r24
 370:	81 83       	std	Z+1, r24	; 0x01
 372:	82 83       	std	Z+2, r24	; 0x02
 374:	83 83       	std	Z+3, r24	; 0x03
 376:	81 81       	ldd	r24, Z+1	; 0x01
 378:	80 61       	ori	r24, 0x10	; 16
 37a:	81 83       	std	Z+1, r24	; 0x01
 37c:	81 81       	ldd	r24, Z+1	; 0x01
 37e:	80 62       	ori	r24, 0x20	; 32
 380:	81 83       	std	Z+1, r24	; 0x01
 382:	81 81       	ldd	r24, Z+1	; 0x01
 384:	80 64       	ori	r24, 0x40	; 64
 386:	81 83       	std	Z+1, r24	; 0x01
 388:	81 81       	ldd	r24, Z+1	; 0x01
 38a:	80 68       	ori	r24, 0x80	; 128
 38c:	81 83       	std	Z+1, r24	; 0x01
 38e:	8f e0       	ldi	r24, 0x0F	; 15
 390:	a0 e4       	ldi	r26, 0x40	; 64
 392:	b6 e0       	ldi	r27, 0x06	; 6
 394:	11 96       	adiw	r26, 0x01	; 1
 396:	8c 93       	st	X, r24
 398:	10 ae       	std	Z+56, r1	; 0x38
 39a:	11 ae       	std	Z+57, r1	; 0x39
 39c:	12 ae       	std	Z+58, r1	; 0x3a
 39e:	13 ae       	std	Z+59, r1	; 0x3b
 3a0:	14 ae       	std	Z+60, r1	; 0x3c
 3a2:	15 ae       	std	Z+61, r1	; 0x3d
 3a4:	10 92 3e 08 	sts	0x083E, r1
 3a8:	10 92 3f 08 	sts	0x083F, r1
 3ac:	89 e2       	ldi	r24, 0x29	; 41
 3ae:	98 e6       	ldi	r25, 0x68	; 104
 3b0:	86 a3       	std	Z+38, r24	; 0x26
 3b2:	97 a3       	std	Z+39, r25	; 0x27
 3b4:	63 e0       	ldi	r22, 0x03	; 3
 3b6:	80 e0       	ldi	r24, 0x00	; 0
 3b8:	98 e0       	ldi	r25, 0x08	; 8
 3ba:	08 c4       	rjmp	.+2064   	; 0xbcc <TC0_ConfigClockSource>

000003bc <DisablePWM>:
 3bc:	e0 e0       	ldi	r30, 0x00	; 0
 3be:	f8 e0       	ldi	r31, 0x08	; 8
 3c0:	81 81       	ldd	r24, Z+1	; 0x01
 3c2:	81 83       	std	Z+1, r24	; 0x01
 3c4:	81 81       	ldd	r24, Z+1	; 0x01
 3c6:	81 83       	std	Z+1, r24	; 0x01
 3c8:	81 81       	ldd	r24, Z+1	; 0x01
 3ca:	81 83       	std	Z+1, r24	; 0x01
 3cc:	81 81       	ldd	r24, Z+1	; 0x01
 3ce:	81 83       	std	Z+1, r24	; 0x01
 3d0:	08 95       	ret

000003d2 <doPWM>:
 3d2:	e0 e0       	ldi	r30, 0x00	; 0
 3d4:	f8 e0       	ldi	r31, 0x08	; 8
 3d6:	e4 85       	ldd	r30, Z+12	; 0x0c
 3d8:	e0 ff       	sbrs	r30, 0
 3da:	0e c0       	rjmp	.+28     	; 0x3f8 <doPWM+0x26>
 3dc:	e0 e0       	ldi	r30, 0x00	; 0
 3de:	f8 e0       	ldi	r31, 0x08	; 8
 3e0:	a1 e0       	ldi	r26, 0x01	; 1
 3e2:	a4 87       	std	Z+12, r26	; 0x0c
 3e4:	80 af       	std	Z+56, r24	; 0x38
 3e6:	91 af       	std	Z+57, r25	; 0x39
 3e8:	62 af       	std	Z+58, r22	; 0x3a
 3ea:	73 af       	std	Z+59, r23	; 0x3b
 3ec:	44 af       	std	Z+60, r20	; 0x3c
 3ee:	55 af       	std	Z+61, r21	; 0x3d
 3f0:	20 93 3e 08 	sts	0x083E, r18
 3f4:	30 93 3f 08 	sts	0x083F, r19
 3f8:	08 95       	ret

000003fa <SetPulseWidths>:
 3fa:	80 91 e0 20 	lds	r24, 0x20E0
 3fe:	90 91 e1 20 	lds	r25, 0x20E1
 402:	9c 01       	movw	r18, r24
 404:	21 5d       	subi	r18, 0xD1	; 209
 406:	37 40       	sbci	r19, 0x07	; 7
 408:	2f 32       	cpi	r18, 0x2F	; 47
 40a:	38 40       	sbci	r19, 0x08	; 8
 40c:	c8 f4       	brcc	.+50     	; 0x440 <SetPulseWidths+0x46>
 40e:	88 0f       	add	r24, r24
 410:	99 1f       	adc	r25, r25
 412:	88 0f       	add	r24, r24
 414:	99 1f       	adc	r25, r25
 416:	60 91 6a 20 	lds	r22, 0x206A
 41a:	70 91 6b 20 	lds	r23, 0x206B
 41e:	e0 91 1d 20 	lds	r30, 0x201D
 422:	f0 91 1e 20 	lds	r31, 0x201E
 426:	9c 01       	movw	r18, r24
 428:	26 0f       	add	r18, r22
 42a:	37 1f       	adc	r19, r23
 42c:	ac 01       	movw	r20, r24
 42e:	4e 0f       	add	r20, r30
 430:	5f 1f       	adc	r21, r31
 432:	dc 01       	movw	r26, r24
 434:	a6 1b       	sub	r26, r22
 436:	b7 0b       	sbc	r27, r23
 438:	bd 01       	movw	r22, r26
 43a:	8e 1b       	sub	r24, r30
 43c:	9f 0b       	sbc	r25, r31
 43e:	c9 cf       	rjmp	.-110    	; 0x3d2 <doPWM>
 440:	20 e0       	ldi	r18, 0x00	; 0
 442:	30 e0       	ldi	r19, 0x00	; 0
 444:	40 e0       	ldi	r20, 0x00	; 0
 446:	50 e0       	ldi	r21, 0x00	; 0
 448:	60 e0       	ldi	r22, 0x00	; 0
 44a:	70 e0       	ldi	r23, 0x00	; 0
 44c:	80 e0       	ldi	r24, 0x00	; 0
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	c0 cf       	rjmp	.-128    	; 0x3d2 <doPWM>

00000452 <intPID_gains>:
 452:	85 e0       	ldi	r24, 0x05	; 5
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	80 93 11 20 	sts	0x2011, r24
 45a:	90 93 12 20 	sts	0x2012, r25
 45e:	10 92 13 20 	sts	0x2013, r1
 462:	10 92 14 20 	sts	0x2014, r1
 466:	80 93 15 20 	sts	0x2015, r24
 46a:	90 93 16 20 	sts	0x2016, r25
 46e:	80 93 5e 20 	sts	0x205E, r24
 472:	90 93 5f 20 	sts	0x205F, r25
 476:	10 92 60 20 	sts	0x2060, r1
 47a:	10 92 61 20 	sts	0x2061, r1
 47e:	80 93 62 20 	sts	0x2062, r24
 482:	90 93 63 20 	sts	0x2063, r25
 486:	88 ec       	ldi	r24, 0xC8	; 200
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	80 93 31 20 	sts	0x2031, r24
 48e:	90 93 32 20 	sts	0x2032, r25
 492:	80 93 7e 20 	sts	0x207E, r24
 496:	90 93 7f 20 	sts	0x207F, r25
 49a:	80 93 12 21 	sts	0x2112, r24
 49e:	90 93 13 21 	sts	0x2113, r25
 4a2:	08 95       	ret

000004a4 <WriteToPC_SPI>:
  OUTPUT:
  DISCRIPTION:  Write data packet to the SPI bus connected to the ATmega, 
  the ATmega should be set up to parse this data.
*********************************************************************************************************** */
int16_t WriteToPC_SPI()
{
 4a4:	af 92       	push	r10
 4a6:	bf 92       	push	r11
 4a8:	cf 92       	push	r12
 4aa:	df 92       	push	r13
 4ac:	ff 92       	push	r15
 4ae:	0f 93       	push	r16
 4b0:	1f 93       	push	r17
 4b2:	cf 93       	push	r28
 4b4:	df 93       	push	r29
	PORTE.OUTCLR = PIN4_bm;
 4b6:	00 e8       	ldi	r16, 0x80	; 128
 4b8:	16 e0       	ldi	r17, 0x06	; 6
 4ba:	68 94       	set
 4bc:	ff 24       	eor	r15, r15
 4be:	f4 f8       	bld	r15, 4
 4c0:	f8 01       	movw	r30, r16
 4c2:	f6 82       	std	Z+6, r15	; 0x06
	
	throttleAxis.thrust = spiPC_write_read(upperByte16(throttleAxis.thrust )) << 8;						
 4c4:	0f 2e       	mov	r0, r31
 4c6:	f0 ee       	ldi	r31, 0xE0	; 224
 4c8:	cf 2e       	mov	r12, r31
 4ca:	f0 e2       	ldi	r31, 0x20	; 32
 4cc:	df 2e       	mov	r13, r31
 4ce:	f0 2d       	mov	r31, r0
 4d0:	f6 01       	movw	r30, r12
 4d2:	81 81       	ldd	r24, Z+1	; 0x01
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	00 d3       	rcall	.+1536   	; 0xad8 <spiPC_write_read>
 4d8:	d8 2f       	mov	r29, r24
 4da:	f0 e0       	ldi	r31, 0x00	; 0
 4dc:	cf 2f       	mov	r28, r31
 4de:	f6 01       	movw	r30, r12
 4e0:	c0 83       	st	Z, r28
 4e2:	d1 83       	std	Z+1, r29	; 0x01
	throttleAxis.thrust += spiPC_write_read(lowerByte16(throttleAxis.thrust ));							
 4e4:	80 e0       	ldi	r24, 0x00	; 0
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	f7 d2       	rcall	.+1518   	; 0xad8 <spiPC_write_read>
 4ea:	8c 0f       	add	r24, r28
 4ec:	9d 1f       	adc	r25, r29
 4ee:	f6 01       	movw	r30, r12
 4f0:	80 83       	st	Z, r24
 4f2:	91 83       	std	Z+1, r25	; 0x01
	
	rollAxis.attitude_command = spiPC_write_read(upperByte16(pitchAxis.attitude_feedback)) << 8;
 4f4:	0f 2e       	mov	r0, r31
 4f6:	fc e6       	ldi	r31, 0x6C	; 108
 4f8:	af 2e       	mov	r10, r31
 4fa:	f0 e2       	ldi	r31, 0x20	; 32
 4fc:	bf 2e       	mov	r11, r31
 4fe:	f0 2d       	mov	r31, r0
 500:	f5 01       	movw	r30, r10
 502:	81 81       	ldd	r24, Z+1	; 0x01
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	e8 d2       	rcall	.+1488   	; 0xad8 <spiPC_write_read>
 508:	d8 2f       	mov	r29, r24
 50a:	f0 e0       	ldi	r31, 0x00	; 0
 50c:	cf 2f       	mov	r28, r31
 50e:	0f 2e       	mov	r0, r31
 510:	f3 e2       	ldi	r31, 0x23	; 35
 512:	cf 2e       	mov	r12, r31
 514:	f0 e2       	ldi	r31, 0x20	; 32
 516:	df 2e       	mov	r13, r31
 518:	f0 2d       	mov	r31, r0
 51a:	f6 01       	movw	r30, r12
 51c:	c0 83       	st	Z, r28
 51e:	d1 83       	std	Z+1, r29	; 0x01
	rollAxis.attitude_command  += spiPC_write_read(lowerByte16(pitchAxis.attitude_feedback));
 520:	f5 01       	movw	r30, r10
 522:	80 81       	ld	r24, Z
 524:	91 81       	ldd	r25, Z+1	; 0x01
 526:	99 27       	eor	r25, r25
 528:	d7 d2       	rcall	.+1454   	; 0xad8 <spiPC_write_read>
 52a:	8c 0f       	add	r24, r28
 52c:	9d 1f       	adc	r25, r29
 52e:	f6 01       	movw	r30, r12
 530:	80 83       	st	Z, r24
 532:	91 83       	std	Z+1, r25	; 0x01
	
	pitchAxis.attitude_command = spiPC_write_read(upperByte16(rollAxis.attitude_feedback)) << 8;
 534:	0f 2e       	mov	r0, r31
 536:	ff e1       	ldi	r31, 0x1F	; 31
 538:	af 2e       	mov	r10, r31
 53a:	f0 e2       	ldi	r31, 0x20	; 32
 53c:	bf 2e       	mov	r11, r31
 53e:	f0 2d       	mov	r31, r0
 540:	f5 01       	movw	r30, r10
 542:	81 81       	ldd	r24, Z+1	; 0x01
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	c8 d2       	rcall	.+1424   	; 0xad8 <spiPC_write_read>
 548:	d8 2f       	mov	r29, r24
 54a:	f0 e0       	ldi	r31, 0x00	; 0
 54c:	cf 2f       	mov	r28, r31
 54e:	0f 2e       	mov	r0, r31
 550:	f0 e7       	ldi	r31, 0x70	; 112
 552:	cf 2e       	mov	r12, r31
 554:	f0 e2       	ldi	r31, 0x20	; 32
 556:	df 2e       	mov	r13, r31
 558:	f0 2d       	mov	r31, r0
 55a:	f6 01       	movw	r30, r12
 55c:	c0 83       	st	Z, r28
 55e:	d1 83       	std	Z+1, r29	; 0x01
	pitchAxis.attitude_command += spiPC_write_read(lowerByte16(rollAxis.attitude_feedback));
 560:	f5 01       	movw	r30, r10
 562:	80 81       	ld	r24, Z
 564:	91 81       	ldd	r25, Z+1	; 0x01
 566:	99 27       	eor	r25, r25
 568:	b7 d2       	rcall	.+1390   	; 0xad8 <spiPC_write_read>
 56a:	8c 0f       	add	r24, r28
 56c:	9d 1f       	adc	r25, r29
 56e:	f6 01       	movw	r30, r12
 570:	80 83       	st	Z, r24
 572:	91 83       	std	Z+1, r25	; 0x01

	yawAxis.attitude_command = spiPC_write_read(upperByte16(yawAxis.attitude_feedback)) << 8;
 574:	0f 2e       	mov	r0, r31
 576:	f0 e0       	ldi	r31, 0x00	; 0
 578:	af 2e       	mov	r10, r31
 57a:	f1 e2       	ldi	r31, 0x21	; 33
 57c:	bf 2e       	mov	r11, r31
 57e:	f0 2d       	mov	r31, r0
 580:	f5 01       	movw	r30, r10
 582:	81 81       	ldd	r24, Z+1	; 0x01
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	a8 d2       	rcall	.+1360   	; 0xad8 <spiPC_write_read>
 588:	d8 2f       	mov	r29, r24
 58a:	f0 e0       	ldi	r31, 0x00	; 0
 58c:	cf 2f       	mov	r28, r31
 58e:	0f 2e       	mov	r0, r31
 590:	f4 e0       	ldi	r31, 0x04	; 4
 592:	cf 2e       	mov	r12, r31
 594:	f1 e2       	ldi	r31, 0x21	; 33
 596:	df 2e       	mov	r13, r31
 598:	f0 2d       	mov	r31, r0
 59a:	f6 01       	movw	r30, r12
 59c:	c0 83       	st	Z, r28
 59e:	d1 83       	std	Z+1, r29	; 0x01
	yawAxis.attitude_command += spiPC_write_read(lowerByte16(yawAxis.attitude_feedback));
 5a0:	f5 01       	movw	r30, r10
 5a2:	80 81       	ld	r24, Z
 5a4:	91 81       	ldd	r25, Z+1	; 0x01
 5a6:	99 27       	eor	r25, r25
 5a8:	97 d2       	rcall	.+1326   	; 0xad8 <spiPC_write_read>
 5aa:	8c 0f       	add	r24, r28
 5ac:	9d 1f       	adc	r25, r29
 5ae:	f6 01       	movw	r30, r12
 5b0:	80 83       	st	Z, r24
 5b2:	91 83       	std	Z+1, r25	; 0x01
		
	pitchAxis.Kp = (spiPC_write_read(upperByte16(pitchAxis.rate_feedback ))) << 8;					
 5b4:	0f 2e       	mov	r0, r31
 5b6:	fe e6       	ldi	r31, 0x6E	; 110
 5b8:	af 2e       	mov	r10, r31
 5ba:	f0 e2       	ldi	r31, 0x20	; 32
 5bc:	bf 2e       	mov	r11, r31
 5be:	f0 2d       	mov	r31, r0
 5c0:	f5 01       	movw	r30, r10
 5c2:	81 81       	ldd	r24, Z+1	; 0x01
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	88 d2       	rcall	.+1296   	; 0xad8 <spiPC_write_read>
 5c8:	d8 2f       	mov	r29, r24
 5ca:	f0 e0       	ldi	r31, 0x00	; 0
 5cc:	cf 2f       	mov	r28, r31
 5ce:	0f 2e       	mov	r0, r31
 5d0:	f4 e6       	ldi	r31, 0x64	; 100
 5d2:	cf 2e       	mov	r12, r31
 5d4:	f0 e2       	ldi	r31, 0x20	; 32
 5d6:	df 2e       	mov	r13, r31
 5d8:	f0 2d       	mov	r31, r0
 5da:	f6 01       	movw	r30, r12
 5dc:	c0 83       	st	Z, r28
 5de:	d1 83       	std	Z+1, r29	; 0x01
	pitchAxis.Kp += spiPC_write_read(lowerByte16(pitchAxis.rate_feedback ));							
 5e0:	f5 01       	movw	r30, r10
 5e2:	80 81       	ld	r24, Z
 5e4:	91 81       	ldd	r25, Z+1	; 0x01
 5e6:	99 27       	eor	r25, r25
 5e8:	77 d2       	rcall	.+1262   	; 0xad8 <spiPC_write_read>
 5ea:	8c 0f       	add	r24, r28
 5ec:	9d 1f       	adc	r25, r29
 5ee:	f6 01       	movw	r30, r12
 5f0:	80 83       	st	Z, r24
 5f2:	91 83       	std	Z+1, r25	; 0x01
	
	pitchAxis.Ki = (spiPC_write_read(upperByte16(pitchAxis.rate_error ))) << 8;					
 5f4:	0f 2e       	mov	r0, r31
 5f6:	fa e7       	ldi	r31, 0x7A	; 122
 5f8:	af 2e       	mov	r10, r31
 5fa:	f0 e2       	ldi	r31, 0x20	; 32
 5fc:	bf 2e       	mov	r11, r31
 5fe:	f0 2d       	mov	r31, r0
 600:	f5 01       	movw	r30, r10
 602:	81 81       	ldd	r24, Z+1	; 0x01
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	68 d2       	rcall	.+1232   	; 0xad8 <spiPC_write_read>
 608:	d8 2f       	mov	r29, r24
 60a:	f0 e0       	ldi	r31, 0x00	; 0
 60c:	cf 2f       	mov	r28, r31
 60e:	0f 2e       	mov	r0, r31
 610:	f6 e6       	ldi	r31, 0x66	; 102
 612:	cf 2e       	mov	r12, r31
 614:	f0 e2       	ldi	r31, 0x20	; 32
 616:	df 2e       	mov	r13, r31
 618:	f0 2d       	mov	r31, r0
 61a:	f6 01       	movw	r30, r12
 61c:	c0 83       	st	Z, r28
 61e:	d1 83       	std	Z+1, r29	; 0x01
	pitchAxis.Ki += spiPC_write_read(lowerByte16(pitchAxis.rate_error));							
 620:	f5 01       	movw	r30, r10
 622:	80 81       	ld	r24, Z
 624:	91 81       	ldd	r25, Z+1	; 0x01
 626:	99 27       	eor	r25, r25
 628:	57 d2       	rcall	.+1198   	; 0xad8 <spiPC_write_read>
 62a:	8c 0f       	add	r24, r28
 62c:	9d 1f       	adc	r25, r29
 62e:	f6 01       	movw	r30, r12
 630:	80 83       	st	Z, r24
 632:	91 83       	std	Z+1, r25	; 0x01
		
	pitchAxis.Kd= (spiPC_write_read(upperByte16(pitchAxis.pid_total))) << 8;					
 634:	0f 2e       	mov	r0, r31
 636:	fa e6       	ldi	r31, 0x6A	; 106
 638:	af 2e       	mov	r10, r31
 63a:	f0 e2       	ldi	r31, 0x20	; 32
 63c:	bf 2e       	mov	r11, r31
 63e:	f0 2d       	mov	r31, r0
 640:	f5 01       	movw	r30, r10
 642:	81 81       	ldd	r24, Z+1	; 0x01
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	48 d2       	rcall	.+1168   	; 0xad8 <spiPC_write_read>
 648:	d8 2f       	mov	r29, r24
 64a:	f0 e0       	ldi	r31, 0x00	; 0
 64c:	cf 2f       	mov	r28, r31
 64e:	0f 2e       	mov	r0, r31
 650:	f8 e6       	ldi	r31, 0x68	; 104
 652:	cf 2e       	mov	r12, r31
 654:	f0 e2       	ldi	r31, 0x20	; 32
 656:	df 2e       	mov	r13, r31
 658:	f0 2d       	mov	r31, r0
 65a:	f6 01       	movw	r30, r12
 65c:	c0 83       	st	Z, r28
 65e:	d1 83       	std	Z+1, r29	; 0x01
	pitchAxis.Kd+= spiPC_write_read(lowerByte16(pitchAxis.pid_total));			
 660:	f5 01       	movw	r30, r10
 662:	80 81       	ld	r24, Z
 664:	91 81       	ldd	r25, Z+1	; 0x01
 666:	99 27       	eor	r25, r25
 668:	37 d2       	rcall	.+1134   	; 0xad8 <spiPC_write_read>
 66a:	8c 0f       	add	r24, r28
 66c:	9d 1f       	adc	r25, r29
 66e:	f6 01       	movw	r30, r12
 670:	80 83       	st	Z, r24
 672:	91 83       	std	Z+1, r25	; 0x01
	
	command= (spiPC_write_read(upperByte16(yawAxis.rate_feedback))) << 8;
 674:	c2 e0       	ldi	r28, 0x02	; 2
 676:	d1 e2       	ldi	r29, 0x21	; 33
 678:	89 81       	ldd	r24, Y+1	; 0x01
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	2d d2       	rcall	.+1114   	; 0xad8 <spiPC_write_read>
 67e:	10 92 4b 20 	sts	0x204B, r1
 682:	80 93 4c 20 	sts	0x204C, r24
	command+= spiPC_write_read(lowerByte16(yawAxis.rate_feedback));			
 686:	88 81       	ld	r24, Y
 688:	99 81       	ldd	r25, Y+1	; 0x01
 68a:	99 27       	eor	r25, r25
 68c:	25 d2       	rcall	.+1098   	; 0xad8 <spiPC_write_read>
 68e:	20 91 4b 20 	lds	r18, 0x204B
 692:	30 91 4c 20 	lds	r19, 0x204C
 696:	82 0f       	add	r24, r18
 698:	93 1f       	adc	r25, r19
 69a:	80 93 4b 20 	sts	0x204B, r24
 69e:	90 93 4c 20 	sts	0x204C, r25
	
	dummy_read = spiPC_write_read(END_PACKET_CHAR);													
 6a2:	8c ec       	ldi	r24, 0xCC	; 204
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	18 d2       	rcall	.+1072   	; 0xad8 <spiPC_write_read>
 6a8:	80 93 4d 20 	sts	0x204D, r24
	dummy_read = spiPC_write_read(END_PACKET_CHAR);			
 6ac:	8c ec       	ldi	r24, 0xCC	; 204
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	13 d2       	rcall	.+1062   	; 0xad8 <spiPC_write_read>
 6b2:	80 93 4d 20 	sts	0x204D, r24
	//rollAxis.Kp = pitchAxis.Kp;
	//rollAxis.Ki = rollAxis.Ki;
	//rollAxis.Kd_rate = rollAxis.Kd_rate;										
	
	
	PORTE.OUTSET = PIN4_bm;
 6b6:	f8 01       	movw	r30, r16
 6b8:	f5 82       	std	Z+5, r15	; 0x05
	
	return command;
	
}
 6ba:	80 91 4b 20 	lds	r24, 0x204B
 6be:	90 91 4c 20 	lds	r25, 0x204C
 6c2:	df 91       	pop	r29
 6c4:	cf 91       	pop	r28
 6c6:	1f 91       	pop	r17
 6c8:	0f 91       	pop	r16
 6ca:	ff 90       	pop	r15
 6cc:	df 90       	pop	r13
 6ce:	cf 90       	pop	r12
 6d0:	bf 90       	pop	r11
 6d2:	af 90       	pop	r10
 6d4:	08 95       	ret

000006d6 <UpdateEulerAngles>:
OUTPUT:
DISCRIPTION:   Read in data from the IMU.  Most of the IMU data are 16 bits sorted in 32 bit registers, see
data sheet for read commands
*********************************************************************************************************** */
void UpdateEulerAngles()
{
 6d6:	0f 93       	push	r16
 6d8:	1f 93       	push	r17
 6da:	cf 93       	push	r28
 6dc:	df 93       	push	r29

	PORTF.OUTCLR = PIN4_bm;
 6de:	c0 ea       	ldi	r28, 0xA0	; 160
 6e0:	d6 e0       	ldi	r29, 0x06	; 6
 6e2:	10 e1       	ldi	r17, 0x10	; 16
 6e4:	1e 83       	std	Y+6, r17	; 0x06

	uint8_t dummy_read = 0x00;
	//psi = yaw  phi = roll    theta = pitch
	dummy_read = spiIMU_write_read(READ_COMMAND);
 6e6:	80 e0       	ldi	r24, 0x00	; 0
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	03 d2       	rcall	.+1030   	; 0xaf2 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(UM6_EULER_PHI_THETA);
 6ec:	82 e6       	ldi	r24, 0x62	; 98
 6ee:	90 e0       	ldi	r25, 0x00	; 0
 6f0:	00 d2       	rcall	.+1024   	; 0xaf2 <spiIMU_write_read>
	
	//MSB first
	rollAxis.attitude_feedback = (spiIMU_write_read(DUMMY_READ)<< 8) | spiIMU_write_read(DUMMY_READ);
 6f2:	80 e0       	ldi	r24, 0x00	; 0
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	fd d1       	rcall	.+1018   	; 0xaf2 <spiIMU_write_read>
 6f8:	08 2f       	mov	r16, r24
 6fa:	80 e0       	ldi	r24, 0x00	; 0
 6fc:	90 e0       	ldi	r25, 0x00	; 0
 6fe:	f9 d1       	rcall	.+1010   	; 0xaf2 <spiIMU_write_read>
 700:	30 2f       	mov	r19, r16
 702:	20 e0       	ldi	r18, 0x00	; 0
 704:	82 2b       	or	r24, r18
 706:	93 2b       	or	r25, r19
 708:	80 93 1f 20 	sts	0x201F, r24
 70c:	90 93 20 20 	sts	0x2020, r25

	pitchAxis.attitude_feedback = (spiIMU_write_read(DUMMY_READ)<< 8) | spiIMU_write_read(UM6_EULER_PSI);
 710:	80 e0       	ldi	r24, 0x00	; 0
 712:	90 e0       	ldi	r25, 0x00	; 0
 714:	ee d1       	rcall	.+988    	; 0xaf2 <spiIMU_write_read>
 716:	08 2f       	mov	r16, r24
 718:	83 e6       	ldi	r24, 0x63	; 99
 71a:	90 e0       	ldi	r25, 0x00	; 0
 71c:	ea d1       	rcall	.+980    	; 0xaf2 <spiIMU_write_read>
 71e:	30 2f       	mov	r19, r16
 720:	20 e0       	ldi	r18, 0x00	; 0
 722:	82 2b       	or	r24, r18
 724:	93 2b       	or	r25, r19
 726:	80 93 6c 20 	sts	0x206C, r24
 72a:	90 93 6d 20 	sts	0x206D, r25
	
	yawAxis.attitude_feedback = (spiIMU_write_read(DUMMY_READ)<< 8) | spiIMU_write_read(DUMMY_READ);
 72e:	80 e0       	ldi	r24, 0x00	; 0
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	df d1       	rcall	.+958    	; 0xaf2 <spiIMU_write_read>
 734:	08 2f       	mov	r16, r24
 736:	80 e0       	ldi	r24, 0x00	; 0
 738:	90 e0       	ldi	r25, 0x00	; 0
 73a:	db d1       	rcall	.+950    	; 0xaf2 <spiIMU_write_read>
 73c:	30 2f       	mov	r19, r16
 73e:	20 e0       	ldi	r18, 0x00	; 0
 740:	82 2b       	or	r24, r18
 742:	93 2b       	or	r25, r19
 744:	80 93 00 21 	sts	0x2100, r24
 748:	90 93 01 21 	sts	0x2101, r25

	dummy_read = spiIMU_write_read(DUMMY_READ);     dummy_read =  spiIMU_write_read(UM6_GYRO_PROC_XY);			// reserved bytes
 74c:	80 e0       	ldi	r24, 0x00	; 0
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	d0 d1       	rcall	.+928    	; 0xaf2 <spiIMU_write_read>
 752:	8c e5       	ldi	r24, 0x5C	; 92
 754:	90 e0       	ldi	r25, 0x00	; 0
 756:	cd d1       	rcall	.+922    	; 0xaf2 <spiIMU_write_read>
	
	pitchAxis.rate_feedback  = (spiIMU_write_read(DUMMY_READ)<< 8) | spiIMU_write_read(DUMMY_READ);
 758:	80 e0       	ldi	r24, 0x00	; 0
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	ca d1       	rcall	.+916    	; 0xaf2 <spiIMU_write_read>
 75e:	08 2f       	mov	r16, r24
 760:	80 e0       	ldi	r24, 0x00	; 0
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	c6 d1       	rcall	.+908    	; 0xaf2 <spiIMU_write_read>
 766:	30 2f       	mov	r19, r16
 768:	20 e0       	ldi	r18, 0x00	; 0
 76a:	82 2b       	or	r24, r18
 76c:	93 2b       	or	r25, r19
 76e:	80 93 6e 20 	sts	0x206E, r24
 772:	90 93 6f 20 	sts	0x206F, r25

	rollAxis.rate_feedback = (spiIMU_write_read(DUMMY_READ)<< 8) | spiIMU_write_read(UM6_GYRO_PROC_Z);
 776:	80 e0       	ldi	r24, 0x00	; 0
 778:	90 e0       	ldi	r25, 0x00	; 0
 77a:	bb d1       	rcall	.+886    	; 0xaf2 <spiIMU_write_read>
 77c:	08 2f       	mov	r16, r24
 77e:	8d e5       	ldi	r24, 0x5D	; 93
 780:	90 e0       	ldi	r25, 0x00	; 0
 782:	b7 d1       	rcall	.+878    	; 0xaf2 <spiIMU_write_read>
 784:	30 2f       	mov	r19, r16
 786:	20 e0       	ldi	r18, 0x00	; 0
 788:	82 2b       	or	r24, r18
 78a:	93 2b       	or	r25, r19
 78c:	80 93 21 20 	sts	0x2021, r24
 790:	90 93 22 20 	sts	0x2022, r25
	
	yawAxis.rate_feedback = (spiIMU_write_read(DUMMY_READ)<< 8) | spiIMU_write_read(DUMMY_READ);
 794:	80 e0       	ldi	r24, 0x00	; 0
 796:	90 e0       	ldi	r25, 0x00	; 0
 798:	ac d1       	rcall	.+856    	; 0xaf2 <spiIMU_write_read>
 79a:	08 2f       	mov	r16, r24
 79c:	80 e0       	ldi	r24, 0x00	; 0
 79e:	90 e0       	ldi	r25, 0x00	; 0
 7a0:	a8 d1       	rcall	.+848    	; 0xaf2 <spiIMU_write_read>
 7a2:	30 2f       	mov	r19, r16
 7a4:	20 e0       	ldi	r18, 0x00	; 0
 7a6:	82 2b       	or	r24, r18
 7a8:	93 2b       	or	r25, r19
 7aa:	80 93 02 21 	sts	0x2102, r24
 7ae:	90 93 03 21 	sts	0x2103, r25

	dummy_read = spiIMU_write_read(DUMMY_READ);     dummy_read =  spiIMU_write_read(UM6_GPS_ALTITUDE);			// reserved bytes
 7b2:	80 e0       	ldi	r24, 0x00	; 0
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	9d d1       	rcall	.+826    	; 0xaf2 <spiIMU_write_read>
 7b8:	89 e7       	ldi	r24, 0x79	; 121
 7ba:	90 e0       	ldi	r25, 0x00	; 0
 7bc:	9a d1       	rcall	.+820    	; 0xaf2 <spiIMU_write_read>
	


	PORTF.OUTSET = PIN4_bm;
 7be:	1d 83       	std	Y+5, r17	; 0x05
	//yawAxis.attitude_feedback = 0x0003;
	//
	//rollAxis.rate_feedback = 0x0100;
	//pitchAxis.rate_feedback = 0x0100;
	//yawAxis.rate_feedback = 0x0006;
}
 7c0:	df 91       	pop	r29
 7c2:	cf 91       	pop	r28
 7c4:	1f 91       	pop	r17
 7c6:	0f 91       	pop	r16
 7c8:	08 95       	ret

000007ca <ControlLoop>:
*********************************************************************************************************** */
void ControlLoop()
{
	
	
	int16counter++;
 7ca:	80 91 2c 21 	lds	r24, 0x212C
 7ce:	90 91 2d 21 	lds	r25, 0x212D
 7d2:	01 96       	adiw	r24, 0x01	; 1
 7d4:	80 93 2c 21 	sts	0x212C, r24
 7d8:	90 93 2d 21 	sts	0x212D, r25
	UpdateEulerAngles();
 7dc:	7c df       	rcall	.-264    	; 0x6d6 <UpdateEulerAngles>
	SetPulseWidths();
 7de:	0d de       	rcall	.-998    	; 0x3fa <SetPulseWidths>
	pid_attitude_rate(&pitchAxis);
 7e0:	8e e4       	ldi	r24, 0x4E	; 78
 7e2:	90 e2       	ldi	r25, 0x20	; 32
 7e4:	2c dd       	rcall	.-1448   	; 0x23e <pid_attitude_rate>
	if (int16counter >= 20)
 7e6:	80 91 2c 21 	lds	r24, 0x212C
 7ea:	90 91 2d 21 	lds	r25, 0x212D
 7ee:	44 97       	sbiw	r24, 0x14	; 20
 7f0:	28 f0       	brcs	.+10     	; 0x7fc <ControlLoop+0x32>

	{
		WriteToPC_SPI();
 7f2:	58 de       	rcall	.-848    	; 0x4a4 <WriteToPC_SPI>
		//sendUM6_Data();
		int16counter = 0;
 7f4:	10 92 2c 21 	sts	0x212C, r1
 7f8:	10 92 2d 21 	sts	0x212D, r1
 7fc:	08 95       	ret

000007fe <init32MHzClock>:
*********************************************************************************************************** */
void init32MHzClock(void)
{

	//	Enable the 32 MHz internal RC oscillator.
	OSC.CTRL|=OSC_RC32MEN_bm;
 7fe:	e0 e5       	ldi	r30, 0x50	; 80
 800:	f0 e0       	ldi	r31, 0x00	; 0
 802:	80 81       	ld	r24, Z
 804:	82 60       	ori	r24, 0x02	; 2
 806:	80 83       	st	Z, r24
	//	The R32MRFY flag is set when the 32 MHz internal RC oscillator is stable
	//	and ready to be used as the System Clock source.
	while(!(OSC.STATUS &OSC_RC32MRDY_bm ));
 808:	81 81       	ldd	r24, Z+1	; 0x01
 80a:	81 ff       	sbrs	r24, 1
 80c:	fd cf       	rjmp	.-6      	; 0x808 <init32MHzClock+0xa>
	CCP=CCP_IOREG_gc;
 80e:	88 ed       	ldi	r24, 0xD8	; 216
 810:	84 bf       	out	0x34, r24	; 52
	//	Select the 32MHz RC oscillator for the system clock
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
 812:	81 e0       	ldi	r24, 0x01	; 1
 814:	80 93 40 00 	sts	0x0040, r24
 818:	08 95       	ret

0000081a <intiLoopTimer>:
void intiLoopTimer()
{
	

	// Set the timer prescale.
	TCD0.CTRLA = TC_CLKSEL_DIV4_gc;
 81a:	e0 e0       	ldi	r30, 0x00	; 0
 81c:	f9 e0       	ldi	r31, 0x09	; 9
 81e:	83 e0       	ldi	r24, 0x03	; 3
 820:	80 83       	st	Z, r24

	/* Configure the timer for normal counting. */
	TCD0.CTRLB = TC_WGMODE_NORMAL_gc;
 822:	11 82       	std	Z+1, r1	; 0x01

	
	// 23000 counts set f = 300HZ by trial and error
	//TCD0.PER = 38686;
	//TCD0.PER = 30000;
	TCD0.PER = 24000;
 824:	80 ec       	ldi	r24, 0xC0	; 192
 826:	9d e5       	ldi	r25, 0x5D	; 93
 828:	86 a3       	std	Z+38, r24	; 0x26
 82a:	97 a3       	std	Z+39, r25	; 0x27
	//TCD0.PER = 40000;
	//TCD0.PER = 8000;
	//TCD0.PER = 5000;
	//Configure timer to generate an interrupt on overflow. */
	TCD0.INTCTRLA = TC_OVFINTLVL_LO_gc;
 82c:	81 e0       	ldi	r24, 0x01	; 1
 82e:	86 83       	std	Z+6, r24	; 0x06

	/* Enable this interrupt level. */
	PMIC.CTRL |= PMIC_LOLVLEN_bm;
 830:	e0 ea       	ldi	r30, 0xA0	; 160
 832:	f0 e0       	ldi	r31, 0x00	; 0
 834:	82 81       	ldd	r24, Z+2	; 0x02
 836:	81 60       	ori	r24, 0x01	; 1
 838:	82 83       	std	Z+2, r24	; 0x02
 83a:	08 95       	ret

0000083c <zeroSensor>:




uint8_t zeroSensor()
{
 83c:	1f 93       	push	r17
 83e:	cf 93       	push	r28
 840:	df 93       	push	r29
	
	PORTF.OUTCLR = PIN4_bm;
 842:	c0 ea       	ldi	r28, 0xA0	; 160
 844:	d6 e0       	ldi	r29, 0x06	; 6
 846:	10 e1       	ldi	r17, 0x10	; 16
 848:	1e 83       	std	Y+6, r17	; 0x06
	//zero mad 0xB0
	
	uint8_t dummy_read = 0x00;
	//psi = yaw  phi = roll    theta = pitch
	//0x01 0xAC 0x00 0x00 0x00 0x00
	dummy_read = spiIMU_write_read(WRITE_COMMAND);
 84a:	81 e0       	ldi	r24, 0x01	; 1
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	51 d1       	rcall	.+674    	; 0xaf2 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(ZERO_GYROS);
 850:	8c ea       	ldi	r24, 0xAC	; 172
 852:	90 e0       	ldi	r25, 0x00	; 0
 854:	4e d1       	rcall	.+668    	; 0xaf2 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(DUMMY_READ);
 856:	80 e0       	ldi	r24, 0x00	; 0
 858:	90 e0       	ldi	r25, 0x00	; 0
 85a:	4b d1       	rcall	.+662    	; 0xaf2 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(DUMMY_READ);
 85c:	80 e0       	ldi	r24, 0x00	; 0
 85e:	90 e0       	ldi	r25, 0x00	; 0
 860:	48 d1       	rcall	.+656    	; 0xaf2 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(DUMMY_READ);
 862:	80 e0       	ldi	r24, 0x00	; 0
 864:	90 e0       	ldi	r25, 0x00	; 0
 866:	45 d1       	rcall	.+650    	; 0xaf2 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(DUMMY_READ);
 868:	80 e0       	ldi	r24, 0x00	; 0
 86a:	90 e0       	ldi	r25, 0x00	; 0
 86c:	42 d1       	rcall	.+644    	; 0xaf2 <spiIMU_write_read>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 86e:	8f e8       	ldi	r24, 0x8F	; 143
 870:	91 e0       	ldi	r25, 0x01	; 1
 872:	01 97       	sbiw	r24, 0x01	; 1
 874:	f1 f7       	brne	.-4      	; 0x872 <zeroSensor+0x36>
 876:	00 c0       	rjmp	.+0      	; 0x878 <zeroSensor+0x3c>
 878:	00 00       	nop
	
	_delay_us(50);
	dummy_read = spiIMU_write_read(WRITE_COMMAND);
 87a:	81 e0       	ldi	r24, 0x01	; 1
 87c:	90 e0       	ldi	r25, 0x00	; 0
 87e:	39 d1       	rcall	.+626    	; 0xaf2 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(SET_ACCEL_REF);
 880:	8f ea       	ldi	r24, 0xAF	; 175
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	36 d1       	rcall	.+620    	; 0xaf2 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(DUMMY_READ);
 886:	80 e0       	ldi	r24, 0x00	; 0
 888:	90 e0       	ldi	r25, 0x00	; 0
 88a:	33 d1       	rcall	.+614    	; 0xaf2 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(DUMMY_READ);
 88c:	80 e0       	ldi	r24, 0x00	; 0
 88e:	90 e0       	ldi	r25, 0x00	; 0
 890:	30 d1       	rcall	.+608    	; 0xaf2 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(DUMMY_READ);
 892:	80 e0       	ldi	r24, 0x00	; 0
 894:	90 e0       	ldi	r25, 0x00	; 0
 896:	2d d1       	rcall	.+602    	; 0xaf2 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(DUMMY_READ);
 898:	80 e0       	ldi	r24, 0x00	; 0
 89a:	90 e0       	ldi	r25, 0x00	; 0
 89c:	2a d1       	rcall	.+596    	; 0xaf2 <spiIMU_write_read>
 89e:	8f e8       	ldi	r24, 0x8F	; 143
 8a0:	91 e0       	ldi	r25, 0x01	; 1
 8a2:	01 97       	sbiw	r24, 0x01	; 1
 8a4:	f1 f7       	brne	.-4      	; 0x8a2 <zeroSensor+0x66>
 8a6:	00 c0       	rjmp	.+0      	; 0x8a8 <zeroSensor+0x6c>
 8a8:	00 00       	nop
	

	_delay_us(50);
	dummy_read = spiIMU_write_read(WRITE_COMMAND);
 8aa:	81 e0       	ldi	r24, 0x01	; 1
 8ac:	90 e0       	ldi	r25, 0x00	; 0
 8ae:	21 d1       	rcall	.+578    	; 0xaf2 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(SET_MAG_REF);
 8b0:	80 eb       	ldi	r24, 0xB0	; 176
 8b2:	90 e0       	ldi	r25, 0x00	; 0
 8b4:	1e d1       	rcall	.+572    	; 0xaf2 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(DUMMY_READ);
 8b6:	80 e0       	ldi	r24, 0x00	; 0
 8b8:	90 e0       	ldi	r25, 0x00	; 0
 8ba:	1b d1       	rcall	.+566    	; 0xaf2 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(DUMMY_READ);
 8bc:	80 e0       	ldi	r24, 0x00	; 0
 8be:	90 e0       	ldi	r25, 0x00	; 0
 8c0:	18 d1       	rcall	.+560    	; 0xaf2 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(DUMMY_READ);
 8c2:	80 e0       	ldi	r24, 0x00	; 0
 8c4:	90 e0       	ldi	r25, 0x00	; 0
 8c6:	15 d1       	rcall	.+554    	; 0xaf2 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(DUMMY_READ);
 8c8:	80 e0       	ldi	r24, 0x00	; 0
 8ca:	90 e0       	ldi	r25, 0x00	; 0
 8cc:	12 d1       	rcall	.+548    	; 0xaf2 <spiIMU_write_read>
 8ce:	8f e8       	ldi	r24, 0x8F	; 143
 8d0:	91 e0       	ldi	r25, 0x01	; 1
 8d2:	01 97       	sbiw	r24, 0x01	; 1
 8d4:	f1 f7       	brne	.-4      	; 0x8d2 <zeroSensor+0x96>
 8d6:	00 c0       	rjmp	.+0      	; 0x8d8 <zeroSensor+0x9c>
 8d8:	00 00       	nop
	
	_delay_us(50);
	dummy_read = spiIMU_write_read(WRITE_COMMAND);
 8da:	81 e0       	ldi	r24, 0x01	; 1
 8dc:	90 e0       	ldi	r25, 0x00	; 0
 8de:	09 d1       	rcall	.+530    	; 0xaf2 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(UM6_RESET_EKF);
 8e0:	8d ea       	ldi	r24, 0xAD	; 173
 8e2:	90 e0       	ldi	r25, 0x00	; 0
 8e4:	06 d1       	rcall	.+524    	; 0xaf2 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(DUMMY_READ);
 8e6:	80 e0       	ldi	r24, 0x00	; 0
 8e8:	90 e0       	ldi	r25, 0x00	; 0
 8ea:	03 d1       	rcall	.+518    	; 0xaf2 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(DUMMY_READ);
 8ec:	80 e0       	ldi	r24, 0x00	; 0
 8ee:	90 e0       	ldi	r25, 0x00	; 0
 8f0:	00 d1       	rcall	.+512    	; 0xaf2 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(DUMMY_READ);
 8f2:	80 e0       	ldi	r24, 0x00	; 0
 8f4:	90 e0       	ldi	r25, 0x00	; 0
 8f6:	fd d0       	rcall	.+506    	; 0xaf2 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(DUMMY_READ);
 8f8:	80 e0       	ldi	r24, 0x00	; 0
 8fa:	90 e0       	ldi	r25, 0x00	; 0
 8fc:	fa d0       	rcall	.+500    	; 0xaf2 <spiIMU_write_read>
	

	PORTF.OUTSET = PIN4_bm;
 8fe:	1d 83       	std	Y+5, r17	; 0x05
	
	return 1;
	
}
 900:	81 e0       	ldi	r24, 0x01	; 1
 902:	df 91       	pop	r29
 904:	cf 91       	pop	r28
 906:	1f 91       	pop	r17
 908:	08 95       	ret

0000090a <initSystem>:
  INPUT:
  OUTPUT:
  DISCRIPTION:  Do all the pre control loop set up tasks
*********************************************************************************************************** */
uint8_t initSystem()
{
 90a:	cf 93       	push	r28
 90c:	df 93       	push	r29
	PORTA.DIRSET = 0xFF;			//  LEDS
 90e:	c0 e0       	ldi	r28, 0x00	; 0
 910:	d6 e0       	ldi	r29, 0x06	; 6
 912:	8f ef       	ldi	r24, 0xFF	; 255
 914:	89 83       	std	Y+1, r24	; 0x01
	sei();
 916:	78 94       	sei
	initUART();
 918:	5f d1       	rcall	.+702    	; 0xbd8 <initUART>
	spi_set_up();
 91a:	f8 d0       	rcall	.+496    	; 0xb0c <spi_set_up>
	intPID_gains();
 91c:	9a dd       	rcall	.-1228   	; 0x452 <intPID_gains>
	zeroSensor();
 91e:	8e df       	rcall	.-228    	; 0x83c <zeroSensor>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 920:	2f ef       	ldi	r18, 0xFF	; 255
 922:	8f e4       	ldi	r24, 0x4F	; 79
 924:	93 ec       	ldi	r25, 0xC3	; 195
 926:	21 50       	subi	r18, 0x01	; 1
 928:	80 40       	sbci	r24, 0x00	; 0
 92a:	90 40       	sbci	r25, 0x00	; 0
 92c:	e1 f7       	brne	.-8      	; 0x926 <initSystem+0x1c>
 92e:	00 c0       	rjmp	.+0      	; 0x930 <initSystem+0x26>
 930:	00 00       	nop
	_delay_ms(2000);
	zeroSensor();
 932:	84 df       	rcall	.-248    	; 0x83c <zeroSensor>
	PORTA.DIRSET = 0x00;			//  LEDS
 934:	19 82       	std	Y+1, r1	; 0x01
	return 1;

}
 936:	81 e0       	ldi	r24, 0x01	; 1
 938:	df 91       	pop	r29
 93a:	cf 91       	pop	r28
 93c:	08 95       	ret

0000093e <main>:
OUTPUT:
DISCRIPTION: Main is used for set up and then just an infinite loop
*********************************************************************************************************** */
int main()
{
		PORTA.OUTTGL = 0x0F;
 93e:	8f e0       	ldi	r24, 0x0F	; 15
 940:	e0 e0       	ldi	r30, 0x00	; 0
 942:	f6 e0       	ldi	r31, 0x06	; 6
 944:	87 83       	std	Z+7, r24	; 0x07
		systemState = SYSTEM_STATE_STARTUP;
 946:	10 92 00 20 	sts	0x2000, r1
		init32MHzClock();
 94a:	59 df       	rcall	.-334    	; 0x7fe <init32MHzClock>
		intiLoopTimer();
 94c:	66 df       	rcall	.-308    	; 0x81a <intiLoopTimer>
		initSystem();
 94e:	dd df       	rcall	.-70     	; 0x90a <initSystem>

		while(1)
		{
			nop();
 950:	00 00       	nop
 952:	fe cf       	rjmp	.-4      	; 0x950 <main+0x12>

00000954 <State>:
INPUT:
OUTPUT:
DISCRIPTION:   Determine what to do based on systemState.  Used to initializes and arm the quad.
*********************************************************************************************************** */
void State()
{
 954:	1f 93       	push	r17
 956:	cf 93       	push	r28
 958:	df 93       	push	r29
	
	//sendUM6_Data();
	switch(systemState)
 95a:	80 91 00 20 	lds	r24, 0x2000
 95e:	82 30       	cpi	r24, 0x02	; 2
 960:	69 f1       	breq	.+90     	; 0x9bc <State+0x68>
 962:	30 f4       	brcc	.+12     	; 0x970 <State+0x1c>
 964:	88 23       	and	r24, r24
 966:	59 f0       	breq	.+22     	; 0x97e <State+0x2a>
 968:	81 30       	cpi	r24, 0x01	; 1
 96a:	09 f0       	breq	.+2      	; 0x96e <State+0x1a>
 96c:	7b c0       	rjmp	.+246    	; 0xa64 <State+0x110>
 96e:	15 c0       	rjmp	.+42     	; 0x99a <State+0x46>
 970:	84 30       	cpi	r24, 0x04	; 4
 972:	09 f4       	brne	.+2      	; 0x976 <State+0x22>
 974:	41 c0       	rjmp	.+130    	; 0x9f8 <State+0xa4>
 976:	85 30       	cpi	r24, 0x05	; 5
 978:	09 f0       	breq	.+2      	; 0x97c <State+0x28>
 97a:	74 c0       	rjmp	.+232    	; 0xa64 <State+0x110>
 97c:	44 c0       	rjmp	.+136    	; 0xa06 <State+0xb2>
	{
		case SYSTEM_STATE_STARTUP:
			PORTA.OUTTGL = 0x00;
 97e:	e0 e0       	ldi	r30, 0x00	; 0
 980:	f6 e0       	ldi	r31, 0x06	; 6
 982:	17 82       	std	Z+7, r1	; 0x07
			PORTA.OUTTGL = PIN2_bm;
 984:	84 e0       	ldi	r24, 0x04	; 4
 986:	87 83       	std	Z+7, r24	; 0x07
			if (initSystem() ==  1)
 988:	c0 df       	rcall	.-128    	; 0x90a <initSystem>
 98a:	81 30       	cpi	r24, 0x01	; 1
 98c:	11 f4       	brne	.+4      	; 0x992 <State+0x3e>
			{
				systemState = SYSTEM_ZERO;
 98e:	80 93 00 20 	sts	0x2000, r24
			}
			PORTA.OUTTGL = 0x00;
 992:	e0 e0       	ldi	r30, 0x00	; 0
 994:	f6 e0       	ldi	r31, 0x06	; 6
 996:	17 82       	std	Z+7, r1	; 0x07
			break;
 998:	65 c0       	rjmp	.+202    	; 0xa64 <State+0x110>
		
		case SYSTEM_ZERO:
			// read commands from the PC and zero the system as necessary
			// PC transaction, read in command and send out sensor data
			UpdateEulerAngles();
 99a:	9d de       	rcall	.-710    	; 0x6d6 <UpdateEulerAngles>
		
			PORTA.OUTTGL = PIN3_bm;
 99c:	88 e0       	ldi	r24, 0x08	; 8
 99e:	e0 e0       	ldi	r30, 0x00	; 0
 9a0:	f6 e0       	ldi	r31, 0x06	; 6
 9a2:	87 83       	std	Z+7, r24	; 0x07
			//  get the last command sent form the PC, either zero the IMU or get ready to arm the system
			if (WriteToPC_SPI() == SYSTEM_ZERO)
 9a4:	7f dd       	rcall	.-1282   	; 0x4a4 <WriteToPC_SPI>
 9a6:	01 97       	sbiw	r24, 0x01	; 1
 9a8:	09 f4       	brne	.+2      	; 0x9ac <State+0x58>
			{
				zeroSensor();
 9aa:	48 df       	rcall	.-368    	; 0x83c <zeroSensor>
			}
			
			if (WriteToPC_SPI() == SYSTEM_ARM)
 9ac:	7b dd       	rcall	.-1290   	; 0x4a4 <WriteToPC_SPI>
 9ae:	02 97       	sbiw	r24, 0x02	; 2
 9b0:	09 f0       	breq	.+2      	; 0x9b4 <State+0x60>
 9b2:	58 c0       	rjmp	.+176    	; 0xa64 <State+0x110>
			{
				systemState = SYSTEM_ARM;
 9b4:	82 e0       	ldi	r24, 0x02	; 2
 9b6:	80 93 00 20 	sts	0x2000, r24
 9ba:	54 c0       	rjmp	.+168    	; 0xa64 <State+0x110>
		
			break;
		
		case SYSTEM_ARM:
			//Arm the system by enabling the PWM
			PORTA.OUTTGL = 0x00;
 9bc:	c0 e0       	ldi	r28, 0x00	; 0
 9be:	d6 e0       	ldi	r29, 0x06	; 6
 9c0:	1f 82       	std	Y+7, r1	; 0x07
			PORTA.OUTTGL = PIN2_bm;
 9c2:	14 e0       	ldi	r17, 0x04	; 4
 9c4:	1f 83       	std	Y+7, r17	; 0x07
			initPWM();
 9c6:	d0 dc       	rcall	.-1632   	; 0x368 <initPWM>
			systemState = SYSTEM_STATE_FLY;
 9c8:	10 93 00 20 	sts	0x2000, r17
			PORTA.OUTTGL = PIN2_bm;
 9cc:	1f 83       	std	Y+7, r17	; 0x07
 9ce:	2f ef       	ldi	r18, 0xFF	; 255
 9d0:	37 ea       	ldi	r19, 0xA7	; 167
 9d2:	81 e6       	ldi	r24, 0x61	; 97
 9d4:	21 50       	subi	r18, 0x01	; 1
 9d6:	30 40       	sbci	r19, 0x00	; 0
 9d8:	80 40       	sbci	r24, 0x00	; 0
 9da:	e1 f7       	brne	.-8      	; 0x9d4 <State+0x80>
 9dc:	00 c0       	rjmp	.+0      	; 0x9de <State+0x8a>
 9de:	00 00       	nop
			_delay_ms(1000);
			PORTA.OUTTGL = PIN2_bm;
 9e0:	1f 83       	std	Y+7, r17	; 0x07
 9e2:	9f ef       	ldi	r25, 0xFF	; 255
 9e4:	27 ea       	ldi	r18, 0xA7	; 167
 9e6:	31 e6       	ldi	r19, 0x61	; 97
 9e8:	91 50       	subi	r25, 0x01	; 1
 9ea:	20 40       	sbci	r18, 0x00	; 0
 9ec:	30 40       	sbci	r19, 0x00	; 0
 9ee:	e1 f7       	brne	.-8      	; 0x9e8 <State+0x94>
 9f0:	00 c0       	rjmp	.+0      	; 0x9f2 <State+0x9e>
 9f2:	00 00       	nop
			_delay_ms(1000);
			PORTA.OUTTGL = PIN2_bm;
 9f4:	1f 83       	std	Y+7, r17	; 0x07
			break;
 9f6:	36 c0       	rjmp	.+108    	; 0xa64 <State+0x110>
		
		case SYSTEM_STATE_FLY:
			// run the control loop
			PORTA.OUTTGL = 0x00;
 9f8:	e0 e0       	ldi	r30, 0x00	; 0
 9fa:	f6 e0       	ldi	r31, 0x06	; 6
 9fc:	17 82       	std	Z+7, r1	; 0x07
			PORTA.OUTTGL = PIN3_bm;
 9fe:	88 e0       	ldi	r24, 0x08	; 8
 a00:	87 83       	std	Z+7, r24	; 0x07
			ControlLoop();
 a02:	e3 de       	rcall	.-570    	; 0x7ca <ControlLoop>
			break;
 a04:	2f c0       	rjmp	.+94     	; 0xa64 <State+0x110>
		
		case SYSTEM_DISARM:
			
			DisablePWM();
 a06:	da dc       	rcall	.-1612   	; 0x3bc <DisablePWM>
			PORTA.OUTTGL = PIN2_bm;
 a08:	e0 e0       	ldi	r30, 0x00	; 0
 a0a:	f6 e0       	ldi	r31, 0x06	; 6
 a0c:	84 e0       	ldi	r24, 0x04	; 4
 a0e:	87 83       	std	Z+7, r24	; 0x07
 a10:	9f ef       	ldi	r25, 0xFF	; 255
 a12:	27 ea       	ldi	r18, 0xA7	; 167
 a14:	31 e6       	ldi	r19, 0x61	; 97
 a16:	91 50       	subi	r25, 0x01	; 1
 a18:	20 40       	sbci	r18, 0x00	; 0
 a1a:	30 40       	sbci	r19, 0x00	; 0
 a1c:	e1 f7       	brne	.-8      	; 0xa16 <State+0xc2>
 a1e:	00 c0       	rjmp	.+0      	; 0xa20 <State+0xcc>
 a20:	00 00       	nop
			_delay_ms(1000);
			PORTA.OUTTGL = PIN2_bm;
 a22:	87 83       	std	Z+7, r24	; 0x07
 a24:	9f ef       	ldi	r25, 0xFF	; 255
 a26:	27 ea       	ldi	r18, 0xA7	; 167
 a28:	31 e6       	ldi	r19, 0x61	; 97
 a2a:	91 50       	subi	r25, 0x01	; 1
 a2c:	20 40       	sbci	r18, 0x00	; 0
 a2e:	30 40       	sbci	r19, 0x00	; 0
 a30:	e1 f7       	brne	.-8      	; 0xa2a <State+0xd6>
 a32:	00 c0       	rjmp	.+0      	; 0xa34 <State+0xe0>
 a34:	00 00       	nop
			_delay_ms(1000);
			PORTA.OUTTGL = PIN2_bm;
 a36:	87 83       	std	Z+7, r24	; 0x07
 a38:	9f ef       	ldi	r25, 0xFF	; 255
 a3a:	27 ea       	ldi	r18, 0xA7	; 167
 a3c:	31 e6       	ldi	r19, 0x61	; 97
 a3e:	91 50       	subi	r25, 0x01	; 1
 a40:	20 40       	sbci	r18, 0x00	; 0
 a42:	30 40       	sbci	r19, 0x00	; 0
 a44:	e1 f7       	brne	.-8      	; 0xa3e <State+0xea>
 a46:	00 c0       	rjmp	.+0      	; 0xa48 <State+0xf4>
 a48:	00 00       	nop
			_delay_ms(1000);
			PORTA.OUTTGL = PIN2_bm;
 a4a:	87 83       	std	Z+7, r24	; 0x07
 a4c:	9f ef       	ldi	r25, 0xFF	; 255
 a4e:	27 ea       	ldi	r18, 0xA7	; 167
 a50:	31 e6       	ldi	r19, 0x61	; 97
 a52:	91 50       	subi	r25, 0x01	; 1
 a54:	20 40       	sbci	r18, 0x00	; 0
 a56:	30 40       	sbci	r19, 0x00	; 0
 a58:	e1 f7       	brne	.-8      	; 0xa52 <State+0xfe>
 a5a:	00 c0       	rjmp	.+0      	; 0xa5c <State+0x108>
 a5c:	00 00       	nop
			_delay_ms(1000);
			PORTA.OUTTGL = PIN2_bm;
 a5e:	87 83       	std	Z+7, r24	; 0x07
			systemState = SYSTEM_STATE_STARTUP;
 a60:	10 92 00 20 	sts	0x2000, r1
		
		default:
			break;
		
	}			// end case
}
 a64:	df 91       	pop	r29
 a66:	cf 91       	pop	r28
 a68:	1f 91       	pop	r17
 a6a:	08 95       	ret

00000a6c <__vector_77>:
  INPUT:
  OUTPUT:
  DISCRIPTION:   Interrupt vector
*********************************************************************************************************** */
ISR(TCD0_OVF_vect)
{
 a6c:	1f 92       	push	r1
 a6e:	0f 92       	push	r0
 a70:	0f b6       	in	r0, 0x3f	; 63
 a72:	0f 92       	push	r0
 a74:	11 24       	eor	r1, r1
 a76:	08 b6       	in	r0, 0x38	; 56
 a78:	0f 92       	push	r0
 a7a:	18 be       	out	0x38, r1	; 56
 a7c:	09 b6       	in	r0, 0x39	; 57
 a7e:	0f 92       	push	r0
 a80:	19 be       	out	0x39, r1	; 57
 a82:	0b b6       	in	r0, 0x3b	; 59
 a84:	0f 92       	push	r0
 a86:	1b be       	out	0x3b, r1	; 59
 a88:	2f 93       	push	r18
 a8a:	3f 93       	push	r19
 a8c:	4f 93       	push	r20
 a8e:	5f 93       	push	r21
 a90:	6f 93       	push	r22
 a92:	7f 93       	push	r23
 a94:	8f 93       	push	r24
 a96:	9f 93       	push	r25
 a98:	af 93       	push	r26
 a9a:	bf 93       	push	r27
 a9c:	ef 93       	push	r30
 a9e:	ff 93       	push	r31
	
	//ControlLoop();
	 State();
 aa0:	59 df       	rcall	.-334    	; 0x954 <State>
	TCD0.CNT = 0;
 aa2:	e0 e0       	ldi	r30, 0x00	; 0
 aa4:	f9 e0       	ldi	r31, 0x09	; 9
 aa6:	10 a2       	std	Z+32, r1	; 0x20
 aa8:	11 a2       	std	Z+33, r1	; 0x21
	
}
 aaa:	ff 91       	pop	r31
 aac:	ef 91       	pop	r30
 aae:	bf 91       	pop	r27
 ab0:	af 91       	pop	r26
 ab2:	9f 91       	pop	r25
 ab4:	8f 91       	pop	r24
 ab6:	7f 91       	pop	r23
 ab8:	6f 91       	pop	r22
 aba:	5f 91       	pop	r21
 abc:	4f 91       	pop	r20
 abe:	3f 91       	pop	r19
 ac0:	2f 91       	pop	r18
 ac2:	0f 90       	pop	r0
 ac4:	0b be       	out	0x3b, r0	; 59
 ac6:	0f 90       	pop	r0
 ac8:	09 be       	out	0x39, r0	; 57
 aca:	0f 90       	pop	r0
 acc:	08 be       	out	0x38, r0	; 56
 ace:	0f 90       	pop	r0
 ad0:	0f be       	out	0x3f, r0	; 63
 ad2:	0f 90       	pop	r0
 ad4:	1f 90       	pop	r1
 ad6:	18 95       	reti

00000ad8 <spiPC_write_read>:
			  Read the data from the data register, this was on MISO
*********************************************************************************************************** */

unsigned char spiPC_write_read(unsigned char spi_data1)
{
	SPIE.DATA = spi_data1;
 ad8:	e0 ec       	ldi	r30, 0xC0	; 192
 ada:	fa e0       	ldi	r31, 0x0A	; 10
 adc:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIE.STATUS & SPI_IF_bm)); // Wait until the data transfer is complete
 ade:	82 81       	ldd	r24, Z+2	; 0x02
 ae0:	88 23       	and	r24, r24
 ae2:	ec f7       	brge	.-6      	; 0xade <spiPC_write_read+0x6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 ae4:	80 e4       	ldi	r24, 0x40	; 64
 ae6:	8a 95       	dec	r24
 ae8:	f1 f7       	brne	.-4      	; 0xae6 <spiPC_write_read+0xe>
	_delay_us(6);
	return SPIE.DATA;
 aea:	e0 ec       	ldi	r30, 0xC0	; 192
 aec:	fa e0       	ldi	r31, 0x0A	; 10
 aee:	83 81       	ldd	r24, Z+3	; 0x03
}
 af0:	08 95       	ret

00000af2 <spiIMU_write_read>:
			  Wait until the interrupt flag is set	
			  Read the data from the data register, this was on MISO
*********************************************************************************************************** */
unsigned char spiIMU_write_read(unsigned char spi_data)
{
	SPIF.DATA = spi_data;
 af2:	e0 ec       	ldi	r30, 0xC0	; 192
 af4:	fb e0       	ldi	r31, 0x0B	; 11
 af6:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIF.STATUS & SPI_IF_bm)); // Wait until the data transfer is complete
 af8:	82 81       	ldd	r24, Z+2	; 0x02
 afa:	88 23       	and	r24, r24
 afc:	ec f7       	brge	.-6      	; 0xaf8 <spiIMU_write_read+0x6>
 afe:	80 e2       	ldi	r24, 0x20	; 32
 b00:	8a 95       	dec	r24
 b02:	f1 f7       	brne	.-4      	; 0xb00 <spiIMU_write_read+0xe>
	_delay_us(3);
	return SPIF.DATA;
 b04:	e0 ec       	ldi	r30, 0xC0	; 192
 b06:	fb e0       	ldi	r31, 0x0B	; 11
 b08:	83 81       	ldd	r24, Z+3	; 0x03
}
 b0a:	08 95       	ret

00000b0c <spi_set_up>:
DISCRIPTION:   /* Initialize SPI master on port F for the IMU communication. */
			   /* Initialize SPI master on port F for the PC communication
*********************************************************************************************************** */
	
void spi_set_up()
{
 b0c:	af 92       	push	r10
 b0e:	cf 92       	push	r12
 b10:	ef 92       	push	r14
 b12:	0f 93       	push	r16
 b14:	cf 93       	push	r28
 b16:	df 93       	push	r29
	/* Initialize SPI master on port F for the IMU communication. */
	/* Init SS pin as output with wired AND and pull-up. */
	//*************************************************************
	PORTF.DIRSET = PIN4_bm;
 b18:	e0 ea       	ldi	r30, 0xA0	; 160
 b1a:	f6 e0       	ldi	r31, 0x06	; 6
 b1c:	c0 e1       	ldi	r28, 0x10	; 16
 b1e:	c1 83       	std	Z+1, r28	; 0x01
	PORTF.PIN4CTRL = PORT_OPC_WIREDANDPULL_gc;
 b20:	d8 e3       	ldi	r29, 0x38	; 56
 b22:	d4 8b       	std	Z+20, r29	; 0x14

	/* Set SS output to high. (No slave addressed). */
	PORTF.OUTSET = PIN4_bm;
 b24:	c5 83       	std	Z+5, r28	; 0x05

	/* Initialize SPI master on port F for the IMU communication. */
	SPI_MasterInit(&spiMasterF,
 b26:	a1 2c       	mov	r10, r1
 b28:	c1 2c       	mov	r12, r1
 b2a:	e1 2c       	mov	r14, r1
 b2c:	00 e0       	ldi	r16, 0x00	; 0
 b2e:	20 e0       	ldi	r18, 0x00	; 0
 b30:	40 ea       	ldi	r20, 0xA0	; 160
 b32:	56 e0       	ldi	r21, 0x06	; 6
 b34:	60 ec       	ldi	r22, 0xC0	; 192
 b36:	7b e0       	ldi	r23, 0x0B	; 11
 b38:	8e e2       	ldi	r24, 0x2E	; 46
 b3a:	91 e2       	ldi	r25, 0x21	; 33
 b3c:	1d d0       	rcall	.+58     	; 0xb78 <SPI_MasterInit>
		SPI_MODE_0_gc,							//The UM6 SPI clock (SCK) is active high, with data clocked in on the first rising edge1
		SPI_INTLVL_OFF_gc,
		false,									// false to double clock mode
		SPI_PRESCALER_DIV4_gc);					//32mHz /128 = 250kHz  MAX rate is 400kHz but there is not prescaler

		SPIF.DATA = 0x00;						// init SPI data register
 b3e:	e0 ec       	ldi	r30, 0xC0	; 192
 b40:	fb e0       	ldi	r31, 0x0B	; 11
 b42:	13 82       	std	Z+3, r1	; 0x03
		
		
		/* Initialize SPI master on port F for the PC communication */
		//*************************************************************
		/* Init SS pin as output with wired AND and pull-up. */
		PORTE.DIRSET = PIN4_bm;
 b44:	e0 e8       	ldi	r30, 0x80	; 128
 b46:	f6 e0       	ldi	r31, 0x06	; 6
 b48:	c1 83       	std	Z+1, r28	; 0x01
		PORTE.PIN4CTRL = PORT_OPC_WIREDANDPULL_gc;
 b4a:	d4 8b       	std	Z+20, r29	; 0x14

		/* Set SS output to high. (No slave addressed). */
		PORTE.OUTSET = PIN4_bm;
 b4c:	c5 83       	std	Z+5, r28	; 0x05

		SPI_MasterInit(&spiMasterE,
 b4e:	68 94       	set
 b50:	aa 24       	eor	r10, r10
 b52:	a1 f8       	bld	r10, 1
 b54:	20 e0       	ldi	r18, 0x00	; 0
 b56:	40 e8       	ldi	r20, 0x80	; 128
 b58:	56 e0       	ldi	r21, 0x06	; 6
 b5a:	60 ec       	ldi	r22, 0xC0	; 192
 b5c:	7a e0       	ldi	r23, 0x0A	; 10
 b5e:	85 e3       	ldi	r24, 0x35	; 53
 b60:	91 e2       	ldi	r25, 0x21	; 33
 b62:	0a d0       	rcall	.+20     	; 0xb78 <SPI_MasterInit>
		false,
		SPI_MODE_0_gc,							//The UM6 SPI clock (SCK) is active high, with data clocked in on the first rising edge1
		SPI_INTLVL_OFF_gc,
		false,									// false to double clock mode
		SPI_PRESCALER_DIV64_gc);				//32mHz /64 = 500,000 bps
		SPIE.DATA = 0x00;						// init SPI data register
 b64:	e0 ec       	ldi	r30, 0xC0	; 192
 b66:	fa e0       	ldi	r31, 0x0A	; 10
 b68:	13 82       	std	Z+3, r1	; 0x03

}
 b6a:	df 91       	pop	r29
 b6c:	cf 91       	pop	r28
 b6e:	0f 91       	pop	r16
 b70:	ef 90       	pop	r14
 b72:	cf 90       	pop	r12
 b74:	af 90       	pop	r10
 b76:	08 95       	ret

00000b78 <SPI_MasterInit>:
                    bool lsbFirst,
                    SPI_MODE_t mode,
                    SPI_INTLVL_t intLevel,
                    bool clk2x,
                    SPI_PRESCALER_t clockDivision)
{
 b78:	af 92       	push	r10
 b7a:	cf 92       	push	r12
 b7c:	ef 92       	push	r14
 b7e:	0f 93       	push	r16
 b80:	fc 01       	movw	r30, r24
	spi->module         = module;
 b82:	60 83       	st	Z, r22
 b84:	71 83       	std	Z+1, r23	; 0x01
	spi->port           = port;
 b86:	42 83       	std	Z+2, r20	; 0x02
 b88:	53 83       	std	Z+3, r21	; 0x03
	spi->interrupted    = false;
 b8a:	14 82       	std	Z+4, r1	; 0x04

	spi->module->CTRL   = clockDivision |                  /* SPI prescaler. */
 b8c:	cc 20       	and	r12, r12
 b8e:	11 f0       	breq	.+4      	; 0xb94 <SPI_MasterInit+0x1c>
 b90:	90 e8       	ldi	r25, 0x80	; 128
 b92:	01 c0       	rjmp	.+2      	; 0xb96 <SPI_MasterInit+0x1e>
 b94:	90 e0       	ldi	r25, 0x00	; 0
 b96:	22 23       	and	r18, r18
 b98:	11 f0       	breq	.+4      	; 0xb9e <SPI_MasterInit+0x26>
 b9a:	80 e2       	ldi	r24, 0x20	; 32
 b9c:	01 c0       	rjmp	.+2      	; 0xba0 <SPI_MasterInit+0x28>
 b9e:	80 e0       	ldi	r24, 0x00	; 0
 ba0:	00 65       	ori	r16, 0x50	; 80
 ba2:	0a 29       	or	r16, r10
 ba4:	09 2b       	or	r16, r25
 ba6:	08 2b       	or	r16, r24
 ba8:	db 01       	movw	r26, r22
 baa:	0c 93       	st	X, r16
	                      (lsbFirst ? SPI_DORD_bm  : 0) |  /* Data order. */
	                      SPI_MASTER_bm |                  /* SPI master. */
	                      mode;                            /* SPI mode. */

	/* Interrupt level. */
	spi->module->INTCTRL = intLevel;
 bac:	a0 81       	ld	r26, Z
 bae:	b1 81       	ldd	r27, Z+1	; 0x01
 bb0:	11 96       	adiw	r26, 0x01	; 1
 bb2:	ec 92       	st	X, r14

	/* No assigned data packet. */
	spi->dataPacket = NULL;
 bb4:	15 82       	std	Z+5, r1	; 0x05
 bb6:	16 82       	std	Z+6, r1	; 0x06

 	/* MOSI and SCK as output. */
	spi->port->DIRSET  = SPI_MOSI_bm | SPI_SCK_bm;
 bb8:	02 80       	ldd	r0, Z+2	; 0x02
 bba:	f3 81       	ldd	r31, Z+3	; 0x03
 bbc:	e0 2d       	mov	r30, r0
 bbe:	80 ea       	ldi	r24, 0xA0	; 160
 bc0:	81 83       	std	Z+1, r24	; 0x01
}
 bc2:	0f 91       	pop	r16
 bc4:	ef 90       	pop	r14
 bc6:	cf 90       	pop	r12
 bc8:	af 90       	pop	r10
 bca:	08 95       	ret

00000bcc <TC0_ConfigClockSource>:
 *  \param tc              Timer/Counter module instance.
 *  \param clockSelection  Timer/Counter clock source setting.
 */
void TC0_ConfigClockSource( volatile TC0_t * tc, TC_CLKSEL_t clockSelection )
{
	tc->CTRLA = ( tc->CTRLA & ~TC0_CLKSEL_gm ) | clockSelection;
 bcc:	fc 01       	movw	r30, r24
 bce:	20 81       	ld	r18, Z
 bd0:	20 7f       	andi	r18, 0xF0	; 240
 bd2:	62 2b       	or	r22, r18
 bd4:	60 83       	st	Z, r22
 bd6:	08 95       	ret

00000bd8 <initUART>:
void initUART()
{
	
	//  XBEE on USARTD1
	/* PD6 (RXD1) input*/
	PORTD.DIRCLR = PIN6_bm;
 bd8:	e0 e6       	ldi	r30, 0x60	; 96
 bda:	f6 e0       	ldi	r31, 0x06	; 6
 bdc:	90 e4       	ldi	r25, 0x40	; 64
 bde:	92 83       	std	Z+2, r25	; 0x02
	/* PD7 (TXD1) as output. */
	PORTD.DIRSET = PIN7_bm;
 be0:	80 e8       	ldi	r24, 0x80	; 128
 be2:	81 83       	std	Z+1, r24	; 0x01
	
	
	//  IMU on USARTC1
	/* PC6 (RXD1) input*/
	PORTC.DIRCLR = PIN6_bm;
 be4:	e0 e4       	ldi	r30, 0x40	; 64
 be6:	f6 e0       	ldi	r31, 0x06	; 6
 be8:	92 83       	std	Z+2, r25	; 0x02
	/* PD7 (TXD1) as output. */
	PORTC.DIRSET = PIN7_bm;
 bea:	81 83       	std	Z+1, r24	; 0x01
	
	USART_Format_Set(&XBEE_USART, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, true);
 bec:	e0 eb       	ldi	r30, 0xB0	; 176
 bee:	f9 e0       	ldi	r31, 0x09	; 9
 bf0:	8b e0       	ldi	r24, 0x0B	; 11
 bf2:	85 83       	std	Z+5, r24	; 0x05
	USART_Baudrate_Set(&XBEE_USART, 1047 , -6);			// set for 32MHZ and 115200
 bf4:	87 e1       	ldi	r24, 0x17	; 23
 bf6:	86 83       	std	Z+6, r24	; 0x06
 bf8:	84 ea       	ldi	r24, 0xA4	; 164
 bfa:	87 83       	std	Z+7, r24	; 0x07
	/* Enable both RX and TX. */
	USART_Rx_Enable(&XBEE_USART);
 bfc:	84 81       	ldd	r24, Z+4	; 0x04
 bfe:	80 61       	ori	r24, 0x10	; 16
 c00:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(&XBEE_USART);
 c02:	84 81       	ldd	r24, Z+4	; 0x04
 c04:	88 60       	ori	r24, 0x08	; 8
 c06:	84 83       	std	Z+4, r24	; 0x04
 c08:	08 95       	ret

00000c0a <__divmodhi4>:
 c0a:	97 fb       	bst	r25, 7
 c0c:	07 2e       	mov	r0, r23
 c0e:	16 f4       	brtc	.+4      	; 0xc14 <__divmodhi4+0xa>
 c10:	00 94       	com	r0
 c12:	06 d0       	rcall	.+12     	; 0xc20 <__divmodhi4_neg1>
 c14:	77 fd       	sbrc	r23, 7
 c16:	08 d0       	rcall	.+16     	; 0xc28 <__divmodhi4_neg2>
 c18:	0b d0       	rcall	.+22     	; 0xc30 <__udivmodhi4>
 c1a:	07 fc       	sbrc	r0, 7
 c1c:	05 d0       	rcall	.+10     	; 0xc28 <__divmodhi4_neg2>
 c1e:	3e f4       	brtc	.+14     	; 0xc2e <__divmodhi4_exit>

00000c20 <__divmodhi4_neg1>:
 c20:	90 95       	com	r25
 c22:	81 95       	neg	r24
 c24:	9f 4f       	sbci	r25, 0xFF	; 255
 c26:	08 95       	ret

00000c28 <__divmodhi4_neg2>:
 c28:	70 95       	com	r23
 c2a:	61 95       	neg	r22
 c2c:	7f 4f       	sbci	r23, 0xFF	; 255

00000c2e <__divmodhi4_exit>:
 c2e:	08 95       	ret

00000c30 <__udivmodhi4>:
 c30:	aa 1b       	sub	r26, r26
 c32:	bb 1b       	sub	r27, r27
 c34:	51 e1       	ldi	r21, 0x11	; 17
 c36:	07 c0       	rjmp	.+14     	; 0xc46 <__udivmodhi4_ep>

00000c38 <__udivmodhi4_loop>:
 c38:	aa 1f       	adc	r26, r26
 c3a:	bb 1f       	adc	r27, r27
 c3c:	a6 17       	cp	r26, r22
 c3e:	b7 07       	cpc	r27, r23
 c40:	10 f0       	brcs	.+4      	; 0xc46 <__udivmodhi4_ep>
 c42:	a6 1b       	sub	r26, r22
 c44:	b7 0b       	sbc	r27, r23

00000c46 <__udivmodhi4_ep>:
 c46:	88 1f       	adc	r24, r24
 c48:	99 1f       	adc	r25, r25
 c4a:	5a 95       	dec	r21
 c4c:	a9 f7       	brne	.-22     	; 0xc38 <__udivmodhi4_loop>
 c4e:	80 95       	com	r24
 c50:	90 95       	com	r25
 c52:	bc 01       	movw	r22, r24
 c54:	cd 01       	movw	r24, r26
 c56:	08 95       	ret

00000c58 <_exit>:
 c58:	f8 94       	cli

00000c5a <__stop_program>:
 c5a:	ff cf       	rjmp	.-2      	; 0xc5a <__stop_program>
