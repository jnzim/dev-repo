
PSU_quadcopter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00802000  00000cac  00000d40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000189  00802006  00802006  00000d46  2**0
                  ALLOC
  3 .stab         00003c24  00000000  00000000  00000d48  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001067  00000000  00000000  0000496c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000059d3  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000368  00000000  00000000  00005a02  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005136  00000000  00000000  00005d6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001042  00000000  00000000  0000aea0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001fa4  00000000  00000000  0000bee2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000008cc  00000000  00000000  0000de88  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001bda  00000000  00000000  0000e754  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001af4  00000000  00000000  0001032e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000002c8  00000000  00000000  00011e22  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	f9 c0       	rjmp	.+498    	; 0x1f4 <__ctors_end>
   2:	00 00       	nop
   4:	1b c1       	rjmp	.+566    	; 0x23c <__bad_interrupt>
   6:	00 00       	nop
   8:	19 c1       	rjmp	.+562    	; 0x23c <__bad_interrupt>
   a:	00 00       	nop
   c:	17 c1       	rjmp	.+558    	; 0x23c <__bad_interrupt>
   e:	00 00       	nop
  10:	15 c1       	rjmp	.+554    	; 0x23c <__bad_interrupt>
  12:	00 00       	nop
  14:	13 c1       	rjmp	.+550    	; 0x23c <__bad_interrupt>
  16:	00 00       	nop
  18:	11 c1       	rjmp	.+546    	; 0x23c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	0f c1       	rjmp	.+542    	; 0x23c <__bad_interrupt>
  1e:	00 00       	nop
  20:	0d c1       	rjmp	.+538    	; 0x23c <__bad_interrupt>
  22:	00 00       	nop
  24:	0b c1       	rjmp	.+534    	; 0x23c <__bad_interrupt>
  26:	00 00       	nop
  28:	09 c1       	rjmp	.+530    	; 0x23c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	07 c1       	rjmp	.+526    	; 0x23c <__bad_interrupt>
  2e:	00 00       	nop
  30:	05 c1       	rjmp	.+522    	; 0x23c <__bad_interrupt>
  32:	00 00       	nop
  34:	03 c1       	rjmp	.+518    	; 0x23c <__bad_interrupt>
  36:	00 00       	nop
  38:	01 c1       	rjmp	.+514    	; 0x23c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	ff c0       	rjmp	.+510    	; 0x23c <__bad_interrupt>
  3e:	00 00       	nop
  40:	fd c0       	rjmp	.+506    	; 0x23c <__bad_interrupt>
  42:	00 00       	nop
  44:	fb c0       	rjmp	.+502    	; 0x23c <__bad_interrupt>
  46:	00 00       	nop
  48:	f9 c0       	rjmp	.+498    	; 0x23c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	f7 c0       	rjmp	.+494    	; 0x23c <__bad_interrupt>
  4e:	00 00       	nop
  50:	f5 c0       	rjmp	.+490    	; 0x23c <__bad_interrupt>
  52:	00 00       	nop
  54:	f3 c0       	rjmp	.+486    	; 0x23c <__bad_interrupt>
  56:	00 00       	nop
  58:	f1 c0       	rjmp	.+482    	; 0x23c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	ef c0       	rjmp	.+478    	; 0x23c <__bad_interrupt>
  5e:	00 00       	nop
  60:	ed c0       	rjmp	.+474    	; 0x23c <__bad_interrupt>
  62:	00 00       	nop
  64:	eb c0       	rjmp	.+470    	; 0x23c <__bad_interrupt>
  66:	00 00       	nop
  68:	e9 c0       	rjmp	.+466    	; 0x23c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	e7 c0       	rjmp	.+462    	; 0x23c <__bad_interrupt>
  6e:	00 00       	nop
  70:	e5 c0       	rjmp	.+458    	; 0x23c <__bad_interrupt>
  72:	00 00       	nop
  74:	e3 c0       	rjmp	.+454    	; 0x23c <__bad_interrupt>
  76:	00 00       	nop
  78:	e1 c0       	rjmp	.+450    	; 0x23c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	df c0       	rjmp	.+446    	; 0x23c <__bad_interrupt>
  7e:	00 00       	nop
  80:	dd c0       	rjmp	.+442    	; 0x23c <__bad_interrupt>
  82:	00 00       	nop
  84:	db c0       	rjmp	.+438    	; 0x23c <__bad_interrupt>
  86:	00 00       	nop
  88:	d9 c0       	rjmp	.+434    	; 0x23c <__bad_interrupt>
  8a:	00 00       	nop
  8c:	d7 c0       	rjmp	.+430    	; 0x23c <__bad_interrupt>
  8e:	00 00       	nop
  90:	d5 c0       	rjmp	.+426    	; 0x23c <__bad_interrupt>
  92:	00 00       	nop
  94:	d3 c0       	rjmp	.+422    	; 0x23c <__bad_interrupt>
  96:	00 00       	nop
  98:	d1 c0       	rjmp	.+418    	; 0x23c <__bad_interrupt>
  9a:	00 00       	nop
  9c:	cf c0       	rjmp	.+414    	; 0x23c <__bad_interrupt>
  9e:	00 00       	nop
  a0:	cd c0       	rjmp	.+410    	; 0x23c <__bad_interrupt>
  a2:	00 00       	nop
  a4:	cb c0       	rjmp	.+406    	; 0x23c <__bad_interrupt>
  a6:	00 00       	nop
  a8:	c9 c0       	rjmp	.+402    	; 0x23c <__bad_interrupt>
  aa:	00 00       	nop
  ac:	c7 c0       	rjmp	.+398    	; 0x23c <__bad_interrupt>
  ae:	00 00       	nop
  b0:	c5 c0       	rjmp	.+394    	; 0x23c <__bad_interrupt>
  b2:	00 00       	nop
  b4:	c3 c0       	rjmp	.+390    	; 0x23c <__bad_interrupt>
  b6:	00 00       	nop
  b8:	c1 c0       	rjmp	.+386    	; 0x23c <__bad_interrupt>
  ba:	00 00       	nop
  bc:	bf c0       	rjmp	.+382    	; 0x23c <__bad_interrupt>
  be:	00 00       	nop
  c0:	bd c0       	rjmp	.+378    	; 0x23c <__bad_interrupt>
  c2:	00 00       	nop
  c4:	bb c0       	rjmp	.+374    	; 0x23c <__bad_interrupt>
  c6:	00 00       	nop
  c8:	b9 c0       	rjmp	.+370    	; 0x23c <__bad_interrupt>
  ca:	00 00       	nop
  cc:	b7 c0       	rjmp	.+366    	; 0x23c <__bad_interrupt>
  ce:	00 00       	nop
  d0:	b5 c0       	rjmp	.+362    	; 0x23c <__bad_interrupt>
  d2:	00 00       	nop
  d4:	b3 c0       	rjmp	.+358    	; 0x23c <__bad_interrupt>
  d6:	00 00       	nop
  d8:	b1 c0       	rjmp	.+354    	; 0x23c <__bad_interrupt>
  da:	00 00       	nop
  dc:	af c0       	rjmp	.+350    	; 0x23c <__bad_interrupt>
  de:	00 00       	nop
  e0:	ad c0       	rjmp	.+346    	; 0x23c <__bad_interrupt>
  e2:	00 00       	nop
  e4:	ab c0       	rjmp	.+342    	; 0x23c <__bad_interrupt>
  e6:	00 00       	nop
  e8:	a9 c0       	rjmp	.+338    	; 0x23c <__bad_interrupt>
  ea:	00 00       	nop
  ec:	a7 c0       	rjmp	.+334    	; 0x23c <__bad_interrupt>
  ee:	00 00       	nop
  f0:	a5 c0       	rjmp	.+330    	; 0x23c <__bad_interrupt>
  f2:	00 00       	nop
  f4:	a3 c0       	rjmp	.+326    	; 0x23c <__bad_interrupt>
  f6:	00 00       	nop
  f8:	a1 c0       	rjmp	.+322    	; 0x23c <__bad_interrupt>
  fa:	00 00       	nop
  fc:	9f c0       	rjmp	.+318    	; 0x23c <__bad_interrupt>
  fe:	00 00       	nop
 100:	9d c0       	rjmp	.+314    	; 0x23c <__bad_interrupt>
 102:	00 00       	nop
 104:	9b c0       	rjmp	.+310    	; 0x23c <__bad_interrupt>
 106:	00 00       	nop
 108:	99 c0       	rjmp	.+306    	; 0x23c <__bad_interrupt>
 10a:	00 00       	nop
 10c:	97 c0       	rjmp	.+302    	; 0x23c <__bad_interrupt>
 10e:	00 00       	nop
 110:	95 c0       	rjmp	.+298    	; 0x23c <__bad_interrupt>
 112:	00 00       	nop
 114:	93 c0       	rjmp	.+294    	; 0x23c <__bad_interrupt>
 116:	00 00       	nop
 118:	91 c0       	rjmp	.+290    	; 0x23c <__bad_interrupt>
 11a:	00 00       	nop
 11c:	8f c0       	rjmp	.+286    	; 0x23c <__bad_interrupt>
 11e:	00 00       	nop
 120:	8d c0       	rjmp	.+282    	; 0x23c <__bad_interrupt>
 122:	00 00       	nop
 124:	8b c0       	rjmp	.+278    	; 0x23c <__bad_interrupt>
 126:	00 00       	nop
 128:	89 c0       	rjmp	.+274    	; 0x23c <__bad_interrupt>
 12a:	00 00       	nop
 12c:	87 c0       	rjmp	.+270    	; 0x23c <__bad_interrupt>
 12e:	00 00       	nop
 130:	85 c0       	rjmp	.+266    	; 0x23c <__bad_interrupt>
 132:	00 00       	nop
 134:	97 c4       	rjmp	.+2350   	; 0xa64 <__vector_77>
 136:	00 00       	nop
 138:	81 c0       	rjmp	.+258    	; 0x23c <__bad_interrupt>
 13a:	00 00       	nop
 13c:	7f c0       	rjmp	.+254    	; 0x23c <__bad_interrupt>
 13e:	00 00       	nop
 140:	7d c0       	rjmp	.+250    	; 0x23c <__bad_interrupt>
 142:	00 00       	nop
 144:	7b c0       	rjmp	.+246    	; 0x23c <__bad_interrupt>
 146:	00 00       	nop
 148:	79 c0       	rjmp	.+242    	; 0x23c <__bad_interrupt>
 14a:	00 00       	nop
 14c:	77 c0       	rjmp	.+238    	; 0x23c <__bad_interrupt>
 14e:	00 00       	nop
 150:	75 c0       	rjmp	.+234    	; 0x23c <__bad_interrupt>
 152:	00 00       	nop
 154:	73 c0       	rjmp	.+230    	; 0x23c <__bad_interrupt>
 156:	00 00       	nop
 158:	71 c0       	rjmp	.+226    	; 0x23c <__bad_interrupt>
 15a:	00 00       	nop
 15c:	6f c0       	rjmp	.+222    	; 0x23c <__bad_interrupt>
 15e:	00 00       	nop
 160:	6d c0       	rjmp	.+218    	; 0x23c <__bad_interrupt>
 162:	00 00       	nop
 164:	6b c0       	rjmp	.+214    	; 0x23c <__bad_interrupt>
 166:	00 00       	nop
 168:	69 c0       	rjmp	.+210    	; 0x23c <__bad_interrupt>
 16a:	00 00       	nop
 16c:	67 c0       	rjmp	.+206    	; 0x23c <__bad_interrupt>
 16e:	00 00       	nop
 170:	65 c0       	rjmp	.+202    	; 0x23c <__bad_interrupt>
 172:	00 00       	nop
 174:	63 c0       	rjmp	.+198    	; 0x23c <__bad_interrupt>
 176:	00 00       	nop
 178:	61 c0       	rjmp	.+194    	; 0x23c <__bad_interrupt>
 17a:	00 00       	nop
 17c:	5f c0       	rjmp	.+190    	; 0x23c <__bad_interrupt>
 17e:	00 00       	nop
 180:	5d c0       	rjmp	.+186    	; 0x23c <__bad_interrupt>
 182:	00 00       	nop
 184:	5b c0       	rjmp	.+182    	; 0x23c <__bad_interrupt>
 186:	00 00       	nop
 188:	59 c0       	rjmp	.+178    	; 0x23c <__bad_interrupt>
 18a:	00 00       	nop
 18c:	57 c0       	rjmp	.+174    	; 0x23c <__bad_interrupt>
 18e:	00 00       	nop
 190:	55 c0       	rjmp	.+170    	; 0x23c <__bad_interrupt>
 192:	00 00       	nop
 194:	53 c0       	rjmp	.+166    	; 0x23c <__bad_interrupt>
 196:	00 00       	nop
 198:	51 c0       	rjmp	.+162    	; 0x23c <__bad_interrupt>
 19a:	00 00       	nop
 19c:	4f c0       	rjmp	.+158    	; 0x23c <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	4d c0       	rjmp	.+154    	; 0x23c <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	4b c0       	rjmp	.+150    	; 0x23c <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	49 c0       	rjmp	.+146    	; 0x23c <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	47 c0       	rjmp	.+142    	; 0x23c <__bad_interrupt>
 1ae:	00 00       	nop
 1b0:	45 c0       	rjmp	.+138    	; 0x23c <__bad_interrupt>
 1b2:	00 00       	nop
 1b4:	43 c0       	rjmp	.+134    	; 0x23c <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	41 c0       	rjmp	.+130    	; 0x23c <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	3f c0       	rjmp	.+126    	; 0x23c <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	3d c0       	rjmp	.+122    	; 0x23c <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	3b c0       	rjmp	.+118    	; 0x23c <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	39 c0       	rjmp	.+114    	; 0x23c <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	37 c0       	rjmp	.+110    	; 0x23c <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	35 c0       	rjmp	.+106    	; 0x23c <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	33 c0       	rjmp	.+102    	; 0x23c <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	31 c0       	rjmp	.+98     	; 0x23c <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	2f c0       	rjmp	.+94     	; 0x23c <__bad_interrupt>
 1de:	00 00       	nop
 1e0:	2d c0       	rjmp	.+90     	; 0x23c <__bad_interrupt>
 1e2:	00 00       	nop
 1e4:	2b c0       	rjmp	.+86     	; 0x23c <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	29 c0       	rjmp	.+82     	; 0x23c <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	27 c0       	rjmp	.+78     	; 0x23c <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	25 c0       	rjmp	.+74     	; 0x23c <__bad_interrupt>
	...

000001f4 <__ctors_end>:
 1f4:	11 24       	eor	r1, r1
 1f6:	1f be       	out	0x3f, r1	; 63
 1f8:	cf ef       	ldi	r28, 0xFF	; 255
 1fa:	df e3       	ldi	r29, 0x3F	; 63
 1fc:	de bf       	out	0x3e, r29	; 62
 1fe:	cd bf       	out	0x3d, r28	; 61
 200:	00 e0       	ldi	r16, 0x00	; 0
 202:	0c bf       	out	0x3c, r16	; 60
 204:	18 be       	out	0x38, r1	; 56
 206:	19 be       	out	0x39, r1	; 57
 208:	1a be       	out	0x3a, r1	; 58
 20a:	1b be       	out	0x3b, r1	; 59

0000020c <__do_copy_data>:
 20c:	10 e2       	ldi	r17, 0x20	; 32
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	ec ea       	ldi	r30, 0xAC	; 172
 214:	fc e0       	ldi	r31, 0x0C	; 12
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	0b bf       	out	0x3b, r16	; 59
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
 21c:	07 90       	elpm	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	a6 30       	cpi	r26, 0x06	; 6
 222:	b1 07       	cpc	r27, r17
 224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>
 226:	1b be       	out	0x3b, r1	; 59

00000228 <__do_clear_bss>:
 228:	21 e2       	ldi	r18, 0x21	; 33
 22a:	a6 e0       	ldi	r26, 0x06	; 6
 22c:	b0 e2       	ldi	r27, 0x20	; 32
 22e:	01 c0       	rjmp	.+2      	; 0x232 <.do_clear_bss_start>

00000230 <.do_clear_bss_loop>:
 230:	1d 92       	st	X+, r1

00000232 <.do_clear_bss_start>:
 232:	af 38       	cpi	r26, 0x8F	; 143
 234:	b2 07       	cpc	r27, r18
 236:	e1 f7       	brne	.-8      	; 0x230 <.do_clear_bss_loop>
 238:	bf d3       	rcall	.+1918   	; 0x9b8 <main>
 23a:	36 c5       	rjmp	.+2668   	; 0xca8 <_exit>

0000023c <__bad_interrupt>:
 23c:	e1 ce       	rjmp	.-574    	; 0x0 <__vectors>

0000023e <PI_attitude_rate>:
INPUT:
OUTPUT:
DISCRIPTION:  nest PI / P loop, with the rate loop on the inside
*********************************************************************************************************** */
void PI_attitude_rate(PID_data *pid_data)
{
 23e:	af 92       	push	r10
 240:	bf 92       	push	r11
 242:	cf 92       	push	r12
 244:	df 92       	push	r13
 246:	ef 92       	push	r14
 248:	ff 92       	push	r15
 24a:	0f 93       	push	r16
 24c:	1f 93       	push	r17
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	fc 01       	movw	r30, r24
	////  save the last error calculation so we can calculate the derivative
	pid_data->previousError0 = pid_data->previousError1;
 254:	a2 ac       	ldd	r10, Z+58	; 0x3a
 256:	b3 ac       	ldd	r11, Z+59	; 0x3b
 258:	a0 ae       	std	Z+56, r10	; 0x38
 25a:	b1 ae       	std	Z+57, r11	; 0x39
	pid_data->previousError1 = pid_data->previousError2;
 25c:	c4 ac       	ldd	r12, Z+60	; 0x3c
 25e:	d5 ac       	ldd	r13, Z+61	; 0x3d
 260:	c2 ae       	std	Z+58, r12	; 0x3a
 262:	d3 ae       	std	Z+59, r13	; 0x3b
	pid_data->previousError2 = pid_data->attitude_error;
 264:	e4 a4       	ldd	r14, Z+44	; 0x2c
 266:	f5 a4       	ldd	r15, Z+45	; 0x2d
 268:	e4 ae       	std	Z+60, r14	; 0x3c
 26a:	f5 ae       	std	Z+61, r15	; 0x3d
	//pid_data->previousError0 = pid_data->error;
	////  calculate the new error
	////10 - 23 = -13
	
	pid_data->attitude_error = ((pid_data->attitude_command + pid_data->trim) - pid_data->attitude_feedback)/10;
 26c:	dc 01       	movw	r26, r24
 26e:	ae 5a       	subi	r26, 0xAE	; 174
 270:	bf 4f       	sbci	r27, 0xFF	; 255
 272:	26 a1       	ldd	r18, Z+38	; 0x26
 274:	37 a1       	ldd	r19, Z+39	; 0x27
 276:	8d 91       	ld	r24, X+
 278:	9c 91       	ld	r25, X
 27a:	82 0f       	add	r24, r18
 27c:	93 1f       	adc	r25, r19
 27e:	26 8d       	ldd	r18, Z+30	; 0x1e
 280:	37 8d       	ldd	r19, Z+31	; 0x1f
 282:	82 1b       	sub	r24, r18
 284:	93 0b       	sbc	r25, r19
 286:	0a e0       	ldi	r16, 0x0A	; 10
 288:	10 e0       	ldi	r17, 0x00	; 0
 28a:	b8 01       	movw	r22, r16
 28c:	e6 d4       	rcall	.+2508   	; 0xc5a <__divmodhi4>
 28e:	eb 01       	movw	r28, r22
 290:	64 a7       	std	Z+44, r22	; 0x2c
 292:	75 a7       	std	Z+45, r23	; 0x2d
	

	pid_data->attitude_total_error = (pid_data->previousError0/integral_addup_reducer + pid_data->previousError1/integral_addup_reducer +
 294:	20 91 04 20 	lds	r18, 0x2004
 298:	30 91 05 20 	lds	r19, 0x2005
 29c:	c5 01       	movw	r24, r10
 29e:	b9 01       	movw	r22, r18
 2a0:	dc d4       	rcall	.+2488   	; 0xc5a <__divmodhi4>
 2a2:	5b 01       	movw	r10, r22
 2a4:	c6 01       	movw	r24, r12
 2a6:	b9 01       	movw	r22, r18
 2a8:	d8 d4       	rcall	.+2480   	; 0xc5a <__divmodhi4>
 2aa:	65 01       	movw	r12, r10
 2ac:	c6 0e       	add	r12, r22
 2ae:	d7 1e       	adc	r13, r23
	pid_data->previousError2/integral_addup_reducer + pid_data->attitude_error/integral_addup_reducer);
 2b0:	c7 01       	movw	r24, r14
 2b2:	b9 01       	movw	r22, r18
 2b4:	d2 d4       	rcall	.+2468   	; 0xc5a <__divmodhi4>
	////10 - 23 = -13
	
	pid_data->attitude_error = ((pid_data->attitude_command + pid_data->trim) - pid_data->attitude_feedback)/10;
	

	pid_data->attitude_total_error = (pid_data->previousError0/integral_addup_reducer + pid_data->previousError1/integral_addup_reducer +
 2b6:	76 01       	movw	r14, r12
 2b8:	e6 0e       	add	r14, r22
 2ba:	f7 1e       	adc	r15, r23
	pid_data->previousError2/integral_addup_reducer + pid_data->attitude_error/integral_addup_reducer);
 2bc:	ce 01       	movw	r24, r28
 2be:	b9 01       	movw	r22, r18
 2c0:	cc d4       	rcall	.+2456   	; 0xc5a <__divmodhi4>
 2c2:	6e 0d       	add	r22, r14
 2c4:	7f 1d       	adc	r23, r15
	////10 - 23 = -13
	
	pid_data->attitude_error = ((pid_data->attitude_command + pid_data->trim) - pid_data->attitude_feedback)/10;
	

	pid_data->attitude_total_error = (pid_data->previousError0/integral_addup_reducer + pid_data->previousError1/integral_addup_reducer +
 2c6:	64 ab       	std	Z+52, r22	; 0x34
 2c8:	75 ab       	std	Z+53, r23	; 0x35
	pid_data->previousError2/integral_addup_reducer + pid_data->attitude_error/integral_addup_reducer);



	pid_data->p_term_attitude = (pid_data->attitude_error  *  pid_data->Kp);
 2ca:	86 89       	ldd	r24, Z+22	; 0x16
 2cc:	97 89       	ldd	r25, Z+23	; 0x17
 2ce:	c8 9f       	mul	r28, r24
 2d0:	90 01       	movw	r18, r0
 2d2:	c9 9f       	mul	r28, r25
 2d4:	30 0d       	add	r19, r0
 2d6:	d8 9f       	mul	r29, r24
 2d8:	30 0d       	add	r19, r0
 2da:	11 24       	eor	r1, r1
 2dc:	22 87       	std	Z+10, r18	; 0x0a
 2de:	33 87       	std	Z+11, r19	; 0x0b
	
	//calculate integral term
	pid_data->i_term_attitude =(pid_data->attitude_total_error  * pid_data->Ki);
 2e0:	40 8d       	ldd	r20, Z+24	; 0x18
 2e2:	51 8d       	ldd	r21, Z+25	; 0x19
 2e4:	64 9f       	mul	r22, r20
 2e6:	c0 01       	movw	r24, r0
 2e8:	65 9f       	mul	r22, r21
 2ea:	90 0d       	add	r25, r0
 2ec:	74 9f       	mul	r23, r20
 2ee:	90 0d       	add	r25, r0
 2f0:	11 24       	eor	r1, r1
 2f2:	84 87       	std	Z+12, r24	; 0x0c
 2f4:	95 87       	std	Z+13, r25	; 0x0d

	
	// calculate the pid output
	pid_data->attitude_loop_out = (pid_data->p_term_attitude + pid_data->i_term_attitude);
 2f6:	82 0f       	add	r24, r18
 2f8:	93 1f       	adc	r25, r19
 2fa:	df 01       	movw	r26, r30
 2fc:	a4 5b       	subi	r26, 0xB4	; 180
 2fe:	bf 4f       	sbci	r27, 0xFF	; 255
 300:	8d 93       	st	X+, r24
 302:	9c 93       	st	X, r25
	//pid_rate(pid_data);

	
	//  rate calculations start here
	pid_data->previousRateError0 = pid_data->previousRateError1;
 304:	ef 01       	movw	r28, r30
 306:	c0 5c       	subi	r28, 0xC0	; 192
 308:	df 4f       	sbci	r29, 0xFF	; 255
 30a:	28 81       	ld	r18, Y
 30c:	39 81       	ldd	r19, Y+1	; 0x01
 30e:	26 af       	std	Z+62, r18	; 0x3e
 310:	37 af       	std	Z+63, r19	; 0x3f
	pid_data->previousRateError1 = pid_data->previousRateError2;
 312:	df 01       	movw	r26, r30
 314:	ae 5b       	subi	r26, 0xBE	; 190
 316:	bf 4f       	sbci	r27, 0xFF	; 255
 318:	2d 91       	ld	r18, X+
 31a:	3c 91       	ld	r19, X
 31c:	11 97       	sbiw	r26, 0x01	; 1
 31e:	28 83       	st	Y, r18
 320:	39 83       	std	Y+1, r19	; 0x01
	pid_data->previousRateError2 = pid_data->rate_error;
 322:	26 a5       	ldd	r18, Z+46	; 0x2e
 324:	37 a5       	ldd	r19, Z+47	; 0x2f
 326:	2d 93       	st	X+, r18
 328:	3c 93       	st	X, r19
	
	pid_data->rate_error = (pid_data->attitude_loop_out- pid_data->rate_feedback)/10;
 32a:	22 a1       	ldd	r18, Z+34	; 0x22
 32c:	33 a1       	ldd	r19, Z+35	; 0x23
 32e:	82 1b       	sub	r24, r18
 330:	93 0b       	sbc	r25, r19
 332:	b8 01       	movw	r22, r16
 334:	92 d4       	rcall	.+2340   	; 0xc5a <__divmodhi4>
 336:	66 a7       	std	Z+46, r22	; 0x2e
 338:	77 a7       	std	Z+47, r23	; 0x2f
	
	//pid_data->rate_integral = pid_data->rate_error/integral_addup_reducer + pid_data->previousRateError0/integral_addup_reducer +
	//pid_data->previousRateError1/integral_addup_reducer + pid_data->previousRateError2/integral_addup_reducer;
	
	pid_data->p_term_rate = (pid_data->rate_error * pid_data->Kp_rate);
 33a:	20 89       	ldd	r18, Z+16	; 0x10
 33c:	31 89       	ldd	r19, Z+17	; 0x11
 33e:	62 9f       	mul	r22, r18
 340:	c0 01       	movw	r24, r0
 342:	63 9f       	mul	r22, r19
 344:	90 0d       	add	r25, r0
 346:	72 9f       	mul	r23, r18
 348:	90 0d       	add	r25, r0
 34a:	11 24       	eor	r1, r1
 34c:	84 83       	std	Z+4, r24	; 0x04
 34e:	95 83       	std	Z+5, r25	; 0x05
	
	pid_data->i_term_rate = 0; //(pid_data->rate_total_error  * pid_data->Ki_rate);
 350:	16 82       	std	Z+6, r1	; 0x06
 352:	17 82       	std	Z+7, r1	; 0x07
	
	pid_data->pid_total =(pid_data->p_term_rate + pid_data->i_term_rate);
 354:	84 8f       	std	Z+28, r24	; 0x1c
 356:	95 8f       	std	Z+29, r25	; 0x1d

}
 358:	df 91       	pop	r29
 35a:	cf 91       	pop	r28
 35c:	1f 91       	pop	r17
 35e:	0f 91       	pop	r16
 360:	ff 90       	pop	r15
 362:	ef 90       	pop	r14
 364:	df 90       	pop	r13
 366:	cf 90       	pop	r12
 368:	bf 90       	pop	r11
 36a:	af 90       	pop	r10
 36c:	08 95       	ret

0000036e <initPWM>:
}

void trim()
{
	rollAxis.trim = rollAxis.attitude_command;
	pitchAxis.trim = pitchAxis.attitude_command;
 36e:	e0 e0       	ldi	r30, 0x00	; 0
 370:	f8 e0       	ldi	r31, 0x08	; 8
 372:	83 e0       	ldi	r24, 0x03	; 3
 374:	80 83       	st	Z, r24
 376:	81 83       	std	Z+1, r24	; 0x01
 378:	82 83       	std	Z+2, r24	; 0x02
 37a:	83 83       	std	Z+3, r24	; 0x03
 37c:	81 81       	ldd	r24, Z+1	; 0x01
 37e:	80 61       	ori	r24, 0x10	; 16
 380:	81 83       	std	Z+1, r24	; 0x01
 382:	81 81       	ldd	r24, Z+1	; 0x01
 384:	80 62       	ori	r24, 0x20	; 32
 386:	81 83       	std	Z+1, r24	; 0x01
 388:	81 81       	ldd	r24, Z+1	; 0x01
 38a:	80 64       	ori	r24, 0x40	; 64
 38c:	81 83       	std	Z+1, r24	; 0x01
 38e:	81 81       	ldd	r24, Z+1	; 0x01
 390:	80 68       	ori	r24, 0x80	; 128
 392:	81 83       	std	Z+1, r24	; 0x01
 394:	8f e0       	ldi	r24, 0x0F	; 15
 396:	a0 e4       	ldi	r26, 0x40	; 64
 398:	b6 e0       	ldi	r27, 0x06	; 6
 39a:	11 96       	adiw	r26, 0x01	; 1
 39c:	8c 93       	st	X, r24
 39e:	10 ae       	std	Z+56, r1	; 0x38
 3a0:	11 ae       	std	Z+57, r1	; 0x39
 3a2:	12 ae       	std	Z+58, r1	; 0x3a
 3a4:	13 ae       	std	Z+59, r1	; 0x3b
 3a6:	14 ae       	std	Z+60, r1	; 0x3c
 3a8:	15 ae       	std	Z+61, r1	; 0x3d
 3aa:	10 92 3e 08 	sts	0x083E, r1
 3ae:	10 92 3f 08 	sts	0x083F, r1
 3b2:	89 e2       	ldi	r24, 0x29	; 41
 3b4:	98 e6       	ldi	r25, 0x68	; 104
 3b6:	86 a3       	std	Z+38, r24	; 0x26
 3b8:	97 a3       	std	Z+39, r25	; 0x27
 3ba:	63 e0       	ldi	r22, 0x03	; 3
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	98 e0       	ldi	r25, 0x08	; 8
 3c0:	19 c4       	rjmp	.+2098   	; 0xbf4 <TC0_ConfigClockSource>

000003c2 <doPWM>:
 3c2:	e0 e0       	ldi	r30, 0x00	; 0
 3c4:	f8 e0       	ldi	r31, 0x08	; 8
 3c6:	e4 85       	ldd	r30, Z+12	; 0x0c
 3c8:	e0 ff       	sbrs	r30, 0
 3ca:	0e c0       	rjmp	.+28     	; 0x3e8 <doPWM+0x26>
 3cc:	e0 e0       	ldi	r30, 0x00	; 0
 3ce:	f8 e0       	ldi	r31, 0x08	; 8
 3d0:	a1 e0       	ldi	r26, 0x01	; 1
 3d2:	a4 87       	std	Z+12, r26	; 0x0c
 3d4:	80 af       	std	Z+56, r24	; 0x38
 3d6:	91 af       	std	Z+57, r25	; 0x39
 3d8:	62 af       	std	Z+58, r22	; 0x3a
 3da:	73 af       	std	Z+59, r23	; 0x3b
 3dc:	44 af       	std	Z+60, r20	; 0x3c
 3de:	55 af       	std	Z+61, r21	; 0x3d
 3e0:	20 93 3e 08 	sts	0x083E, r18
 3e4:	30 93 3f 08 	sts	0x083F, r19
 3e8:	08 95       	ret

000003ea <SetPulseWidths>:
 3ea:	80 91 12 21 	lds	r24, 0x2112
 3ee:	90 91 13 21 	lds	r25, 0x2113
 3f2:	9c 01       	movw	r18, r24
 3f4:	21 5d       	subi	r18, 0xD1	; 209
 3f6:	37 40       	sbci	r19, 0x07	; 7
 3f8:	2f 32       	cpi	r18, 0x2F	; 47
 3fa:	38 40       	sbci	r19, 0x08	; 8
 3fc:	b8 f4       	brcc	.+46     	; 0x42c <SetPulseWidths+0x42>
 3fe:	88 0f       	add	r24, r24
 400:	99 1f       	adc	r25, r25
 402:	88 0f       	add	r24, r24
 404:	99 1f       	adc	r25, r25
 406:	60 91 88 20 	lds	r22, 0x2088
 40a:	70 91 89 20 	lds	r23, 0x2089
 40e:	e0 91 26 20 	lds	r30, 0x2026
 412:	f0 91 27 20 	lds	r31, 0x2027
 416:	9c 01       	movw	r18, r24
 418:	26 1b       	sub	r18, r22
 41a:	37 0b       	sbc	r19, r23
 41c:	ac 01       	movw	r20, r24
 41e:	4e 1b       	sub	r20, r30
 420:	5f 0b       	sbc	r21, r31
 422:	68 0f       	add	r22, r24
 424:	79 1f       	adc	r23, r25
 426:	8e 0f       	add	r24, r30
 428:	9f 1f       	adc	r25, r31
 42a:	cb cf       	rjmp	.-106    	; 0x3c2 <doPWM>
 42c:	80 5d       	subi	r24, 0xD0	; 208
 42e:	97 40       	sbci	r25, 0x07	; 7
 430:	8f 32       	cpi	r24, 0x2F	; 47
 432:	98 40       	sbci	r25, 0x08	; 8
 434:	48 f0       	brcs	.+18     	; 0x448 <SetPulseWidths+0x5e>
 436:	20 e0       	ldi	r18, 0x00	; 0
 438:	30 e0       	ldi	r19, 0x00	; 0
 43a:	40 e0       	ldi	r20, 0x00	; 0
 43c:	50 e0       	ldi	r21, 0x00	; 0
 43e:	60 e0       	ldi	r22, 0x00	; 0
 440:	70 e0       	ldi	r23, 0x00	; 0
 442:	80 e0       	ldi	r24, 0x00	; 0
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	bd cf       	rjmp	.-134    	; 0x3c2 <doPWM>
 448:	08 95       	ret

0000044a <intPID_gains>:
 44a:	84 e0       	ldi	r24, 0x04	; 4
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	80 93 20 20 	sts	0x2020, r24
 452:	90 93 21 20 	sts	0x2021, r25
 456:	23 e0       	ldi	r18, 0x03	; 3
 458:	30 e0       	ldi	r19, 0x00	; 0
 45a:	20 93 22 20 	sts	0x2022, r18
 45e:	30 93 23 20 	sts	0x2023, r19
 462:	80 93 1a 20 	sts	0x201A, r24
 466:	90 93 1b 20 	sts	0x201B, r25
 46a:	10 92 1c 20 	sts	0x201C, r1
 46e:	10 92 1d 20 	sts	0x201D, r1
 472:	88 ec       	ldi	r24, 0xC8	; 200
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	80 93 3c 20 	sts	0x203C, r24
 47a:	90 93 3d 20 	sts	0x203D, r25
 47e:	80 93 9e 20 	sts	0x209E, r24
 482:	90 93 9f 20 	sts	0x209F, r25
 486:	80 93 52 21 	sts	0x2152, r24
 48a:	90 93 53 21 	sts	0x2153, r25
 48e:	08 95       	ret

00000490 <sendUM6_Data>:
 490:	8c ec       	ldi	r24, 0xCC	; 204
 492:	9c ec       	ldi	r25, 0xCC	; 204
 494:	d6 d3       	rcall	.+1964   	; 0xc42 <sendData_int16_t>
 496:	80 91 30 20 	lds	r24, 0x2030
 49a:	90 91 31 20 	lds	r25, 0x2031
 49e:	d1 d3       	rcall	.+1954   	; 0xc42 <sendData_int16_t>
 4a0:	80 91 28 20 	lds	r24, 0x2028
 4a4:	90 91 29 20 	lds	r25, 0x2029
 4a8:	cc c3       	rjmp	.+1944   	; 0xc42 <sendData_int16_t>

000004aa <WriteToPC_SPI>:
 4aa:	af 92       	push	r10
 4ac:	bf 92       	push	r11
 4ae:	cf 92       	push	r12
 4b0:	df 92       	push	r13
 4b2:	ef 92       	push	r14
 4b4:	ff 92       	push	r15
 4b6:	0f 93       	push	r16
 4b8:	1f 93       	push	r17
 4ba:	cf 93       	push	r28
 4bc:	df 93       	push	r29
 4be:	80 e1       	ldi	r24, 0x10	; 16
 4c0:	e0 e8       	ldi	r30, 0x80	; 128
 4c2:	f6 e0       	ldi	r31, 0x06	; 6
 4c4:	86 83       	std	Z+6, r24	; 0x06
 4c6:	80 e0       	ldi	r24, 0x00	; 0
 4c8:	03 d3       	rcall	.+1542   	; 0xad0 <spiPC_write_read>
 4ca:	d8 2f       	mov	r29, r24
 4cc:	80 e0       	ldi	r24, 0x00	; 0
 4ce:	c8 2f       	mov	r28, r24
 4d0:	02 e1       	ldi	r16, 0x12	; 18
 4d2:	11 e2       	ldi	r17, 0x21	; 33
 4d4:	f8 01       	movw	r30, r16
 4d6:	c0 83       	st	Z, r28
 4d8:	d1 83       	std	Z+1, r29	; 0x01
 4da:	80 91 61 20 	lds	r24, 0x2061
 4de:	f8 d2       	rcall	.+1520   	; 0xad0 <spiPC_write_read>
 4e0:	c8 0f       	add	r28, r24
 4e2:	d1 1d       	adc	r29, r1
 4e4:	f8 01       	movw	r30, r16
 4e6:	c0 83       	st	Z, r28
 4e8:	d1 83       	std	Z+1, r29	; 0x01
 4ea:	0f 2e       	mov	r0, r31
 4ec:	fa e2       	ldi	r31, 0x2A	; 42
 4ee:	ef 2e       	mov	r14, r31
 4f0:	f0 e2       	ldi	r31, 0x20	; 32
 4f2:	ff 2e       	mov	r15, r31
 4f4:	f0 2d       	mov	r31, r0
 4f6:	f7 01       	movw	r30, r14
 4f8:	81 81       	ldd	r24, Z+1	; 0x01
 4fa:	ea d2       	rcall	.+1492   	; 0xad0 <spiPC_write_read>
 4fc:	d8 2f       	mov	r29, r24
 4fe:	f0 e0       	ldi	r31, 0x00	; 0
 500:	cf 2f       	mov	r28, r31
 502:	00 e3       	ldi	r16, 0x30	; 48
 504:	10 e2       	ldi	r17, 0x20	; 32
 506:	f8 01       	movw	r30, r16
 508:	c0 83       	st	Z, r28
 50a:	d1 83       	std	Z+1, r29	; 0x01
 50c:	f7 01       	movw	r30, r14
 50e:	80 81       	ld	r24, Z
 510:	df d2       	rcall	.+1470   	; 0xad0 <spiPC_write_read>
 512:	c8 0f       	add	r28, r24
 514:	d1 1d       	adc	r29, r1
 516:	f8 01       	movw	r30, r16
 518:	c0 83       	st	Z, r28
 51a:	d1 83       	std	Z+1, r29	; 0x01
 51c:	0f 2e       	mov	r0, r31
 51e:	fc e8       	ldi	r31, 0x8C	; 140
 520:	ef 2e       	mov	r14, r31
 522:	f0 e2       	ldi	r31, 0x20	; 32
 524:	ff 2e       	mov	r15, r31
 526:	f0 2d       	mov	r31, r0
 528:	f7 01       	movw	r30, r14
 52a:	81 81       	ldd	r24, Z+1	; 0x01
 52c:	d1 d2       	rcall	.+1442   	; 0xad0 <spiPC_write_read>
 52e:	d8 2f       	mov	r29, r24
 530:	f0 e0       	ldi	r31, 0x00	; 0
 532:	cf 2f       	mov	r28, r31
 534:	02 e9       	ldi	r16, 0x92	; 146
 536:	10 e2       	ldi	r17, 0x20	; 32
 538:	f8 01       	movw	r30, r16
 53a:	c0 83       	st	Z, r28
 53c:	d1 83       	std	Z+1, r29	; 0x01
 53e:	f7 01       	movw	r30, r14
 540:	80 81       	ld	r24, Z
 542:	c6 d2       	rcall	.+1420   	; 0xad0 <spiPC_write_read>
 544:	c8 0f       	add	r28, r24
 546:	d1 1d       	adc	r29, r1
 548:	f8 01       	movw	r30, r16
 54a:	c0 83       	st	Z, r28
 54c:	d1 83       	std	Z+1, r29	; 0x01
 54e:	0f 2e       	mov	r0, r31
 550:	f0 e4       	ldi	r31, 0x40	; 64
 552:	ef 2e       	mov	r14, r31
 554:	f1 e2       	ldi	r31, 0x21	; 33
 556:	ff 2e       	mov	r15, r31
 558:	f0 2d       	mov	r31, r0
 55a:	f7 01       	movw	r30, r14
 55c:	81 81       	ldd	r24, Z+1	; 0x01
 55e:	b8 d2       	rcall	.+1392   	; 0xad0 <spiPC_write_read>
 560:	d8 2f       	mov	r29, r24
 562:	f0 e0       	ldi	r31, 0x00	; 0
 564:	cf 2f       	mov	r28, r31
 566:	06 e4       	ldi	r16, 0x46	; 70
 568:	11 e2       	ldi	r17, 0x21	; 33
 56a:	f8 01       	movw	r30, r16
 56c:	c0 83       	st	Z, r28
 56e:	d1 83       	std	Z+1, r29	; 0x01
 570:	f7 01       	movw	r30, r14
 572:	80 81       	ld	r24, Z
 574:	ad d2       	rcall	.+1370   	; 0xad0 <spiPC_write_read>
 576:	c8 0f       	add	r28, r24
 578:	d1 1d       	adc	r29, r1
 57a:	f8 01       	movw	r30, r16
 57c:	c0 83       	st	Z, r28
 57e:	d1 83       	std	Z+1, r29	; 0x01
 580:	e6 e5       	ldi	r30, 0x56	; 86
 582:	f0 e2       	ldi	r31, 0x20	; 32
 584:	80 81       	ld	r24, Z
 586:	91 81       	ldd	r25, Z+1	; 0x01
 588:	99 23       	and	r25, r25
 58a:	0c f4       	brge	.+2      	; 0x58e <WriteToPC_SPI+0xe4>
 58c:	01 96       	adiw	r24, 0x01	; 1
 58e:	95 95       	asr	r25
 590:	87 95       	ror	r24
 592:	06 e5       	ldi	r16, 0x56	; 86
 594:	10 e2       	ldi	r17, 0x20	; 32
 596:	f8 01       	movw	r30, r16
 598:	80 83       	st	Z, r24
 59a:	91 83       	std	Z+1, r25	; 0x01
 59c:	89 2f       	mov	r24, r25
 59e:	98 d2       	rcall	.+1328   	; 0xad0 <spiPC_write_read>
 5a0:	d8 2f       	mov	r29, r24
 5a2:	f0 e0       	ldi	r31, 0x00	; 0
 5a4:	cf 2f       	mov	r28, r31
 5a6:	0f 2e       	mov	r0, r31
 5a8:	f2 e8       	ldi	r31, 0x82	; 130
 5aa:	ef 2e       	mov	r14, r31
 5ac:	f0 e2       	ldi	r31, 0x20	; 32
 5ae:	ff 2e       	mov	r15, r31
 5b0:	f0 2d       	mov	r31, r0
 5b2:	f7 01       	movw	r30, r14
 5b4:	c0 83       	st	Z, r28
 5b6:	d1 83       	std	Z+1, r29	; 0x01
 5b8:	f8 01       	movw	r30, r16
 5ba:	80 81       	ld	r24, Z
 5bc:	89 d2       	rcall	.+1298   	; 0xad0 <spiPC_write_read>
 5be:	c8 0f       	add	r28, r24
 5c0:	d1 1d       	adc	r29, r1
 5c2:	f7 01       	movw	r30, r14
 5c4:	c0 83       	st	Z, r28
 5c6:	d1 83       	std	Z+1, r29	; 0x01
 5c8:	00 e9       	ldi	r16, 0x90	; 144
 5ca:	10 e2       	ldi	r17, 0x20	; 32
 5cc:	f8 01       	movw	r30, r16
 5ce:	81 81       	ldd	r24, Z+1	; 0x01
 5d0:	7f d2       	rcall	.+1278   	; 0xad0 <spiPC_write_read>
 5d2:	d8 2f       	mov	r29, r24
 5d4:	f0 e0       	ldi	r31, 0x00	; 0
 5d6:	cf 2f       	mov	r28, r31
 5d8:	0f 2e       	mov	r0, r31
 5da:	f4 e8       	ldi	r31, 0x84	; 132
 5dc:	cf 2e       	mov	r12, r31
 5de:	f0 e2       	ldi	r31, 0x20	; 32
 5e0:	df 2e       	mov	r13, r31
 5e2:	f0 2d       	mov	r31, r0
 5e4:	f6 01       	movw	r30, r12
 5e6:	c0 83       	st	Z, r28
 5e8:	d1 83       	std	Z+1, r29	; 0x01
 5ea:	f8 01       	movw	r30, r16
 5ec:	80 81       	ld	r24, Z
 5ee:	70 d2       	rcall	.+1248   	; 0xad0 <spiPC_write_read>
 5f0:	c8 0f       	add	r28, r24
 5f2:	d1 1d       	adc	r29, r1
 5f4:	f6 01       	movw	r30, r12
 5f6:	c0 83       	st	Z, r28
 5f8:	d1 83       	std	Z+1, r29	; 0x01
 5fa:	c4 e4       	ldi	r28, 0x44	; 68
 5fc:	d1 e2       	ldi	r29, 0x21	; 33
 5fe:	89 81       	ldd	r24, Y+1	; 0x01
 600:	67 d2       	rcall	.+1230   	; 0xad0 <spiPC_write_read>
 602:	18 2f       	mov	r17, r24
 604:	00 e0       	ldi	r16, 0x00	; 0
 606:	0f 2e       	mov	r0, r31
 608:	f6 e8       	ldi	r31, 0x86	; 134
 60a:	af 2e       	mov	r10, r31
 60c:	f0 e2       	ldi	r31, 0x20	; 32
 60e:	bf 2e       	mov	r11, r31
 610:	f0 2d       	mov	r31, r0
 612:	f5 01       	movw	r30, r10
 614:	00 83       	st	Z, r16
 616:	11 83       	std	Z+1, r17	; 0x01
 618:	88 81       	ld	r24, Y
 61a:	5a d2       	rcall	.+1204   	; 0xad0 <spiPC_write_read>
 61c:	08 0f       	add	r16, r24
 61e:	11 1d       	adc	r17, r1
 620:	f5 01       	movw	r30, r10
 622:	00 83       	st	Z, r16
 624:	11 83       	std	Z+1, r17	; 0x01
 626:	89 81       	ldd	r24, Y+1	; 0x01
 628:	53 d2       	rcall	.+1190   	; 0xad0 <spiPC_write_read>
 62a:	10 92 5e 20 	sts	0x205E, r1
 62e:	80 93 5f 20 	sts	0x205F, r24
 632:	88 81       	ld	r24, Y
 634:	4d d2       	rcall	.+1178   	; 0xad0 <spiPC_write_read>
 636:	20 91 5e 20 	lds	r18, 0x205E
 63a:	30 91 5f 20 	lds	r19, 0x205F
 63e:	28 0f       	add	r18, r24
 640:	31 1d       	adc	r19, r1
 642:	20 93 5e 20 	sts	0x205E, r18
 646:	30 93 5f 20 	sts	0x205F, r19
 64a:	80 e8       	ldi	r24, 0x80	; 128
 64c:	41 d2       	rcall	.+1154   	; 0xad0 <spiPC_write_read>
 64e:	80 93 61 20 	sts	0x2061, r24
 652:	80 e8       	ldi	r24, 0x80	; 128
 654:	3d d2       	rcall	.+1146   	; 0xad0 <spiPC_write_read>
 656:	80 93 61 20 	sts	0x2061, r24
 65a:	80 e1       	ldi	r24, 0x10	; 16
 65c:	e0 e8       	ldi	r30, 0x80	; 128
 65e:	f6 e0       	ldi	r31, 0x06	; 6
 660:	85 83       	std	Z+5, r24	; 0x05
 662:	f7 01       	movw	r30, r14
 664:	40 81       	ld	r20, Z
 666:	51 81       	ldd	r21, Z+1	; 0x01
 668:	40 93 20 20 	sts	0x2020, r20
 66c:	50 93 21 20 	sts	0x2021, r21
 670:	f6 01       	movw	r30, r12
 672:	20 81       	ld	r18, Z
 674:	31 81       	ldd	r19, Z+1	; 0x01
 676:	20 93 22 20 	sts	0x2022, r18
 67a:	30 93 23 20 	sts	0x2023, r19
 67e:	f5 01       	movw	r30, r10
 680:	80 81       	ld	r24, Z
 682:	91 81       	ldd	r25, Z+1	; 0x01
 684:	80 93 24 20 	sts	0x2024, r24
 688:	90 93 25 20 	sts	0x2025, r25
 68c:	40 93 36 21 	sts	0x2136, r20
 690:	50 93 37 21 	sts	0x2137, r21
 694:	20 93 38 21 	sts	0x2138, r18
 698:	30 93 39 21 	sts	0x2139, r19
 69c:	80 93 3a 21 	sts	0x213A, r24
 6a0:	90 93 3b 21 	sts	0x213B, r25
 6a4:	80 91 5e 20 	lds	r24, 0x205E
 6a8:	90 91 5f 20 	lds	r25, 0x205F
 6ac:	df 91       	pop	r29
 6ae:	cf 91       	pop	r28
 6b0:	1f 91       	pop	r17
 6b2:	0f 91       	pop	r16
 6b4:	ff 90       	pop	r15
 6b6:	ef 90       	pop	r14
 6b8:	df 90       	pop	r13
 6ba:	cf 90       	pop	r12
 6bc:	bf 90       	pop	r11
 6be:	af 90       	pop	r10
 6c0:	08 95       	ret

000006c2 <UpdateEulerAngles>:
 6c2:	cf 93       	push	r28
 6c4:	80 e1       	ldi	r24, 0x10	; 16
 6c6:	e0 ea       	ldi	r30, 0xA0	; 160
 6c8:	f6 e0       	ldi	r31, 0x06	; 6
 6ca:	86 83       	std	Z+6, r24	; 0x06
 6cc:	80 e0       	ldi	r24, 0x00	; 0
 6ce:	0e d2       	rcall	.+1052   	; 0xaec <spiIMU_write_read>
 6d0:	82 e6       	ldi	r24, 0x62	; 98
 6d2:	0c d2       	rcall	.+1048   	; 0xaec <spiIMU_write_read>
 6d4:	80 e0       	ldi	r24, 0x00	; 0
 6d6:	0a d2       	rcall	.+1044   	; 0xaec <spiIMU_write_read>
 6d8:	c8 2f       	mov	r28, r24
 6da:	80 e0       	ldi	r24, 0x00	; 0
 6dc:	07 d2       	rcall	.+1038   	; 0xaec <spiIMU_write_read>
 6de:	3c 2f       	mov	r19, r28
 6e0:	20 e0       	ldi	r18, 0x00	; 0
 6e2:	28 2b       	or	r18, r24
 6e4:	20 93 28 20 	sts	0x2028, r18
 6e8:	30 93 29 20 	sts	0x2029, r19
 6ec:	c9 01       	movw	r24, r18
 6ee:	99 23       	and	r25, r25
 6f0:	0c f4       	brge	.+2      	; 0x6f4 <UpdateEulerAngles+0x32>
 6f2:	01 96       	adiw	r24, 0x01	; 1
 6f4:	95 95       	asr	r25
 6f6:	87 95       	ror	r24
 6f8:	80 93 2a 20 	sts	0x202A, r24
 6fc:	90 93 2b 20 	sts	0x202B, r25
 700:	80 e0       	ldi	r24, 0x00	; 0
 702:	f4 d1       	rcall	.+1000   	; 0xaec <spiIMU_write_read>
 704:	c8 2f       	mov	r28, r24
 706:	83 e6       	ldi	r24, 0x63	; 99
 708:	f1 d1       	rcall	.+994    	; 0xaec <spiIMU_write_read>
 70a:	3c 2f       	mov	r19, r28
 70c:	20 e0       	ldi	r18, 0x00	; 0
 70e:	28 2b       	or	r18, r24
 710:	20 93 8a 20 	sts	0x208A, r18
 714:	30 93 8b 20 	sts	0x208B, r19
 718:	c9 01       	movw	r24, r18
 71a:	99 23       	and	r25, r25
 71c:	0c f4       	brge	.+2      	; 0x720 <UpdateEulerAngles+0x5e>
 71e:	01 96       	adiw	r24, 0x01	; 1
 720:	95 95       	asr	r25
 722:	87 95       	ror	r24
 724:	80 93 8c 20 	sts	0x208C, r24
 728:	90 93 8d 20 	sts	0x208D, r25
 72c:	80 e0       	ldi	r24, 0x00	; 0
 72e:	de d1       	rcall	.+956    	; 0xaec <spiIMU_write_read>
 730:	c8 2f       	mov	r28, r24
 732:	80 e0       	ldi	r24, 0x00	; 0
 734:	db d1       	rcall	.+950    	; 0xaec <spiIMU_write_read>
 736:	3c 2f       	mov	r19, r28
 738:	20 e0       	ldi	r18, 0x00	; 0
 73a:	28 2b       	or	r18, r24
 73c:	20 93 3e 21 	sts	0x213E, r18
 740:	30 93 3f 21 	sts	0x213F, r19
 744:	c9 01       	movw	r24, r18
 746:	99 23       	and	r25, r25
 748:	0c f4       	brge	.+2      	; 0x74c <UpdateEulerAngles+0x8a>
 74a:	01 96       	adiw	r24, 0x01	; 1
 74c:	95 95       	asr	r25
 74e:	87 95       	ror	r24
 750:	80 93 40 21 	sts	0x2140, r24
 754:	90 93 41 21 	sts	0x2141, r25
 758:	80 e0       	ldi	r24, 0x00	; 0
 75a:	c8 d1       	rcall	.+912    	; 0xaec <spiIMU_write_read>
 75c:	8c e5       	ldi	r24, 0x5C	; 92
 75e:	c6 d1       	rcall	.+908    	; 0xaec <spiIMU_write_read>
 760:	80 e0       	ldi	r24, 0x00	; 0
 762:	c4 d1       	rcall	.+904    	; 0xaec <spiIMU_write_read>
 764:	c8 2f       	mov	r28, r24
 766:	80 e0       	ldi	r24, 0x00	; 0
 768:	c1 d1       	rcall	.+898    	; 0xaec <spiIMU_write_read>
 76a:	3c 2f       	mov	r19, r28
 76c:	20 e0       	ldi	r18, 0x00	; 0
 76e:	28 2b       	or	r18, r24
 770:	20 93 2c 20 	sts	0x202C, r18
 774:	30 93 2d 20 	sts	0x202D, r19
 778:	c9 01       	movw	r24, r18
 77a:	99 23       	and	r25, r25
 77c:	0c f4       	brge	.+2      	; 0x780 <UpdateEulerAngles+0xbe>
 77e:	01 96       	adiw	r24, 0x01	; 1
 780:	95 95       	asr	r25
 782:	87 95       	ror	r24
 784:	80 93 2e 20 	sts	0x202E, r24
 788:	90 93 2f 20 	sts	0x202F, r25
 78c:	80 e0       	ldi	r24, 0x00	; 0
 78e:	ae d1       	rcall	.+860    	; 0xaec <spiIMU_write_read>
 790:	c8 2f       	mov	r28, r24
 792:	8d e5       	ldi	r24, 0x5D	; 93
 794:	ab d1       	rcall	.+854    	; 0xaec <spiIMU_write_read>
 796:	3c 2f       	mov	r19, r28
 798:	20 e0       	ldi	r18, 0x00	; 0
 79a:	28 2b       	or	r18, r24
 79c:	20 93 8e 20 	sts	0x208E, r18
 7a0:	30 93 8f 20 	sts	0x208F, r19
 7a4:	c9 01       	movw	r24, r18
 7a6:	99 23       	and	r25, r25
 7a8:	0c f4       	brge	.+2      	; 0x7ac <UpdateEulerAngles+0xea>
 7aa:	01 96       	adiw	r24, 0x01	; 1
 7ac:	95 95       	asr	r25
 7ae:	87 95       	ror	r24
 7b0:	80 93 90 20 	sts	0x2090, r24
 7b4:	90 93 91 20 	sts	0x2091, r25
 7b8:	80 e0       	ldi	r24, 0x00	; 0
 7ba:	98 d1       	rcall	.+816    	; 0xaec <spiIMU_write_read>
 7bc:	c8 2f       	mov	r28, r24
 7be:	80 e0       	ldi	r24, 0x00	; 0
 7c0:	95 d1       	rcall	.+810    	; 0xaec <spiIMU_write_read>
 7c2:	3c 2f       	mov	r19, r28
 7c4:	20 e0       	ldi	r18, 0x00	; 0
 7c6:	28 2b       	or	r18, r24
 7c8:	20 93 42 21 	sts	0x2142, r18
 7cc:	30 93 43 21 	sts	0x2143, r19
 7d0:	c9 01       	movw	r24, r18
 7d2:	99 23       	and	r25, r25
 7d4:	0c f4       	brge	.+2      	; 0x7d8 <UpdateEulerAngles+0x116>
 7d6:	01 96       	adiw	r24, 0x01	; 1
 7d8:	95 95       	asr	r25
 7da:	87 95       	ror	r24
 7dc:	80 93 44 21 	sts	0x2144, r24
 7e0:	90 93 45 21 	sts	0x2145, r25
 7e4:	80 e0       	ldi	r24, 0x00	; 0
 7e6:	82 d1       	rcall	.+772    	; 0xaec <spiIMU_write_read>
 7e8:	80 e0       	ldi	r24, 0x00	; 0
 7ea:	80 d1       	rcall	.+768    	; 0xaec <spiIMU_write_read>
 7ec:	80 e1       	ldi	r24, 0x10	; 16
 7ee:	e0 ea       	ldi	r30, 0xA0	; 160
 7f0:	f6 e0       	ldi	r31, 0x06	; 6
 7f2:	85 83       	std	Z+5, r24	; 0x05
 7f4:	cf 91       	pop	r28
 7f6:	08 95       	ret

000007f8 <ControlLoop>:
 7f8:	80 91 74 21 	lds	r24, 0x2174
 7fc:	90 91 75 21 	lds	r25, 0x2175
 800:	01 96       	adiw	r24, 0x01	; 1
 802:	80 93 74 21 	sts	0x2174, r24
 806:	90 93 75 21 	sts	0x2175, r25
 80a:	5b df       	rcall	.-330    	; 0x6c2 <UpdateEulerAngles>
 80c:	8c e6       	ldi	r24, 0x6C	; 108
 80e:	90 e2       	ldi	r25, 0x20	; 32
 810:	16 dd       	rcall	.-1492   	; 0x23e <PI_attitude_rate>
 812:	80 e2       	ldi	r24, 0x20	; 32
 814:	91 e2       	ldi	r25, 0x21	; 33
 816:	13 dd       	rcall	.-1498   	; 0x23e <PI_attitude_rate>
 818:	8a e0       	ldi	r24, 0x0A	; 10
 81a:	90 e2       	ldi	r25, 0x20	; 32
 81c:	10 dd       	rcall	.-1504   	; 0x23e <PI_attitude_rate>
 81e:	e5 dd       	rcall	.-1078   	; 0x3ea <SetPulseWidths>
 820:	37 de       	rcall	.-914    	; 0x490 <sendUM6_Data>
 822:	80 91 74 21 	lds	r24, 0x2174
 826:	90 91 75 21 	lds	r25, 0x2175
 82a:	4f 97       	sbiw	r24, 0x1f	; 31
 82c:	48 f0       	brcs	.+18     	; 0x840 <ControlLoop+0x48>
 82e:	3d de       	rcall	.-902    	; 0x4aa <WriteToPC_SPI>
 830:	80 93 6a 20 	sts	0x206A, r24
 834:	90 93 6b 20 	sts	0x206B, r25
 838:	10 92 74 21 	sts	0x2174, r1
 83c:	10 92 75 21 	sts	0x2175, r1
 840:	08 95       	ret

00000842 <init32MHzClock>:
*********************************************************************************************************** */
void init32MHzClock(void)
{

	//	Enable the 32 MHz internal RC oscillator.
	OSC.CTRL|=OSC_RC32MEN_bm;
 842:	e0 e5       	ldi	r30, 0x50	; 80
 844:	f0 e0       	ldi	r31, 0x00	; 0
 846:	80 81       	ld	r24, Z
 848:	82 60       	ori	r24, 0x02	; 2
 84a:	80 83       	st	Z, r24
	//	The R32MRFY flag is set when the 32 MHz internal RC oscillator is stable
	//	and ready to be used as the System Clock source.
	while(!(OSC.STATUS &OSC_RC32MRDY_bm ));
 84c:	81 81       	ldd	r24, Z+1	; 0x01
 84e:	81 ff       	sbrs	r24, 1
 850:	fd cf       	rjmp	.-6      	; 0x84c <init32MHzClock+0xa>
	CCP=CCP_IOREG_gc;
 852:	88 ed       	ldi	r24, 0xD8	; 216
 854:	84 bf       	out	0x34, r24	; 52
	//	Select the 32MHz RC oscillator for the system clock
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
 856:	81 e0       	ldi	r24, 0x01	; 1
 858:	80 93 40 00 	sts	0x0040, r24
 85c:	08 95       	ret

0000085e <intiLoopTimer>:
void intiLoopTimer()
{
	

	// Set the timer prescale.
	TCD0.CTRLA = TC_CLKSEL_DIV4_gc;
 85e:	e0 e0       	ldi	r30, 0x00	; 0
 860:	f9 e0       	ldi	r31, 0x09	; 9
 862:	83 e0       	ldi	r24, 0x03	; 3
 864:	80 83       	st	Z, r24

	/* Configure the timer for normal counting. */
	TCD0.CTRLB = TC_WGMODE_NORMAL_gc;
 866:	11 82       	std	Z+1, r1	; 0x01

	
	
	//  32MHz / TC_CLKSEL_DIV4_gc
	TCD0.PER = 26666;  //  Need the time to overflow at 300Hz
 868:	8a e2       	ldi	r24, 0x2A	; 42
 86a:	98 e6       	ldi	r25, 0x68	; 104
 86c:	86 a3       	std	Z+38, r24	; 0x26
 86e:	97 a3       	std	Z+39, r25	; 0x27
	
	//TCD0.PER = 60000;
	//Configure timer to generate an interrupt on overflow. */
	TCD0.INTCTRLA = TC_OVFINTLVL_LO_gc;
 870:	81 e0       	ldi	r24, 0x01	; 1
 872:	86 83       	std	Z+6, r24	; 0x06

	/* Enable this interrupt level. */
	PMIC.CTRL |= PMIC_LOLVLEN_bm;
 874:	e0 ea       	ldi	r30, 0xA0	; 160
 876:	f0 e0       	ldi	r31, 0x00	; 0
 878:	82 81       	ldd	r24, Z+2	; 0x02
 87a:	81 60       	ori	r24, 0x01	; 1
 87c:	82 83       	std	Z+2, r24	; 0x02
 87e:	08 95       	ret

00000880 <zeroSensor>:




uint8_t zeroSensor()
{
 880:	1f 93       	push	r17
 882:	cf 93       	push	r28
 884:	df 93       	push	r29
	
	PORTF.OUTCLR = PIN4_bm;
 886:	c0 ea       	ldi	r28, 0xA0	; 160
 888:	d6 e0       	ldi	r29, 0x06	; 6
 88a:	10 e1       	ldi	r17, 0x10	; 16
 88c:	1e 83       	std	Y+6, r17	; 0x06
	//zero mad 0xB0
	
	//uint8_t dummy_read = 0x00;
	//psi = yaw  phi = roll    theta = pitch
	//0x01 0xAC 0x00 0x00 0x00 0x00
	dummy_read = spiIMU_write_read(WRITE_COMMAND);
 88e:	81 e0       	ldi	r24, 0x01	; 1
 890:	2d d1       	rcall	.+602    	; 0xaec <spiIMU_write_read>
 892:	80 93 61 20 	sts	0x2061, r24
	dummy_read = spiIMU_write_read(ZERO_GYROS);
 896:	8c ea       	ldi	r24, 0xAC	; 172
 898:	29 d1       	rcall	.+594    	; 0xaec <spiIMU_write_read>
 89a:	80 93 61 20 	sts	0x2061, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 89e:	80 e0       	ldi	r24, 0x00	; 0
 8a0:	25 d1       	rcall	.+586    	; 0xaec <spiIMU_write_read>
 8a2:	80 93 61 20 	sts	0x2061, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 8a6:	80 e0       	ldi	r24, 0x00	; 0
 8a8:	21 d1       	rcall	.+578    	; 0xaec <spiIMU_write_read>
 8aa:	80 93 61 20 	sts	0x2061, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 8ae:	80 e0       	ldi	r24, 0x00	; 0
 8b0:	1d d1       	rcall	.+570    	; 0xaec <spiIMU_write_read>
 8b2:	80 93 61 20 	sts	0x2061, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 8b6:	80 e0       	ldi	r24, 0x00	; 0
 8b8:	19 d1       	rcall	.+562    	; 0xaec <spiIMU_write_read>
 8ba:	80 93 61 20 	sts	0x2061, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 8be:	8f e8       	ldi	r24, 0x8F	; 143
 8c0:	91 e0       	ldi	r25, 0x01	; 1
 8c2:	01 97       	sbiw	r24, 0x01	; 1
 8c4:	f1 f7       	brne	.-4      	; 0x8c2 <zeroSensor+0x42>
 8c6:	00 c0       	rjmp	.+0      	; 0x8c8 <zeroSensor+0x48>
 8c8:	00 00       	nop
	
	_delay_us(50);
	dummy_read = spiIMU_write_read(WRITE_COMMAND);
 8ca:	81 e0       	ldi	r24, 0x01	; 1
 8cc:	0f d1       	rcall	.+542    	; 0xaec <spiIMU_write_read>
 8ce:	80 93 61 20 	sts	0x2061, r24
	dummy_read = spiIMU_write_read(SET_ACCEL_REF);
 8d2:	8f ea       	ldi	r24, 0xAF	; 175
 8d4:	0b d1       	rcall	.+534    	; 0xaec <spiIMU_write_read>
 8d6:	80 93 61 20 	sts	0x2061, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 8da:	80 e0       	ldi	r24, 0x00	; 0
 8dc:	07 d1       	rcall	.+526    	; 0xaec <spiIMU_write_read>
 8de:	80 93 61 20 	sts	0x2061, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 8e2:	80 e0       	ldi	r24, 0x00	; 0
 8e4:	03 d1       	rcall	.+518    	; 0xaec <spiIMU_write_read>
 8e6:	80 93 61 20 	sts	0x2061, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 8ea:	80 e0       	ldi	r24, 0x00	; 0
 8ec:	ff d0       	rcall	.+510    	; 0xaec <spiIMU_write_read>
 8ee:	80 93 61 20 	sts	0x2061, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 8f2:	80 e0       	ldi	r24, 0x00	; 0
 8f4:	fb d0       	rcall	.+502    	; 0xaec <spiIMU_write_read>
 8f6:	80 93 61 20 	sts	0x2061, r24
 8fa:	8f e8       	ldi	r24, 0x8F	; 143
 8fc:	91 e0       	ldi	r25, 0x01	; 1
 8fe:	01 97       	sbiw	r24, 0x01	; 1
 900:	f1 f7       	brne	.-4      	; 0x8fe <zeroSensor+0x7e>
 902:	00 c0       	rjmp	.+0      	; 0x904 <zeroSensor+0x84>
 904:	00 00       	nop
	

	_delay_us(50);
	dummy_read = spiIMU_write_read(WRITE_COMMAND);
 906:	81 e0       	ldi	r24, 0x01	; 1
 908:	f1 d0       	rcall	.+482    	; 0xaec <spiIMU_write_read>
 90a:	80 93 61 20 	sts	0x2061, r24
	dummy_read = spiIMU_write_read(SET_MAG_REF);
 90e:	80 eb       	ldi	r24, 0xB0	; 176
 910:	ed d0       	rcall	.+474    	; 0xaec <spiIMU_write_read>
 912:	80 93 61 20 	sts	0x2061, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 916:	80 e0       	ldi	r24, 0x00	; 0
 918:	e9 d0       	rcall	.+466    	; 0xaec <spiIMU_write_read>
 91a:	80 93 61 20 	sts	0x2061, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 91e:	80 e0       	ldi	r24, 0x00	; 0
 920:	e5 d0       	rcall	.+458    	; 0xaec <spiIMU_write_read>
 922:	80 93 61 20 	sts	0x2061, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 926:	80 e0       	ldi	r24, 0x00	; 0
 928:	e1 d0       	rcall	.+450    	; 0xaec <spiIMU_write_read>
 92a:	80 93 61 20 	sts	0x2061, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 92e:	80 e0       	ldi	r24, 0x00	; 0
 930:	dd d0       	rcall	.+442    	; 0xaec <spiIMU_write_read>
 932:	80 93 61 20 	sts	0x2061, r24
 936:	8f e8       	ldi	r24, 0x8F	; 143
 938:	91 e0       	ldi	r25, 0x01	; 1
 93a:	01 97       	sbiw	r24, 0x01	; 1
 93c:	f1 f7       	brne	.-4      	; 0x93a <zeroSensor+0xba>
 93e:	00 c0       	rjmp	.+0      	; 0x940 <zeroSensor+0xc0>
 940:	00 00       	nop
	
	_delay_us(50);
	dummy_read = spiIMU_write_read(WRITE_COMMAND);
 942:	81 e0       	ldi	r24, 0x01	; 1
 944:	d3 d0       	rcall	.+422    	; 0xaec <spiIMU_write_read>
 946:	80 93 61 20 	sts	0x2061, r24
	dummy_read = spiIMU_write_read(UM6_RESET_EKF);
 94a:	8d ea       	ldi	r24, 0xAD	; 173
 94c:	cf d0       	rcall	.+414    	; 0xaec <spiIMU_write_read>
 94e:	80 93 61 20 	sts	0x2061, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 952:	80 e0       	ldi	r24, 0x00	; 0
 954:	cb d0       	rcall	.+406    	; 0xaec <spiIMU_write_read>
 956:	80 93 61 20 	sts	0x2061, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 95a:	80 e0       	ldi	r24, 0x00	; 0
 95c:	c7 d0       	rcall	.+398    	; 0xaec <spiIMU_write_read>
 95e:	80 93 61 20 	sts	0x2061, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 962:	80 e0       	ldi	r24, 0x00	; 0
 964:	c3 d0       	rcall	.+390    	; 0xaec <spiIMU_write_read>
 966:	80 93 61 20 	sts	0x2061, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 96a:	80 e0       	ldi	r24, 0x00	; 0
 96c:	bf d0       	rcall	.+382    	; 0xaec <spiIMU_write_read>
 96e:	80 93 61 20 	sts	0x2061, r24
	

	PORTF.OUTSET = PIN4_bm;
 972:	1d 83       	std	Y+5, r17	; 0x05
	
	return 1;
	
}
 974:	81 e0       	ldi	r24, 0x01	; 1
 976:	df 91       	pop	r29
 978:	cf 91       	pop	r28
 97a:	1f 91       	pop	r17
 97c:	08 95       	ret

0000097e <initSystem>:
  DISCRIPTION:  Do all the pre control loop set up tasks
*********************************************************************************************************** */
uint8_t initSystem()
{

	sei();
 97e:	78 94       	sei
	initUART();
 980:	3f d1       	rcall	.+638    	; 0xc00 <initUART>
	spi_set_up();
 982:	c1 d0       	rcall	.+386    	; 0xb06 <spi_set_up>
	intPID_gains();
 984:	62 dd       	rcall	.-1340   	; 0x44a <intPID_gains>
	zeroSensor();
 986:	7c df       	rcall	.-264    	; 0x880 <zeroSensor>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 988:	2f ef       	ldi	r18, 0xFF	; 255
 98a:	8f e4       	ldi	r24, 0x4F	; 79
 98c:	93 ec       	ldi	r25, 0xC3	; 195
 98e:	21 50       	subi	r18, 0x01	; 1
 990:	80 40       	sbci	r24, 0x00	; 0
 992:	90 40       	sbci	r25, 0x00	; 0
 994:	e1 f7       	brne	.-8      	; 0x98e <initSystem+0x10>
 996:	00 c0       	rjmp	.+0      	; 0x998 <initSystem+0x1a>
 998:	00 00       	nop
	_delay_ms(2000);
	zeroSensor();
 99a:	72 df       	rcall	.-284    	; 0x880 <zeroSensor>
	yawAxis.trim = 0;
 99c:	10 92 72 21 	sts	0x2172, r1
 9a0:	10 92 73 21 	sts	0x2173, r1
	rollAxis.trim = 0;
 9a4:	10 92 5c 20 	sts	0x205C, r1
 9a8:	10 92 5d 20 	sts	0x205D, r1
	pitchAxis.trim = 0;
 9ac:	10 92 be 20 	sts	0x20BE, r1
 9b0:	10 92 bf 20 	sts	0x20BF, r1
	return 1;

}
 9b4:	81 e0       	ldi	r24, 0x01	; 1
 9b6:	08 95       	ret

000009b8 <main>:
OUTPUT:
DISCRIPTION: Main is used for set up and then just an infinite loop
*********************************************************************************************************** */
int main()
{
	PORTA.DIRSET = 0x0F;
 9b8:	8f e0       	ldi	r24, 0x0F	; 15
 9ba:	e0 e0       	ldi	r30, 0x00	; 0
 9bc:	f6 e0       	ldi	r31, 0x06	; 6
 9be:	81 83       	std	Z+1, r24	; 0x01
	systemState = SYSTEM_STATE_STARTUP;
 9c0:	8a ea       	ldi	r24, 0xAA	; 170
 9c2:	80 93 60 20 	sts	0x2060, r24
	init32MHzClock();
 9c6:	3d df       	rcall	.-390    	; 0x842 <init32MHzClock>
	initSystem();
 9c8:	da df       	rcall	.-76     	; 0x97e <initSystem>
	intiLoopTimer();
 9ca:	49 df       	rcall	.-366    	; 0x85e <intiLoopTimer>

	
	while(1)
	{
		nop();
 9cc:	00 00       	nop
 9ce:	fe cf       	rjmp	.-4      	; 0x9cc <main+0x14>

000009d0 <State>:
OUTPUT:
DISCRIPTION:   Determine what to do based on systemState.  Used to initializes and arm the quad.
*********************************************************************************************************** */
void State()
{
	LEDPORT.OUTTGL = PIN0_bm;
 9d0:	81 e0       	ldi	r24, 0x01	; 1
 9d2:	e0 e0       	ldi	r30, 0x00	; 0
 9d4:	f6 e0       	ldi	r31, 0x06	; 6
 9d6:	87 83       	std	Z+7, r24	; 0x07
	
	
	//UpdateEulerAngles_YEI_fast();
	switch(systemState)
 9d8:	80 91 60 20 	lds	r24, 0x2060
 9dc:	82 30       	cpi	r24, 0x02	; 2
 9de:	79 f1       	breq	.+94     	; 0xa3e <State+0x6e>
 9e0:	20 f4       	brcc	.+8      	; 0x9ea <State+0x1a>
 9e2:	81 30       	cpi	r24, 0x01	; 1
 9e4:	09 f0       	breq	.+2      	; 0x9e8 <State+0x18>
 9e6:	3d c0       	rjmp	.+122    	; 0xa62 <State+0x92>
 9e8:	0a c0       	rjmp	.+20     	; 0x9fe <State+0x2e>
 9ea:	84 30       	cpi	r24, 0x04	; 4
 9ec:	69 f1       	breq	.+90     	; 0xa48 <State+0x78>
 9ee:	8a 3a       	cpi	r24, 0xAA	; 170
 9f0:	c1 f5       	brne	.+112    	; 0xa62 <State+0x92>
	{
		case SYSTEM_STATE_STARTUP:
			
			
			if (initSystem() ==  1)
 9f2:	c5 df       	rcall	.-118    	; 0x97e <initSystem>
 9f4:	81 30       	cpi	r24, 0x01	; 1
 9f6:	a9 f5       	brne	.+106    	; 0xa62 <State+0x92>
			{
				systemState = SYSTEM_ZERO;
 9f8:	80 93 60 20 	sts	0x2060, r24
 9fc:	08 95       	ret
 9fe:	2f ef       	ldi	r18, 0xFF	; 255
 a00:	83 ec       	ldi	r24, 0xC3	; 195
 a02:	99 e0       	ldi	r25, 0x09	; 9
 a04:	21 50       	subi	r18, 0x01	; 1
 a06:	80 40       	sbci	r24, 0x00	; 0
 a08:	90 40       	sbci	r25, 0x00	; 0
 a0a:	e1 f7       	brne	.-8      	; 0xa04 <State+0x34>
 a0c:	00 c0       	rjmp	.+0      	; 0xa0e <State+0x3e>
 a0e:	00 00       	nop

			//LEDPORT.OUTTGL = PIN1_bm;
			// read commands from the PC and zero the system as necessary
			// PC transaction, read in command and send out sensor data
			_delay_ms(100);
			UpdateEulerAngles();
 a10:	58 de       	rcall	.-848    	; 0x6c2 <UpdateEulerAngles>
		
			//  get the last command sent form the PC, either zero the IMU or get ready to arm the system
			if ((cmdBytes = WriteToPC_SPI()) == SYSTEM_ZERO)
 a12:	4b dd       	rcall	.-1386   	; 0x4aa <WriteToPC_SPI>
 a14:	80 93 6a 20 	sts	0x206A, r24
 a18:	90 93 6b 20 	sts	0x206B, r25
 a1c:	01 97       	sbiw	r24, 0x01	; 1
 a1e:	29 f4       	brne	.+10     	; 0xa2a <State+0x5a>
			{
				LEDPORT.OUTSET = PIN1_bm;
 a20:	82 e0       	ldi	r24, 0x02	; 2
 a22:	e0 e0       	ldi	r30, 0x00	; 0
 a24:	f6 e0       	ldi	r31, 0x06	; 6
 a26:	85 83       	std	Z+5, r24	; 0x05
				zeroSensor();
 a28:	2b df       	rcall	.-426    	; 0x880 <zeroSensor>
				//LEDPORT.OUTCLR = PIN1_bm;
			}

			if (cmdBytes == SYSTEM_ARM)
 a2a:	80 91 6a 20 	lds	r24, 0x206A
 a2e:	90 91 6b 20 	lds	r25, 0x206B
 a32:	02 97       	sbiw	r24, 0x02	; 2
 a34:	b1 f4       	brne	.+44     	; 0xa62 <State+0x92>
			{
				systemState = SYSTEM_ARM;
 a36:	82 e0       	ldi	r24, 0x02	; 2
 a38:	80 93 60 20 	sts	0x2060, r24
 a3c:	08 95       	ret
			}

		break;

		case SYSTEM_ARM:
			initPWM();
 a3e:	97 dc       	rcall	.-1746   	; 0x36e <initPWM>
			systemState = SYSTEM_STATE_FLY;
 a40:	84 e0       	ldi	r24, 0x04	; 4
 a42:	80 93 60 20 	sts	0x2060, r24

		break;
 a46:	08 95       	ret

		case SYSTEM_STATE_FLY:
			// run the control loop
			LEDPORT.OUTTGL = PIN1_bm;
 a48:	82 e0       	ldi	r24, 0x02	; 2
 a4a:	e0 e0       	ldi	r30, 0x00	; 0
 a4c:	f6 e0       	ldi	r31, 0x06	; 6
 a4e:	87 83       	std	Z+7, r24	; 0x07
				if (cmdBytes  == SET_TRIM)
 a50:	80 91 6a 20 	lds	r24, 0x206A
 a54:	90 91 6b 20 	lds	r25, 0x206B
 a58:	06 97       	sbiw	r24, 0x06	; 6
 a5a:	11 f4       	brne	.+4      	; 0xa60 <State+0x90>
			{
				LEDPORT.OUTTGL = PIN2_bm;
 a5c:	84 e0       	ldi	r24, 0x04	; 4
 a5e:	87 83       	std	Z+7, r24	; 0x07
				//trim();
			}
			ControlLoop();
 a60:	cb ce       	rjmp	.-618    	; 0x7f8 <ControlLoop>
 a62:	08 95       	ret

00000a64 <__vector_77>:
  INPUT:
  OUTPUT:
  DISCRIPTION:   Interrupt vector
*********************************************************************************************************** */
ISR(TCD0_OVF_vect)
{
 a64:	1f 92       	push	r1
 a66:	0f 92       	push	r0
 a68:	0f b6       	in	r0, 0x3f	; 63
 a6a:	0f 92       	push	r0
 a6c:	11 24       	eor	r1, r1
 a6e:	08 b6       	in	r0, 0x38	; 56
 a70:	0f 92       	push	r0
 a72:	18 be       	out	0x38, r1	; 56
 a74:	09 b6       	in	r0, 0x39	; 57
 a76:	0f 92       	push	r0
 a78:	19 be       	out	0x39, r1	; 57
 a7a:	0b b6       	in	r0, 0x3b	; 59
 a7c:	0f 92       	push	r0
 a7e:	1b be       	out	0x3b, r1	; 59
 a80:	2f 93       	push	r18
 a82:	3f 93       	push	r19
 a84:	4f 93       	push	r20
 a86:	5f 93       	push	r21
 a88:	6f 93       	push	r22
 a8a:	7f 93       	push	r23
 a8c:	8f 93       	push	r24
 a8e:	9f 93       	push	r25
 a90:	af 93       	push	r26
 a92:	bf 93       	push	r27
 a94:	ef 93       	push	r30
 a96:	ff 93       	push	r31
	//LEDPORT.OUTTGL = PIN0_bm;
	TCD0.CNT = 0;
 a98:	e0 e0       	ldi	r30, 0x00	; 0
 a9a:	f9 e0       	ldi	r31, 0x09	; 9
 a9c:	10 a2       	std	Z+32, r1	; 0x20
 a9e:	11 a2       	std	Z+33, r1	; 0x21
	State();
 aa0:	97 df       	rcall	.-210    	; 0x9d0 <State>

}
 aa2:	ff 91       	pop	r31
 aa4:	ef 91       	pop	r30
 aa6:	bf 91       	pop	r27
 aa8:	af 91       	pop	r26
 aaa:	9f 91       	pop	r25
 aac:	8f 91       	pop	r24
 aae:	7f 91       	pop	r23
 ab0:	6f 91       	pop	r22
 ab2:	5f 91       	pop	r21
 ab4:	4f 91       	pop	r20
 ab6:	3f 91       	pop	r19
 ab8:	2f 91       	pop	r18
 aba:	0f 90       	pop	r0
 abc:	0b be       	out	0x3b, r0	; 59
 abe:	0f 90       	pop	r0
 ac0:	09 be       	out	0x39, r0	; 57
 ac2:	0f 90       	pop	r0
 ac4:	08 be       	out	0x38, r0	; 56
 ac6:	0f 90       	pop	r0
 ac8:	0f be       	out	0x3f, r0	; 63
 aca:	0f 90       	pop	r0
 acc:	1f 90       	pop	r1
 ace:	18 95       	reti

00000ad0 <spiPC_write_read>:
	SPIC.DATA = spi_data;
	while(!(SPIC.STATUS & SPI_IF_bm)); // Wait until the data transfer is complete
	_delay_us(6);
	return SPIC.DATA;

}
 ad0:	e0 ec       	ldi	r30, 0xC0	; 192
 ad2:	fa e0       	ldi	r31, 0x0A	; 10
 ad4:	83 83       	std	Z+3, r24	; 0x03
 ad6:	82 81       	ldd	r24, Z+2	; 0x02
 ad8:	88 23       	and	r24, r24
 ada:	ec f7       	brge	.-6      	; 0xad6 <spiPC_write_read+0x6>
 adc:	8a e2       	ldi	r24, 0x2A	; 42
 ade:	8a 95       	dec	r24
 ae0:	f1 f7       	brne	.-4      	; 0xade <spiPC_write_read+0xe>
 ae2:	00 c0       	rjmp	.+0      	; 0xae4 <spiPC_write_read+0x14>
 ae4:	e0 ec       	ldi	r30, 0xC0	; 192
 ae6:	fa e0       	ldi	r31, 0x0A	; 10
 ae8:	83 81       	ldd	r24, Z+3	; 0x03
 aea:	08 95       	ret

00000aec <spiIMU_write_read>:
 aec:	e0 ec       	ldi	r30, 0xC0	; 192
 aee:	fb e0       	ldi	r31, 0x0B	; 11
 af0:	83 83       	std	Z+3, r24	; 0x03
 af2:	82 81       	ldd	r24, Z+2	; 0x02
 af4:	88 23       	and	r24, r24
 af6:	ec f7       	brge	.-6      	; 0xaf2 <spiIMU_write_read+0x6>
 af8:	80 e2       	ldi	r24, 0x20	; 32
 afa:	8a 95       	dec	r24
 afc:	f1 f7       	brne	.-4      	; 0xafa <spiIMU_write_read+0xe>
 afe:	e0 ec       	ldi	r30, 0xC0	; 192
 b00:	fb e0       	ldi	r31, 0x0B	; 11
 b02:	83 81       	ldd	r24, Z+3	; 0x03
 b04:	08 95       	ret

00000b06 <spi_set_up>:
DISCRIPTION:    Initialize SPI master on port F for the IMU communication.
			    Initialize SPI master on port F for the PC communication
*********************************************************************************************************** */
	
void spi_set_up()
{
 b06:	af 92       	push	r10
 b08:	cf 92       	push	r12
 b0a:	ef 92       	push	r14
 b0c:	0f 93       	push	r16
 b0e:	cf 93       	push	r28
 b10:	df 93       	push	r29
	///* Initialize SPI master on port F for the IMU communication. */
	///* Init SS pin as output with wired AND and pull-up. */
	////*************************************************************
	PORTF.DIRSET = PIN4_bm;
 b12:	e0 ea       	ldi	r30, 0xA0	; 160
 b14:	f6 e0       	ldi	r31, 0x06	; 6
 b16:	c0 e1       	ldi	r28, 0x10	; 16
 b18:	c1 83       	std	Z+1, r28	; 0x01
	PORTF.PIN4CTRL = PORT_OPC_WIREDANDPULL_gc;
 b1a:	d8 e3       	ldi	r29, 0x38	; 56
 b1c:	d4 8b       	std	Z+20, r29	; 0x14

	/* Set SS output to high. (No slave addressed). */
	PORTF.OUTSET = PIN4_bm;
 b1e:	c5 83       	std	Z+5, r28	; 0x05

	/* Initialize SPI master on port F for the IMU communication. */
	SPI_MasterInit(&spiMasterF,
 b20:	0f 2e       	mov	r0, r31
 b22:	f3 e0       	ldi	r31, 0x03	; 3
 b24:	af 2e       	mov	r10, r31
 b26:	f0 2d       	mov	r31, r0
 b28:	c1 2c       	mov	r12, r1
 b2a:	e1 2c       	mov	r14, r1
 b2c:	00 e0       	ldi	r16, 0x00	; 0
 b2e:	20 e0       	ldi	r18, 0x00	; 0
 b30:	40 ea       	ldi	r20, 0xA0	; 160
 b32:	56 e0       	ldi	r21, 0x06	; 6
 b34:	60 ec       	ldi	r22, 0xC0	; 192
 b36:	7b e0       	ldi	r23, 0x0B	; 11
 b38:	8a e7       	ldi	r24, 0x7A	; 122
 b3a:	91 e2       	ldi	r25, 0x21	; 33
 b3c:	31 d0       	rcall	.+98     	; 0xba0 <SPI_MasterInit>
		SPI_MODE_0_gc,							//The UM6 SPI clock (SCK) is active high, with data clocked in on the first rising edge1
		SPI_INTLVL_OFF_gc,
		false,									// false to double clock mode
		SPI_PRESCALER_DIV128_gc);					//32MHz /128 = 250kHz  MAX rate is 400kHz but there is not prescaler

		SPIF.DATA = 0x00;						// init SPI data register
 b3e:	e0 ec       	ldi	r30, 0xC0	; 192
 b40:	fb e0       	ldi	r31, 0x0B	; 11
 b42:	13 82       	std	Z+3, r1	; 0x03
		
		
			///* Initialize SPI master on port F for the IMU communication. */
	///* Init SS pin as output with wired AND and pull-up. */
	////*************************************************************
	PORTC.DIRSET = PIN4_bm;
 b44:	e0 e4       	ldi	r30, 0x40	; 64
 b46:	f6 e0       	ldi	r31, 0x06	; 6
 b48:	c1 83       	std	Z+1, r28	; 0x01
	PORTC.PIN4CTRL = PORT_OPC_WIREDANDPULL_gc;
 b4a:	d4 8b       	std	Z+20, r29	; 0x14

	/* Set SS output to high. (No slave addressed). */
	PORTC.OUTSET = PIN4_bm;
 b4c:	c5 83       	std	Z+5, r28	; 0x05

	/* Initialize SPI master on port F for the IMU communication. */
	SPI_MasterInit(&spiMasterC,
 b4e:	68 94       	set
 b50:	aa 24       	eor	r10, r10
 b52:	a1 f8       	bld	r10, 1
 b54:	20 e0       	ldi	r18, 0x00	; 0
 b56:	40 e4       	ldi	r20, 0x40	; 64
 b58:	56 e0       	ldi	r21, 0x06	; 6
 b5a:	60 ec       	ldi	r22, 0xC0	; 192
 b5c:	78 e0       	ldi	r23, 0x08	; 8
 b5e:	81 e8       	ldi	r24, 0x81	; 129
 b60:	91 e2       	ldi	r25, 0x21	; 33
 b62:	1e d0       	rcall	.+60     	; 0xba0 <SPI_MasterInit>
		SPI_MODE_0_gc,							//The UM6 SPI clock (SCK) is active high, with data clocked in on the first rising edge1
		SPI_INTLVL_OFF_gc,
		false,									// false to double clock mode
		SPI_PRESCALER_DIV64_gc);				//32MHz /128 = 250kHz  MAX rate is 400kHz but there is not prescaler

		SPIC.DATA = 0x00;						// init SPI data register
 b64:	e0 ec       	ldi	r30, 0xC0	; 192
 b66:	f8 e0       	ldi	r31, 0x08	; 8
 b68:	13 82       	std	Z+3, r1	; 0x03
	
		
		/* Initialize SPI master on port F for the PC communication */
		//*************************************************************
		/* Init SS pin as output with wired AND and pull-up. */
		PORTE.DIRSET = PIN4_bm;
 b6a:	e0 e8       	ldi	r30, 0x80	; 128
 b6c:	f6 e0       	ldi	r31, 0x06	; 6
 b6e:	c1 83       	std	Z+1, r28	; 0x01
		PORTE.PIN4CTRL = PORT_OPC_WIREDANDPULL_gc;
 b70:	d4 8b       	std	Z+20, r29	; 0x14

		/* Set SS output to high. (No slave addressed). */
		PORTE.OUTSET = PIN4_bm;
 b72:	c5 83       	std	Z+5, r28	; 0x05

		SPI_MasterInit(&spiMasterE,
 b74:	0f 2e       	mov	r0, r31
 b76:	f3 e0       	ldi	r31, 0x03	; 3
 b78:	af 2e       	mov	r10, r31
 b7a:	f0 2d       	mov	r31, r0
 b7c:	20 e0       	ldi	r18, 0x00	; 0
 b7e:	40 e8       	ldi	r20, 0x80	; 128
 b80:	56 e0       	ldi	r21, 0x06	; 6
 b82:	60 ec       	ldi	r22, 0xC0	; 192
 b84:	7a e0       	ldi	r23, 0x0A	; 10
 b86:	88 e8       	ldi	r24, 0x88	; 136
 b88:	91 e2       	ldi	r25, 0x21	; 33
 b8a:	0a d0       	rcall	.+20     	; 0xba0 <SPI_MasterInit>
		false,
		SPI_MODE_0_gc,							//The UM6 SPI clock (SCK) is active high, with data clocked in on the first rising edge1
		SPI_INTLVL_OFF_gc,
		false,									// false to double clock mode
		SPI_PRESCALER_DIV128_gc);				//32MHz /64 = 500,000 bps
		SPIE.DATA = 0x00;						// init SPI data register
 b8c:	e0 ec       	ldi	r30, 0xC0	; 192
 b8e:	fa e0       	ldi	r31, 0x0A	; 10
 b90:	13 82       	std	Z+3, r1	; 0x03

}
 b92:	df 91       	pop	r29
 b94:	cf 91       	pop	r28
 b96:	0f 91       	pop	r16
 b98:	ef 90       	pop	r14
 b9a:	cf 90       	pop	r12
 b9c:	af 90       	pop	r10
 b9e:	08 95       	ret

00000ba0 <SPI_MasterInit>:
                    bool lsbFirst,
                    SPI_MODE_t mode,
                    SPI_INTLVL_t intLevel,
                    bool clk2x,
                    SPI_PRESCALER_t clockDivision)
{
 ba0:	af 92       	push	r10
 ba2:	cf 92       	push	r12
 ba4:	ef 92       	push	r14
 ba6:	0f 93       	push	r16
 ba8:	fc 01       	movw	r30, r24
	spi->module         = module;
 baa:	60 83       	st	Z, r22
 bac:	71 83       	std	Z+1, r23	; 0x01
	spi->port           = port;
 bae:	42 83       	std	Z+2, r20	; 0x02
 bb0:	53 83       	std	Z+3, r21	; 0x03
	spi->interrupted    = false;
 bb2:	14 82       	std	Z+4, r1	; 0x04

	spi->module->CTRL   = clockDivision |                  /* SPI prescaler. */
 bb4:	cc 20       	and	r12, r12
 bb6:	11 f0       	breq	.+4      	; 0xbbc <SPI_MasterInit+0x1c>
 bb8:	90 e8       	ldi	r25, 0x80	; 128
 bba:	01 c0       	rjmp	.+2      	; 0xbbe <SPI_MasterInit+0x1e>
 bbc:	90 e0       	ldi	r25, 0x00	; 0
 bbe:	22 23       	and	r18, r18
 bc0:	11 f0       	breq	.+4      	; 0xbc6 <SPI_MasterInit+0x26>
 bc2:	80 e2       	ldi	r24, 0x20	; 32
 bc4:	01 c0       	rjmp	.+2      	; 0xbc8 <SPI_MasterInit+0x28>
 bc6:	80 e0       	ldi	r24, 0x00	; 0
 bc8:	00 65       	ori	r16, 0x50	; 80
 bca:	0a 29       	or	r16, r10
 bcc:	09 2b       	or	r16, r25
 bce:	08 2b       	or	r16, r24
 bd0:	db 01       	movw	r26, r22
 bd2:	0c 93       	st	X, r16
	                      (lsbFirst ? SPI_DORD_bm  : 0) |  /* Data order. */
	                      SPI_MASTER_bm |                  /* SPI master. */
	                      mode;                            /* SPI mode. */

	/* Interrupt level. */
	spi->module->INTCTRL = intLevel;
 bd4:	a0 81       	ld	r26, Z
 bd6:	b1 81       	ldd	r27, Z+1	; 0x01
 bd8:	11 96       	adiw	r26, 0x01	; 1
 bda:	ec 92       	st	X, r14

	/* No assigned data packet. */
	spi->dataPacket = NULL;
 bdc:	15 82       	std	Z+5, r1	; 0x05
 bde:	16 82       	std	Z+6, r1	; 0x06

 	/* MOSI and SCK as output. */
	spi->port->DIRSET  = SPI_MOSI_bm | SPI_SCK_bm;
 be0:	02 80       	ldd	r0, Z+2	; 0x02
 be2:	f3 81       	ldd	r31, Z+3	; 0x03
 be4:	e0 2d       	mov	r30, r0
 be6:	80 ea       	ldi	r24, 0xA0	; 160
 be8:	81 83       	std	Z+1, r24	; 0x01
}
 bea:	0f 91       	pop	r16
 bec:	ef 90       	pop	r14
 bee:	cf 90       	pop	r12
 bf0:	af 90       	pop	r10
 bf2:	08 95       	ret

00000bf4 <TC0_ConfigClockSource>:
 *  \param tc              Timer/Counter module instance.
 *  \param clockSelection  Timer/Counter clock source setting.
 */
void TC0_ConfigClockSource( volatile TC0_t * tc, TC_CLKSEL_t clockSelection )
{
	tc->CTRLA = ( tc->CTRLA & ~TC0_CLKSEL_gm ) | clockSelection;
 bf4:	fc 01       	movw	r30, r24
 bf6:	20 81       	ld	r18, Z
 bf8:	20 7f       	andi	r18, 0xF0	; 240
 bfa:	62 2b       	or	r22, r18
 bfc:	60 83       	st	Z, r22
 bfe:	08 95       	ret

00000c00 <initUART>:
void initUART()
{
	
	//  XBEE on USARTD1
	/* PD6 (RXD1) input*/
	PORTD.DIRCLR = PIN6_bm;
 c00:	e0 e6       	ldi	r30, 0x60	; 96
 c02:	f6 e0       	ldi	r31, 0x06	; 6
 c04:	90 e4       	ldi	r25, 0x40	; 64
 c06:	92 83       	std	Z+2, r25	; 0x02
	/* PD7 (TXD1) as output. */
	PORTD.DIRSET = PIN7_bm;
 c08:	80 e8       	ldi	r24, 0x80	; 128
 c0a:	81 83       	std	Z+1, r24	; 0x01
	
	
	//  IMU on USARTC1
	/* PC6 (RXD1) input*/
	PORTC.DIRCLR = PIN6_bm;
 c0c:	e0 e4       	ldi	r30, 0x40	; 64
 c0e:	f6 e0       	ldi	r31, 0x06	; 6
 c10:	92 83       	std	Z+2, r25	; 0x02
	/* PD7 (TXD1) as output. */
	PORTC.DIRSET = PIN7_bm;
 c12:	81 83       	std	Z+1, r24	; 0x01
	
	USART_Format_Set(&XBEE_USART, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, true);
 c14:	e0 eb       	ldi	r30, 0xB0	; 176
 c16:	f9 e0       	ldi	r31, 0x09	; 9
 c18:	8b e0       	ldi	r24, 0x0B	; 11
 c1a:	85 83       	std	Z+5, r24	; 0x05
	USART_Baudrate_Set(&XBEE_USART, 1047 , -6);			// set for 32MHZ and 115200
 c1c:	87 e1       	ldi	r24, 0x17	; 23
 c1e:	86 83       	std	Z+6, r24	; 0x06
 c20:	84 ea       	ldi	r24, 0xA4	; 164
 c22:	87 83       	std	Z+7, r24	; 0x07
	
	/* Enable both RX and TX. */
	USART_Rx_Enable(&XBEE_USART);
 c24:	84 81       	ldd	r24, Z+4	; 0x04
 c26:	80 61       	ori	r24, 0x10	; 16
 c28:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(&XBEE_USART);
 c2a:	84 81       	ldd	r24, Z+4	; 0x04
 c2c:	88 60       	ori	r24, 0x08	; 8
 c2e:	84 83       	std	Z+4, r24	; 0x04
 c30:	08 95       	ret

00000c32 <put_USART_PC_char>:
void put_USART_PC_char(uint8_t sendThis)
{

	do{

	}while(!USART_IsTXDataRegisterEmpty(&XBEE_USART));
 c32:	e0 eb       	ldi	r30, 0xB0	; 176
 c34:	f9 e0       	ldi	r31, 0x09	; 9
 c36:	91 81       	ldd	r25, Z+1	; 0x01
 c38:	95 ff       	sbrs	r25, 5
 c3a:	fd cf       	rjmp	.-6      	; 0xc36 <put_USART_PC_char+0x4>
	USART_PutChar(&XBEE_USART, sendThis);
 c3c:	80 93 b0 09 	sts	0x09B0, r24
 c40:	08 95       	ret

00000c42 <sendData_int16_t>:
}


//send 16 bit data on USART, 2 bytes
void sendData_int16_t(int16_t sendthis)
{
 c42:	cf 93       	push	r28
 c44:	df 93       	push	r29
 c46:	ec 01       	movw	r28, r24
	put_USART_PC_char( MASK_TOP_BYTE & (sendthis >> 8));
 c48:	8d 2f       	mov	r24, r29
 c4a:	90 e0       	ldi	r25, 0x00	; 0
 c4c:	f2 df       	rcall	.-28     	; 0xc32 <put_USART_PC_char>
	put_USART_PC_char (MASK_TOP_BYTE & sendthis);
 c4e:	ce 01       	movw	r24, r28
 c50:	99 27       	eor	r25, r25
 c52:	ef df       	rcall	.-34     	; 0xc32 <put_USART_PC_char>
}
 c54:	df 91       	pop	r29
 c56:	cf 91       	pop	r28
 c58:	08 95       	ret

00000c5a <__divmodhi4>:
 c5a:	97 fb       	bst	r25, 7
 c5c:	07 2e       	mov	r0, r23
 c5e:	16 f4       	brtc	.+4      	; 0xc64 <__divmodhi4+0xa>
 c60:	00 94       	com	r0
 c62:	06 d0       	rcall	.+12     	; 0xc70 <__divmodhi4_neg1>
 c64:	77 fd       	sbrc	r23, 7
 c66:	08 d0       	rcall	.+16     	; 0xc78 <__divmodhi4_neg2>
 c68:	0b d0       	rcall	.+22     	; 0xc80 <__udivmodhi4>
 c6a:	07 fc       	sbrc	r0, 7
 c6c:	05 d0       	rcall	.+10     	; 0xc78 <__divmodhi4_neg2>
 c6e:	3e f4       	brtc	.+14     	; 0xc7e <__divmodhi4_exit>

00000c70 <__divmodhi4_neg1>:
 c70:	90 95       	com	r25
 c72:	81 95       	neg	r24
 c74:	9f 4f       	sbci	r25, 0xFF	; 255
 c76:	08 95       	ret

00000c78 <__divmodhi4_neg2>:
 c78:	70 95       	com	r23
 c7a:	61 95       	neg	r22
 c7c:	7f 4f       	sbci	r23, 0xFF	; 255

00000c7e <__divmodhi4_exit>:
 c7e:	08 95       	ret

00000c80 <__udivmodhi4>:
 c80:	aa 1b       	sub	r26, r26
 c82:	bb 1b       	sub	r27, r27
 c84:	51 e1       	ldi	r21, 0x11	; 17
 c86:	07 c0       	rjmp	.+14     	; 0xc96 <__udivmodhi4_ep>

00000c88 <__udivmodhi4_loop>:
 c88:	aa 1f       	adc	r26, r26
 c8a:	bb 1f       	adc	r27, r27
 c8c:	a6 17       	cp	r26, r22
 c8e:	b7 07       	cpc	r27, r23
 c90:	10 f0       	brcs	.+4      	; 0xc96 <__udivmodhi4_ep>
 c92:	a6 1b       	sub	r26, r22
 c94:	b7 0b       	sbc	r27, r23

00000c96 <__udivmodhi4_ep>:
 c96:	88 1f       	adc	r24, r24
 c98:	99 1f       	adc	r25, r25
 c9a:	5a 95       	dec	r21
 c9c:	a9 f7       	brne	.-22     	; 0xc88 <__udivmodhi4_loop>
 c9e:	80 95       	com	r24
 ca0:	90 95       	com	r25
 ca2:	bc 01       	movw	r22, r24
 ca4:	cd 01       	movw	r24, r26
 ca6:	08 95       	ret

00000ca8 <_exit>:
 ca8:	f8 94       	cli

00000caa <__stop_program>:
 caa:	ff cf       	rjmp	.-2      	; 0xcaa <__stop_program>
