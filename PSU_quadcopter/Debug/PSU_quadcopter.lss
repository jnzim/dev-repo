
PSU_quadcopter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c48  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00802000  00000c48  00000cdc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000013c  00802008  00802008  00000ce4  2**0
                  ALLOC
  3 .stab         00000714  00000000  00000000  00000ce4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  000013f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000148f  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000002d0  00000000  00000000  000014be  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004757  00000000  00000000  0000178e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000cc2  00000000  00000000  00005ee5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001ae4  00000000  00000000  00006ba7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000006dc  00000000  00000000  0000868c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001954  00000000  00000000  00008d68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001675  00000000  00000000  0000a6bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000260  00000000  00000000  0000bd31  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	f9 c0       	rjmp	.+498    	; 0x1f4 <__ctors_end>
   2:	00 00       	nop
   4:	1b c1       	rjmp	.+566    	; 0x23c <__bad_interrupt>
   6:	00 00       	nop
   8:	19 c1       	rjmp	.+562    	; 0x23c <__bad_interrupt>
   a:	00 00       	nop
   c:	17 c1       	rjmp	.+558    	; 0x23c <__bad_interrupt>
   e:	00 00       	nop
  10:	15 c1       	rjmp	.+554    	; 0x23c <__bad_interrupt>
  12:	00 00       	nop
  14:	13 c1       	rjmp	.+550    	; 0x23c <__bad_interrupt>
  16:	00 00       	nop
  18:	11 c1       	rjmp	.+546    	; 0x23c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	0f c1       	rjmp	.+542    	; 0x23c <__bad_interrupt>
  1e:	00 00       	nop
  20:	0d c1       	rjmp	.+538    	; 0x23c <__bad_interrupt>
  22:	00 00       	nop
  24:	0b c1       	rjmp	.+534    	; 0x23c <__bad_interrupt>
  26:	00 00       	nop
  28:	09 c1       	rjmp	.+530    	; 0x23c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	07 c1       	rjmp	.+526    	; 0x23c <__bad_interrupt>
  2e:	00 00       	nop
  30:	05 c1       	rjmp	.+522    	; 0x23c <__bad_interrupt>
  32:	00 00       	nop
  34:	03 c1       	rjmp	.+518    	; 0x23c <__bad_interrupt>
  36:	00 00       	nop
  38:	01 c1       	rjmp	.+514    	; 0x23c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	ff c0       	rjmp	.+510    	; 0x23c <__bad_interrupt>
  3e:	00 00       	nop
  40:	fd c0       	rjmp	.+506    	; 0x23c <__bad_interrupt>
  42:	00 00       	nop
  44:	fb c0       	rjmp	.+502    	; 0x23c <__bad_interrupt>
  46:	00 00       	nop
  48:	f9 c0       	rjmp	.+498    	; 0x23c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	f7 c0       	rjmp	.+494    	; 0x23c <__bad_interrupt>
  4e:	00 00       	nop
  50:	f5 c0       	rjmp	.+490    	; 0x23c <__bad_interrupt>
  52:	00 00       	nop
  54:	f3 c0       	rjmp	.+486    	; 0x23c <__bad_interrupt>
  56:	00 00       	nop
  58:	f1 c0       	rjmp	.+482    	; 0x23c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	ef c0       	rjmp	.+478    	; 0x23c <__bad_interrupt>
  5e:	00 00       	nop
  60:	ed c0       	rjmp	.+474    	; 0x23c <__bad_interrupt>
  62:	00 00       	nop
  64:	eb c0       	rjmp	.+470    	; 0x23c <__bad_interrupt>
  66:	00 00       	nop
  68:	e9 c0       	rjmp	.+466    	; 0x23c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	e7 c0       	rjmp	.+462    	; 0x23c <__bad_interrupt>
  6e:	00 00       	nop
  70:	e5 c0       	rjmp	.+458    	; 0x23c <__bad_interrupt>
  72:	00 00       	nop
  74:	e3 c0       	rjmp	.+454    	; 0x23c <__bad_interrupt>
  76:	00 00       	nop
  78:	e1 c0       	rjmp	.+450    	; 0x23c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	df c0       	rjmp	.+446    	; 0x23c <__bad_interrupt>
  7e:	00 00       	nop
  80:	dd c0       	rjmp	.+442    	; 0x23c <__bad_interrupt>
  82:	00 00       	nop
  84:	db c0       	rjmp	.+438    	; 0x23c <__bad_interrupt>
  86:	00 00       	nop
  88:	d9 c0       	rjmp	.+434    	; 0x23c <__bad_interrupt>
  8a:	00 00       	nop
  8c:	d7 c0       	rjmp	.+430    	; 0x23c <__bad_interrupt>
  8e:	00 00       	nop
  90:	d5 c0       	rjmp	.+426    	; 0x23c <__bad_interrupt>
  92:	00 00       	nop
  94:	d3 c0       	rjmp	.+422    	; 0x23c <__bad_interrupt>
  96:	00 00       	nop
  98:	d1 c0       	rjmp	.+418    	; 0x23c <__bad_interrupt>
  9a:	00 00       	nop
  9c:	cf c0       	rjmp	.+414    	; 0x23c <__bad_interrupt>
  9e:	00 00       	nop
  a0:	cd c0       	rjmp	.+410    	; 0x23c <__bad_interrupt>
  a2:	00 00       	nop
  a4:	cb c0       	rjmp	.+406    	; 0x23c <__bad_interrupt>
  a6:	00 00       	nop
  a8:	c9 c0       	rjmp	.+402    	; 0x23c <__bad_interrupt>
  aa:	00 00       	nop
  ac:	c7 c0       	rjmp	.+398    	; 0x23c <__bad_interrupt>
  ae:	00 00       	nop
  b0:	c5 c0       	rjmp	.+394    	; 0x23c <__bad_interrupt>
  b2:	00 00       	nop
  b4:	c3 c0       	rjmp	.+390    	; 0x23c <__bad_interrupt>
  b6:	00 00       	nop
  b8:	c1 c0       	rjmp	.+386    	; 0x23c <__bad_interrupt>
  ba:	00 00       	nop
  bc:	bf c0       	rjmp	.+382    	; 0x23c <__bad_interrupt>
  be:	00 00       	nop
  c0:	bd c0       	rjmp	.+378    	; 0x23c <__bad_interrupt>
  c2:	00 00       	nop
  c4:	bb c0       	rjmp	.+374    	; 0x23c <__bad_interrupt>
  c6:	00 00       	nop
  c8:	b9 c0       	rjmp	.+370    	; 0x23c <__bad_interrupt>
  ca:	00 00       	nop
  cc:	b7 c0       	rjmp	.+366    	; 0x23c <__bad_interrupt>
  ce:	00 00       	nop
  d0:	b5 c0       	rjmp	.+362    	; 0x23c <__bad_interrupt>
  d2:	00 00       	nop
  d4:	b3 c0       	rjmp	.+358    	; 0x23c <__bad_interrupt>
  d6:	00 00       	nop
  d8:	b1 c0       	rjmp	.+354    	; 0x23c <__bad_interrupt>
  da:	00 00       	nop
  dc:	af c0       	rjmp	.+350    	; 0x23c <__bad_interrupt>
  de:	00 00       	nop
  e0:	ad c0       	rjmp	.+346    	; 0x23c <__bad_interrupt>
  e2:	00 00       	nop
  e4:	ab c0       	rjmp	.+342    	; 0x23c <__bad_interrupt>
  e6:	00 00       	nop
  e8:	a9 c0       	rjmp	.+338    	; 0x23c <__bad_interrupt>
  ea:	00 00       	nop
  ec:	a7 c0       	rjmp	.+334    	; 0x23c <__bad_interrupt>
  ee:	00 00       	nop
  f0:	a5 c0       	rjmp	.+330    	; 0x23c <__bad_interrupt>
  f2:	00 00       	nop
  f4:	a3 c0       	rjmp	.+326    	; 0x23c <__bad_interrupt>
  f6:	00 00       	nop
  f8:	a1 c0       	rjmp	.+322    	; 0x23c <__bad_interrupt>
  fa:	00 00       	nop
  fc:	9f c0       	rjmp	.+318    	; 0x23c <__bad_interrupt>
  fe:	00 00       	nop
 100:	9d c0       	rjmp	.+314    	; 0x23c <__bad_interrupt>
 102:	00 00       	nop
 104:	9b c0       	rjmp	.+310    	; 0x23c <__bad_interrupt>
 106:	00 00       	nop
 108:	99 c0       	rjmp	.+306    	; 0x23c <__bad_interrupt>
 10a:	00 00       	nop
 10c:	97 c0       	rjmp	.+302    	; 0x23c <__bad_interrupt>
 10e:	00 00       	nop
 110:	95 c0       	rjmp	.+298    	; 0x23c <__bad_interrupt>
 112:	00 00       	nop
 114:	93 c0       	rjmp	.+294    	; 0x23c <__bad_interrupt>
 116:	00 00       	nop
 118:	91 c0       	rjmp	.+290    	; 0x23c <__bad_interrupt>
 11a:	00 00       	nop
 11c:	8f c0       	rjmp	.+286    	; 0x23c <__bad_interrupt>
 11e:	00 00       	nop
 120:	8d c0       	rjmp	.+282    	; 0x23c <__bad_interrupt>
 122:	00 00       	nop
 124:	8b c0       	rjmp	.+278    	; 0x23c <__bad_interrupt>
 126:	00 00       	nop
 128:	89 c0       	rjmp	.+274    	; 0x23c <__bad_interrupt>
 12a:	00 00       	nop
 12c:	87 c0       	rjmp	.+270    	; 0x23c <__bad_interrupt>
 12e:	00 00       	nop
 130:	85 c0       	rjmp	.+266    	; 0x23c <__bad_interrupt>
 132:	00 00       	nop
 134:	8e c4       	rjmp	.+2332   	; 0xa52 <__vector_77>
 136:	00 00       	nop
 138:	81 c0       	rjmp	.+258    	; 0x23c <__bad_interrupt>
 13a:	00 00       	nop
 13c:	7f c0       	rjmp	.+254    	; 0x23c <__bad_interrupt>
 13e:	00 00       	nop
 140:	7d c0       	rjmp	.+250    	; 0x23c <__bad_interrupt>
 142:	00 00       	nop
 144:	7b c0       	rjmp	.+246    	; 0x23c <__bad_interrupt>
 146:	00 00       	nop
 148:	79 c0       	rjmp	.+242    	; 0x23c <__bad_interrupt>
 14a:	00 00       	nop
 14c:	77 c0       	rjmp	.+238    	; 0x23c <__bad_interrupt>
 14e:	00 00       	nop
 150:	75 c0       	rjmp	.+234    	; 0x23c <__bad_interrupt>
 152:	00 00       	nop
 154:	73 c0       	rjmp	.+230    	; 0x23c <__bad_interrupt>
 156:	00 00       	nop
 158:	71 c0       	rjmp	.+226    	; 0x23c <__bad_interrupt>
 15a:	00 00       	nop
 15c:	6f c0       	rjmp	.+222    	; 0x23c <__bad_interrupt>
 15e:	00 00       	nop
 160:	6d c0       	rjmp	.+218    	; 0x23c <__bad_interrupt>
 162:	00 00       	nop
 164:	6b c0       	rjmp	.+214    	; 0x23c <__bad_interrupt>
 166:	00 00       	nop
 168:	69 c0       	rjmp	.+210    	; 0x23c <__bad_interrupt>
 16a:	00 00       	nop
 16c:	67 c0       	rjmp	.+206    	; 0x23c <__bad_interrupt>
 16e:	00 00       	nop
 170:	65 c0       	rjmp	.+202    	; 0x23c <__bad_interrupt>
 172:	00 00       	nop
 174:	63 c0       	rjmp	.+198    	; 0x23c <__bad_interrupt>
 176:	00 00       	nop
 178:	61 c0       	rjmp	.+194    	; 0x23c <__bad_interrupt>
 17a:	00 00       	nop
 17c:	5f c0       	rjmp	.+190    	; 0x23c <__bad_interrupt>
 17e:	00 00       	nop
 180:	5d c0       	rjmp	.+186    	; 0x23c <__bad_interrupt>
 182:	00 00       	nop
 184:	5b c0       	rjmp	.+182    	; 0x23c <__bad_interrupt>
 186:	00 00       	nop
 188:	59 c0       	rjmp	.+178    	; 0x23c <__bad_interrupt>
 18a:	00 00       	nop
 18c:	57 c0       	rjmp	.+174    	; 0x23c <__bad_interrupt>
 18e:	00 00       	nop
 190:	55 c0       	rjmp	.+170    	; 0x23c <__bad_interrupt>
 192:	00 00       	nop
 194:	53 c0       	rjmp	.+166    	; 0x23c <__bad_interrupt>
 196:	00 00       	nop
 198:	51 c0       	rjmp	.+162    	; 0x23c <__bad_interrupt>
 19a:	00 00       	nop
 19c:	4f c0       	rjmp	.+158    	; 0x23c <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	4d c0       	rjmp	.+154    	; 0x23c <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	4b c0       	rjmp	.+150    	; 0x23c <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	49 c0       	rjmp	.+146    	; 0x23c <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	47 c0       	rjmp	.+142    	; 0x23c <__bad_interrupt>
 1ae:	00 00       	nop
 1b0:	45 c0       	rjmp	.+138    	; 0x23c <__bad_interrupt>
 1b2:	00 00       	nop
 1b4:	43 c0       	rjmp	.+134    	; 0x23c <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	41 c0       	rjmp	.+130    	; 0x23c <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	3f c0       	rjmp	.+126    	; 0x23c <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	3d c0       	rjmp	.+122    	; 0x23c <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	3b c0       	rjmp	.+118    	; 0x23c <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	39 c0       	rjmp	.+114    	; 0x23c <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	37 c0       	rjmp	.+110    	; 0x23c <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	35 c0       	rjmp	.+106    	; 0x23c <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	33 c0       	rjmp	.+102    	; 0x23c <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	31 c0       	rjmp	.+98     	; 0x23c <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	2f c0       	rjmp	.+94     	; 0x23c <__bad_interrupt>
 1de:	00 00       	nop
 1e0:	2d c0       	rjmp	.+90     	; 0x23c <__bad_interrupt>
 1e2:	00 00       	nop
 1e4:	2b c0       	rjmp	.+86     	; 0x23c <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	29 c0       	rjmp	.+82     	; 0x23c <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	27 c0       	rjmp	.+78     	; 0x23c <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	25 c0       	rjmp	.+74     	; 0x23c <__bad_interrupt>
	...

000001f4 <__ctors_end>:
 1f4:	11 24       	eor	r1, r1
 1f6:	1f be       	out	0x3f, r1	; 63
 1f8:	cf ef       	ldi	r28, 0xFF	; 255
 1fa:	df e3       	ldi	r29, 0x3F	; 63
 1fc:	de bf       	out	0x3e, r29	; 62
 1fe:	cd bf       	out	0x3d, r28	; 61
 200:	00 e0       	ldi	r16, 0x00	; 0
 202:	0c bf       	out	0x3c, r16	; 60
 204:	18 be       	out	0x38, r1	; 56
 206:	19 be       	out	0x39, r1	; 57
 208:	1a be       	out	0x3a, r1	; 58
 20a:	1b be       	out	0x3b, r1	; 59

0000020c <__do_copy_data>:
 20c:	10 e2       	ldi	r17, 0x20	; 32
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	e8 e4       	ldi	r30, 0x48	; 72
 214:	fc e0       	ldi	r31, 0x0C	; 12
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	0b bf       	out	0x3b, r16	; 59
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
 21c:	07 90       	elpm	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	a8 30       	cpi	r26, 0x08	; 8
 222:	b1 07       	cpc	r27, r17
 224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>
 226:	1b be       	out	0x3b, r1	; 59

00000228 <__do_clear_bss>:
 228:	21 e2       	ldi	r18, 0x21	; 33
 22a:	a8 e0       	ldi	r26, 0x08	; 8
 22c:	b0 e2       	ldi	r27, 0x20	; 32
 22e:	01 c0       	rjmp	.+2      	; 0x232 <.do_clear_bss_start>

00000230 <.do_clear_bss_loop>:
 230:	1d 92       	st	X+, r1

00000232 <.do_clear_bss_start>:
 232:	a4 34       	cpi	r26, 0x44	; 68
 234:	b2 07       	cpc	r27, r18
 236:	e1 f7       	brne	.-8      	; 0x230 <.do_clear_bss_loop>
 238:	77 d3       	rcall	.+1774   	; 0x928 <main>
 23a:	04 c5       	rjmp	.+2568   	; 0xc44 <_exit>

0000023c <__bad_interrupt>:
 23c:	e1 ce       	rjmp	.-574    	; 0x0 <__vectors>

0000023e <PI_attitude_rate>:
INPUT:
OUTPUT:
DISCRIPTION:  nest PI loops, with the rate loop on the insidea
*********************************************************************************************************** */
void PI_attitude_rate(PID_data *pid_data)
{
 23e:	0f 93       	push	r16
 240:	1f 93       	push	r17
 242:	cf 93       	push	r28
 244:	df 93       	push	r29
 246:	fc 01       	movw	r30, r24
	
	int16_t attitude_loop_out;
	// calculate the current attitude error
	// this is nested loop so we take the output of the rate loop to calculate the error 	
	pid_data->attitude_error = pid_data->attitude_command - pid_data->pid_total;
 248:	22 a1       	ldd	r18, Z+34	; 0x22
 24a:	33 a1       	ldd	r19, Z+35	; 0x23
 24c:	84 8d       	ldd	r24, Z+28	; 0x1c
 24e:	95 8d       	ldd	r25, Z+29	; 0x1d
 250:	28 1b       	sub	r18, r24
 252:	39 0b       	sbc	r19, r25
 254:	22 a7       	std	Z+42, r18	; 0x2a
 256:	33 a7       	std	Z+43, r19	; 0x2b
	
	//  keep track of the last 3 error samples for the integral calculation 
	pid_data->previousError0 = pid_data->previousError1;
 258:	40 ad       	ldd	r20, Z+56	; 0x38
 25a:	51 ad       	ldd	r21, Z+57	; 0x39
 25c:	46 ab       	std	Z+54, r20	; 0x36
 25e:	57 ab       	std	Z+55, r21	; 0x37
	pid_data->previousError1 = pid_data->previousError2;
 260:	82 ad       	ldd	r24, Z+58	; 0x3a
 262:	93 ad       	ldd	r25, Z+59	; 0x3b
 264:	80 af       	std	Z+56, r24	; 0x38
 266:	91 af       	std	Z+57, r25	; 0x39
	pid_data->previousError2 = pid_data->attitude_error;
 268:	22 af       	std	Z+58, r18	; 0x3a
 26a:	33 af       	std	Z+59, r19	; 0x3b
	
	//  calculate the attitude loop integral 
	pid_data->attitude_integral = pid_data->attitude_error + pid_data->previousError0 + pid_data->previousError1 + pid_data->previousError2;
 26c:	42 0f       	add	r20, r18
 26e:	53 1f       	adc	r21, r19
 270:	84 0f       	add	r24, r20
 272:	95 1f       	adc	r25, r21
 274:	82 0f       	add	r24, r18
 276:	93 1f       	adc	r25, r19
 278:	82 83       	std	Z+2, r24	; 0x02
 27a:	93 83       	std	Z+3, r25	; 0x03
	
	// calculate the attitude loop out, this is the rate loop input
	attitude_loop_out = ((pid_data->attitude_error * pid_data->Kp) / p_attitude_divisor) + ((pid_data->attitude_error* pid_data->Ki_rate) / i_attitude_divisor);
 27c:	02 89       	ldd	r16, Z+18	; 0x12
 27e:	13 89       	ldd	r17, Z+19	; 0x13
 280:	46 89       	ldd	r20, Z+22	; 0x16
 282:	57 89       	ldd	r21, Z+23	; 0x17
 284:	24 9f       	mul	r18, r20
 286:	c0 01       	movw	r24, r0
 288:	25 9f       	mul	r18, r21
 28a:	90 0d       	add	r25, r0
 28c:	34 9f       	mul	r19, r20
 28e:	90 0d       	add	r25, r0
 290:	11 24       	eor	r1, r1
 292:	60 91 02 20 	lds	r22, 0x2002
 296:	70 91 03 20 	lds	r23, 0x2003
 29a:	ad d4       	rcall	.+2394   	; 0xbf6 <__divmodhi4>
 29c:	eb 01       	movw	r28, r22
 29e:	20 9f       	mul	r18, r16
 2a0:	c0 01       	movw	r24, r0
 2a2:	21 9f       	mul	r18, r17
 2a4:	90 0d       	add	r25, r0
 2a6:	30 9f       	mul	r19, r16
 2a8:	90 0d       	add	r25, r0
 2aa:	11 24       	eor	r1, r1
 2ac:	60 91 00 20 	lds	r22, 0x2000
 2b0:	70 91 01 20 	lds	r23, 0x2001
 2b4:	a0 d4       	rcall	.+2368   	; 0xbf6 <__divmodhi4>
 2b6:	6c 0f       	add	r22, r28
 2b8:	7d 1f       	adc	r23, r29
	
	
	////RATE LOOP
	
	//  rate loop error is attitude loop output - the rate feedback
	pid_data->rate_error = attitude_loop_out - pid_data->rate_feedback;
 2ba:	80 a1       	ldd	r24, Z+32	; 0x20
 2bc:	91 a1       	ldd	r25, Z+33	; 0x21
 2be:	68 1b       	sub	r22, r24
 2c0:	79 0b       	sbc	r23, r25
 2c2:	64 a7       	std	Z+44, r22	; 0x2c
 2c4:	75 a7       	std	Z+45, r23	; 0x2d
	
	// keep track of the last 3 error samples, this is needed for attitude integration
	pid_data->previousRateError0 = pid_data->previousRateError1;
 2c6:	c6 ad       	ldd	r28, Z+62	; 0x3e
 2c8:	d7 ad       	ldd	r29, Z+63	; 0x3f
 2ca:	c4 af       	std	Z+60, r28	; 0x3c
 2cc:	d5 af       	std	Z+61, r29	; 0x3d
	pid_data->previousRateError1 = pid_data->previousRateError2;
 2ce:	df 01       	movw	r26, r30
 2d0:	a0 5c       	subi	r26, 0xC0	; 192
 2d2:	bf 4f       	sbci	r27, 0xFF	; 255
 2d4:	8d 91       	ld	r24, X+
 2d6:	9c 91       	ld	r25, X
 2d8:	11 97       	sbiw	r26, 0x01	; 1
 2da:	86 af       	std	Z+62, r24	; 0x3e
 2dc:	97 af       	std	Z+63, r25	; 0x3f
	pid_data->previousRateError2 = pid_data->rate_error;
 2de:	6d 93       	st	X+, r22
 2e0:	7c 93       	st	X, r23
		
	// integrate the rate error
	pid_data->rate_integral = pid_data->rate_error + pid_data->previousRateError0 + pid_data->previousRateError1 + pid_data->previousRateError2;
 2e2:	c6 0f       	add	r28, r22
 2e4:	d7 1f       	adc	r29, r23
 2e6:	c8 0f       	add	r28, r24
 2e8:	d9 1f       	adc	r29, r25
 2ea:	c6 0f       	add	r28, r22
 2ec:	d7 1f       	adc	r29, r23
 2ee:	c0 83       	st	Z, r28
 2f0:	d1 83       	std	Z+1, r29	; 0x01
	
	//  calculate the p and i terms for the inner loop	
	pid_data->p_term_rate = (pid_data->rate_error * pid_data->Kp_rate) / p_rate_divisor;
 2f2:	20 89       	ldd	r18, Z+16	; 0x10
 2f4:	31 89       	ldd	r19, Z+17	; 0x11
 2f6:	62 9f       	mul	r22, r18
 2f8:	c0 01       	movw	r24, r0
 2fa:	63 9f       	mul	r22, r19
 2fc:	90 0d       	add	r25, r0
 2fe:	72 9f       	mul	r23, r18
 300:	90 0d       	add	r25, r0
 302:	11 24       	eor	r1, r1
 304:	60 91 06 20 	lds	r22, 0x2006
 308:	70 91 07 20 	lds	r23, 0x2007
 30c:	74 d4       	rcall	.+2280   	; 0xbf6 <__divmodhi4>
 30e:	9b 01       	movw	r18, r22
 310:	64 83       	std	Z+4, r22	; 0x04
 312:	75 83       	std	Z+5, r23	; 0x05
	pid_data->i_term_rate = pid_data->rate_integral * pid_data->Ki_rate / i_rate_divisor;
 314:	0c 9f       	mul	r16, r28
 316:	c0 01       	movw	r24, r0
 318:	0d 9f       	mul	r16, r29
 31a:	90 0d       	add	r25, r0
 31c:	1c 9f       	mul	r17, r28
 31e:	90 0d       	add	r25, r0
 320:	11 24       	eor	r1, r1
 322:	60 91 04 20 	lds	r22, 0x2004
 326:	70 91 05 20 	lds	r23, 0x2005
 32a:	65 d4       	rcall	.+2250   	; 0xbf6 <__divmodhi4>
 32c:	66 83       	std	Z+6, r22	; 0x06
 32e:	77 83       	std	Z+7, r23	; 0x07
	
		
	pid_data->pid_total = pid_data->p_term_rate + pid_data->i_term_rate;
 330:	26 0f       	add	r18, r22
 332:	37 1f       	adc	r19, r23
 334:	24 8f       	std	Z+28, r18	; 0x1c
 336:	35 8f       	std	Z+29, r19	; 0x1d
	
}
 338:	df 91       	pop	r29
 33a:	cf 91       	pop	r28
 33c:	1f 91       	pop	r17
 33e:	0f 91       	pop	r16
 340:	08 95       	ret

00000342 <initPWM>:
*********************************************************************************************************** */
void sendUM6_Data()
{

		sendData_int16_t(0xCCCC);					//0xCCCC is the heade
		sendData_int16_t(command);
 342:	e0 e0       	ldi	r30, 0x00	; 0
 344:	f8 e0       	ldi	r31, 0x08	; 8
 346:	83 e0       	ldi	r24, 0x03	; 3
 348:	80 83       	st	Z, r24
 34a:	81 83       	std	Z+1, r24	; 0x01
 34c:	82 83       	std	Z+2, r24	; 0x02
 34e:	83 83       	std	Z+3, r24	; 0x03
 350:	81 81       	ldd	r24, Z+1	; 0x01
 352:	80 61       	ori	r24, 0x10	; 16
 354:	81 83       	std	Z+1, r24	; 0x01
 356:	81 81       	ldd	r24, Z+1	; 0x01
 358:	80 62       	ori	r24, 0x20	; 32
 35a:	81 83       	std	Z+1, r24	; 0x01
 35c:	81 81       	ldd	r24, Z+1	; 0x01
 35e:	80 64       	ori	r24, 0x40	; 64
 360:	81 83       	std	Z+1, r24	; 0x01
 362:	81 81       	ldd	r24, Z+1	; 0x01
 364:	80 68       	ori	r24, 0x80	; 128
 366:	81 83       	std	Z+1, r24	; 0x01
 368:	8f e0       	ldi	r24, 0x0F	; 15
 36a:	a0 e4       	ldi	r26, 0x40	; 64
 36c:	b6 e0       	ldi	r27, 0x06	; 6
 36e:	11 96       	adiw	r26, 0x01	; 1
 370:	8c 93       	st	X, r24
 372:	10 ae       	std	Z+56, r1	; 0x38
 374:	11 ae       	std	Z+57, r1	; 0x39
 376:	12 ae       	std	Z+58, r1	; 0x3a
 378:	13 ae       	std	Z+59, r1	; 0x3b
 37a:	14 ae       	std	Z+60, r1	; 0x3c
 37c:	15 ae       	std	Z+61, r1	; 0x3d
 37e:	10 92 3e 08 	sts	0x083E, r1
 382:	10 92 3f 08 	sts	0x083F, r1
 386:	89 e2       	ldi	r24, 0x29	; 41
 388:	98 e6       	ldi	r25, 0x68	; 104
 38a:	86 a3       	std	Z+38, r24	; 0x26
 38c:	97 a3       	std	Z+39, r25	; 0x27
 38e:	63 e0       	ldi	r22, 0x03	; 3
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	98 e0       	ldi	r25, 0x08	; 8
 394:	11 c4       	rjmp	.+2082   	; 0xbb8 <TC0_ConfigClockSource>

00000396 <DisablePWM>:
 396:	e0 e0       	ldi	r30, 0x00	; 0
 398:	f8 e0       	ldi	r31, 0x08	; 8
 39a:	81 81       	ldd	r24, Z+1	; 0x01
 39c:	81 83       	std	Z+1, r24	; 0x01
 39e:	81 81       	ldd	r24, Z+1	; 0x01
 3a0:	81 83       	std	Z+1, r24	; 0x01
 3a2:	81 81       	ldd	r24, Z+1	; 0x01
 3a4:	81 83       	std	Z+1, r24	; 0x01
 3a6:	81 81       	ldd	r24, Z+1	; 0x01
 3a8:	81 83       	std	Z+1, r24	; 0x01
 3aa:	08 95       	ret

000003ac <doPWM>:
 3ac:	e0 e0       	ldi	r30, 0x00	; 0
 3ae:	f8 e0       	ldi	r31, 0x08	; 8
 3b0:	e4 85       	ldd	r30, Z+12	; 0x0c
 3b2:	e0 ff       	sbrs	r30, 0
 3b4:	0e c0       	rjmp	.+28     	; 0x3d2 <doPWM+0x26>
 3b6:	e0 e0       	ldi	r30, 0x00	; 0
 3b8:	f8 e0       	ldi	r31, 0x08	; 8
 3ba:	a1 e0       	ldi	r26, 0x01	; 1
 3bc:	a4 87       	std	Z+12, r26	; 0x0c
 3be:	80 af       	std	Z+56, r24	; 0x38
 3c0:	91 af       	std	Z+57, r25	; 0x39
 3c2:	62 af       	std	Z+58, r22	; 0x3a
 3c4:	73 af       	std	Z+59, r23	; 0x3b
 3c6:	44 af       	std	Z+60, r20	; 0x3c
 3c8:	55 af       	std	Z+61, r21	; 0x3d
 3ca:	20 93 3e 08 	sts	0x083E, r18
 3ce:	30 93 3f 08 	sts	0x083F, r19
 3d2:	08 95       	ret

000003d4 <SetPulseWidths>:
 3d4:	80 91 e8 20 	lds	r24, 0x20E8
 3d8:	90 91 e9 20 	lds	r25, 0x20E9
 3dc:	9c 01       	movw	r18, r24
 3de:	21 5d       	subi	r18, 0xD1	; 209
 3e0:	37 40       	sbci	r19, 0x07	; 7
 3e2:	2f 32       	cpi	r18, 0x2F	; 47
 3e4:	38 40       	sbci	r19, 0x08	; 8
 3e6:	c8 f4       	brcc	.+50     	; 0x41a <SetPulseWidths+0x46>
 3e8:	88 0f       	add	r24, r24
 3ea:	99 1f       	adc	r25, r25
 3ec:	88 0f       	add	r24, r24
 3ee:	99 1f       	adc	r25, r25
 3f0:	60 91 72 20 	lds	r22, 0x2072
 3f4:	70 91 73 20 	lds	r23, 0x2073
 3f8:	e0 91 25 20 	lds	r30, 0x2025
 3fc:	f0 91 26 20 	lds	r31, 0x2026
 400:	9c 01       	movw	r18, r24
 402:	26 0f       	add	r18, r22
 404:	37 1f       	adc	r19, r23
 406:	ac 01       	movw	r20, r24
 408:	4e 0f       	add	r20, r30
 40a:	5f 1f       	adc	r21, r31
 40c:	dc 01       	movw	r26, r24
 40e:	a6 1b       	sub	r26, r22
 410:	b7 0b       	sbc	r27, r23
 412:	bd 01       	movw	r22, r26
 414:	8e 1b       	sub	r24, r30
 416:	9f 0b       	sbc	r25, r31
 418:	c9 cf       	rjmp	.-110    	; 0x3ac <doPWM>
 41a:	20 e0       	ldi	r18, 0x00	; 0
 41c:	30 e0       	ldi	r19, 0x00	; 0
 41e:	40 e0       	ldi	r20, 0x00	; 0
 420:	50 e0       	ldi	r21, 0x00	; 0
 422:	60 e0       	ldi	r22, 0x00	; 0
 424:	70 e0       	ldi	r23, 0x00	; 0
 426:	80 e0       	ldi	r24, 0x00	; 0
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	c0 cf       	rjmp	.-128    	; 0x3ac <doPWM>

0000042c <intPID_gains>:
 42c:	85 e0       	ldi	r24, 0x05	; 5
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	80 93 19 20 	sts	0x2019, r24
 434:	90 93 1a 20 	sts	0x201A, r25
 438:	10 92 1b 20 	sts	0x201B, r1
 43c:	10 92 1c 20 	sts	0x201C, r1
 440:	80 93 1d 20 	sts	0x201D, r24
 444:	90 93 1e 20 	sts	0x201E, r25
 448:	81 e1       	ldi	r24, 0x11	; 17
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	80 93 66 20 	sts	0x2066, r24
 450:	90 93 67 20 	sts	0x2067, r25
 454:	89 e0       	ldi	r24, 0x09	; 9
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	80 93 68 20 	sts	0x2068, r24
 45c:	90 93 69 20 	sts	0x2069, r25
 460:	10 92 6a 20 	sts	0x206A, r1
 464:	10 92 6b 20 	sts	0x206B, r1
 468:	88 ec       	ldi	r24, 0xC8	; 200
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	80 93 39 20 	sts	0x2039, r24
 470:	90 93 3a 20 	sts	0x203A, r25
 474:	80 93 86 20 	sts	0x2086, r24
 478:	90 93 87 20 	sts	0x2087, r25
 47c:	80 93 1a 21 	sts	0x211A, r24
 480:	90 93 1b 21 	sts	0x211B, r25
 484:	08 95       	ret

00000486 <WriteToPC_SPI>:
  OUTPUT:
  DISCRIPTION:  Write data packet to the SPI bus connected to the ATmega, 
  the ATmega should be set up to parse this data.
*********************************************************************************************************** */
int16_t WriteToPC_SPI()
{
 486:	af 92       	push	r10
 488:	bf 92       	push	r11
 48a:	cf 92       	push	r12
 48c:	df 92       	push	r13
 48e:	ff 92       	push	r15
 490:	0f 93       	push	r16
 492:	1f 93       	push	r17
 494:	cf 93       	push	r28
 496:	df 93       	push	r29
	PORTE.OUTCLR = PIN4_bm;
 498:	00 e8       	ldi	r16, 0x80	; 128
 49a:	16 e0       	ldi	r17, 0x06	; 6
 49c:	68 94       	set
 49e:	ff 24       	eor	r15, r15
 4a0:	f4 f8       	bld	r15, 4
 4a2:	f8 01       	movw	r30, r16
 4a4:	f6 82       	std	Z+6, r15	; 0x06
	
	throttleAxis.thrust = spiPC_write_read(upperByte16(throttleAxis.thrust )) << 8;						
 4a6:	0f 2e       	mov	r0, r31
 4a8:	f8 ee       	ldi	r31, 0xE8	; 232
 4aa:	cf 2e       	mov	r12, r31
 4ac:	f0 e2       	ldi	r31, 0x20	; 32
 4ae:	df 2e       	mov	r13, r31
 4b0:	f0 2d       	mov	r31, r0
 4b2:	f6 01       	movw	r30, r12
 4b4:	81 81       	ldd	r24, Z+1	; 0x01
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	02 d3       	rcall	.+1540   	; 0xabe <spiPC_write_read>
 4ba:	d8 2f       	mov	r29, r24
 4bc:	f0 e0       	ldi	r31, 0x00	; 0
 4be:	cf 2f       	mov	r28, r31
 4c0:	f6 01       	movw	r30, r12
 4c2:	c0 83       	st	Z, r28
 4c4:	d1 83       	std	Z+1, r29	; 0x01
	throttleAxis.thrust += spiPC_write_read(lowerByte16(throttleAxis.thrust ));							
 4c6:	80 e0       	ldi	r24, 0x00	; 0
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	f9 d2       	rcall	.+1522   	; 0xabe <spiPC_write_read>
 4cc:	8c 0f       	add	r24, r28
 4ce:	9d 1f       	adc	r25, r29
 4d0:	f6 01       	movw	r30, r12
 4d2:	80 83       	st	Z, r24
 4d4:	91 83       	std	Z+1, r25	; 0x01
	
	rollAxis.attitude_command = spiPC_write_read(upperByte16(pitchAxis.attitude_feedback)) << 8;
 4d6:	0f 2e       	mov	r0, r31
 4d8:	f4 e7       	ldi	r31, 0x74	; 116
 4da:	af 2e       	mov	r10, r31
 4dc:	f0 e2       	ldi	r31, 0x20	; 32
 4de:	bf 2e       	mov	r11, r31
 4e0:	f0 2d       	mov	r31, r0
 4e2:	f5 01       	movw	r30, r10
 4e4:	81 81       	ldd	r24, Z+1	; 0x01
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	ea d2       	rcall	.+1492   	; 0xabe <spiPC_write_read>
 4ea:	d8 2f       	mov	r29, r24
 4ec:	f0 e0       	ldi	r31, 0x00	; 0
 4ee:	cf 2f       	mov	r28, r31
 4f0:	0f 2e       	mov	r0, r31
 4f2:	fb e2       	ldi	r31, 0x2B	; 43
 4f4:	cf 2e       	mov	r12, r31
 4f6:	f0 e2       	ldi	r31, 0x20	; 32
 4f8:	df 2e       	mov	r13, r31
 4fa:	f0 2d       	mov	r31, r0
 4fc:	f6 01       	movw	r30, r12
 4fe:	c0 83       	st	Z, r28
 500:	d1 83       	std	Z+1, r29	; 0x01
	rollAxis.attitude_command  += spiPC_write_read(lowerByte16(pitchAxis.attitude_feedback));
 502:	f5 01       	movw	r30, r10
 504:	80 81       	ld	r24, Z
 506:	91 81       	ldd	r25, Z+1	; 0x01
 508:	99 27       	eor	r25, r25
 50a:	d9 d2       	rcall	.+1458   	; 0xabe <spiPC_write_read>
 50c:	8c 0f       	add	r24, r28
 50e:	9d 1f       	adc	r25, r29
 510:	f6 01       	movw	r30, r12
 512:	80 83       	st	Z, r24
 514:	91 83       	std	Z+1, r25	; 0x01
	
	pitchAxis.attitude_command = spiPC_write_read(upperByte16(rollAxis.attitude_feedback)) << 8;
 516:	0f 2e       	mov	r0, r31
 518:	f7 e2       	ldi	r31, 0x27	; 39
 51a:	af 2e       	mov	r10, r31
 51c:	f0 e2       	ldi	r31, 0x20	; 32
 51e:	bf 2e       	mov	r11, r31
 520:	f0 2d       	mov	r31, r0
 522:	f5 01       	movw	r30, r10
 524:	81 81       	ldd	r24, Z+1	; 0x01
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	ca d2       	rcall	.+1428   	; 0xabe <spiPC_write_read>
 52a:	d8 2f       	mov	r29, r24
 52c:	f0 e0       	ldi	r31, 0x00	; 0
 52e:	cf 2f       	mov	r28, r31
 530:	0f 2e       	mov	r0, r31
 532:	f8 e7       	ldi	r31, 0x78	; 120
 534:	cf 2e       	mov	r12, r31
 536:	f0 e2       	ldi	r31, 0x20	; 32
 538:	df 2e       	mov	r13, r31
 53a:	f0 2d       	mov	r31, r0
 53c:	f6 01       	movw	r30, r12
 53e:	c0 83       	st	Z, r28
 540:	d1 83       	std	Z+1, r29	; 0x01
	pitchAxis.attitude_command += spiPC_write_read(lowerByte16(rollAxis.attitude_feedback));
 542:	f5 01       	movw	r30, r10
 544:	80 81       	ld	r24, Z
 546:	91 81       	ldd	r25, Z+1	; 0x01
 548:	99 27       	eor	r25, r25
 54a:	b9 d2       	rcall	.+1394   	; 0xabe <spiPC_write_read>
 54c:	8c 0f       	add	r24, r28
 54e:	9d 1f       	adc	r25, r29
 550:	f6 01       	movw	r30, r12
 552:	80 83       	st	Z, r24
 554:	91 83       	std	Z+1, r25	; 0x01

	yawAxis.attitude_command = spiPC_write_read(upperByte16(yawAxis.attitude_feedback)) << 8;
 556:	0f 2e       	mov	r0, r31
 558:	f8 e0       	ldi	r31, 0x08	; 8
 55a:	af 2e       	mov	r10, r31
 55c:	f1 e2       	ldi	r31, 0x21	; 33
 55e:	bf 2e       	mov	r11, r31
 560:	f0 2d       	mov	r31, r0
 562:	f5 01       	movw	r30, r10
 564:	81 81       	ldd	r24, Z+1	; 0x01
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	aa d2       	rcall	.+1364   	; 0xabe <spiPC_write_read>
 56a:	d8 2f       	mov	r29, r24
 56c:	f0 e0       	ldi	r31, 0x00	; 0
 56e:	cf 2f       	mov	r28, r31
 570:	0f 2e       	mov	r0, r31
 572:	fc e0       	ldi	r31, 0x0C	; 12
 574:	cf 2e       	mov	r12, r31
 576:	f1 e2       	ldi	r31, 0x21	; 33
 578:	df 2e       	mov	r13, r31
 57a:	f0 2d       	mov	r31, r0
 57c:	f6 01       	movw	r30, r12
 57e:	c0 83       	st	Z, r28
 580:	d1 83       	std	Z+1, r29	; 0x01
	yawAxis.attitude_command += spiPC_write_read(lowerByte16(yawAxis.attitude_feedback));
 582:	f5 01       	movw	r30, r10
 584:	80 81       	ld	r24, Z
 586:	91 81       	ldd	r25, Z+1	; 0x01
 588:	99 27       	eor	r25, r25
 58a:	99 d2       	rcall	.+1330   	; 0xabe <spiPC_write_read>
 58c:	8c 0f       	add	r24, r28
 58e:	9d 1f       	adc	r25, r29
 590:	f6 01       	movw	r30, r12
 592:	80 83       	st	Z, r24
 594:	91 83       	std	Z+1, r25	; 0x01
		
	pitchAxis.Kp = (spiPC_write_read(upperByte16(pitchAxis.rate_feedback ))) << 8;					
 596:	0f 2e       	mov	r0, r31
 598:	f6 e7       	ldi	r31, 0x76	; 118
 59a:	af 2e       	mov	r10, r31
 59c:	f0 e2       	ldi	r31, 0x20	; 32
 59e:	bf 2e       	mov	r11, r31
 5a0:	f0 2d       	mov	r31, r0
 5a2:	f5 01       	movw	r30, r10
 5a4:	81 81       	ldd	r24, Z+1	; 0x01
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	8a d2       	rcall	.+1300   	; 0xabe <spiPC_write_read>
 5aa:	d8 2f       	mov	r29, r24
 5ac:	f0 e0       	ldi	r31, 0x00	; 0
 5ae:	cf 2f       	mov	r28, r31
 5b0:	0f 2e       	mov	r0, r31
 5b2:	fc e6       	ldi	r31, 0x6C	; 108
 5b4:	cf 2e       	mov	r12, r31
 5b6:	f0 e2       	ldi	r31, 0x20	; 32
 5b8:	df 2e       	mov	r13, r31
 5ba:	f0 2d       	mov	r31, r0
 5bc:	f6 01       	movw	r30, r12
 5be:	c0 83       	st	Z, r28
 5c0:	d1 83       	std	Z+1, r29	; 0x01
	pitchAxis.Kp += spiPC_write_read(lowerByte16(pitchAxis.rate_feedback ));							
 5c2:	f5 01       	movw	r30, r10
 5c4:	80 81       	ld	r24, Z
 5c6:	91 81       	ldd	r25, Z+1	; 0x01
 5c8:	99 27       	eor	r25, r25
 5ca:	79 d2       	rcall	.+1266   	; 0xabe <spiPC_write_read>
 5cc:	8c 0f       	add	r24, r28
 5ce:	9d 1f       	adc	r25, r29
 5d0:	f6 01       	movw	r30, r12
 5d2:	80 83       	st	Z, r24
 5d4:	91 83       	std	Z+1, r25	; 0x01
	
	pitchAxis.Ki = (spiPC_write_read(upperByte16(pitchAxis.rate_error ))) << 8;					
 5d6:	0f 2e       	mov	r0, r31
 5d8:	f2 e8       	ldi	r31, 0x82	; 130
 5da:	af 2e       	mov	r10, r31
 5dc:	f0 e2       	ldi	r31, 0x20	; 32
 5de:	bf 2e       	mov	r11, r31
 5e0:	f0 2d       	mov	r31, r0
 5e2:	f5 01       	movw	r30, r10
 5e4:	81 81       	ldd	r24, Z+1	; 0x01
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	6a d2       	rcall	.+1236   	; 0xabe <spiPC_write_read>
 5ea:	d8 2f       	mov	r29, r24
 5ec:	f0 e0       	ldi	r31, 0x00	; 0
 5ee:	cf 2f       	mov	r28, r31
 5f0:	0f 2e       	mov	r0, r31
 5f2:	fe e6       	ldi	r31, 0x6E	; 110
 5f4:	cf 2e       	mov	r12, r31
 5f6:	f0 e2       	ldi	r31, 0x20	; 32
 5f8:	df 2e       	mov	r13, r31
 5fa:	f0 2d       	mov	r31, r0
 5fc:	f6 01       	movw	r30, r12
 5fe:	c0 83       	st	Z, r28
 600:	d1 83       	std	Z+1, r29	; 0x01
	pitchAxis.Ki += spiPC_write_read(lowerByte16(pitchAxis.rate_error));							
 602:	f5 01       	movw	r30, r10
 604:	80 81       	ld	r24, Z
 606:	91 81       	ldd	r25, Z+1	; 0x01
 608:	99 27       	eor	r25, r25
 60a:	59 d2       	rcall	.+1202   	; 0xabe <spiPC_write_read>
 60c:	8c 0f       	add	r24, r28
 60e:	9d 1f       	adc	r25, r29
 610:	f6 01       	movw	r30, r12
 612:	80 83       	st	Z, r24
 614:	91 83       	std	Z+1, r25	; 0x01
		
	pitchAxis.Kd= (spiPC_write_read(upperByte16(pitchAxis.pid_total))) << 8;					
 616:	0f 2e       	mov	r0, r31
 618:	f2 e7       	ldi	r31, 0x72	; 114
 61a:	af 2e       	mov	r10, r31
 61c:	f0 e2       	ldi	r31, 0x20	; 32
 61e:	bf 2e       	mov	r11, r31
 620:	f0 2d       	mov	r31, r0
 622:	f5 01       	movw	r30, r10
 624:	81 81       	ldd	r24, Z+1	; 0x01
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	4a d2       	rcall	.+1172   	; 0xabe <spiPC_write_read>
 62a:	d8 2f       	mov	r29, r24
 62c:	f0 e0       	ldi	r31, 0x00	; 0
 62e:	cf 2f       	mov	r28, r31
 630:	0f 2e       	mov	r0, r31
 632:	f0 e7       	ldi	r31, 0x70	; 112
 634:	cf 2e       	mov	r12, r31
 636:	f0 e2       	ldi	r31, 0x20	; 32
 638:	df 2e       	mov	r13, r31
 63a:	f0 2d       	mov	r31, r0
 63c:	f6 01       	movw	r30, r12
 63e:	c0 83       	st	Z, r28
 640:	d1 83       	std	Z+1, r29	; 0x01
	pitchAxis.Kd+= spiPC_write_read(lowerByte16(pitchAxis.pid_total));			
 642:	f5 01       	movw	r30, r10
 644:	80 81       	ld	r24, Z
 646:	91 81       	ldd	r25, Z+1	; 0x01
 648:	99 27       	eor	r25, r25
 64a:	39 d2       	rcall	.+1138   	; 0xabe <spiPC_write_read>
 64c:	8c 0f       	add	r24, r28
 64e:	9d 1f       	adc	r25, r29
 650:	f6 01       	movw	r30, r12
 652:	80 83       	st	Z, r24
 654:	91 83       	std	Z+1, r25	; 0x01
	
	command= (spiPC_write_read(upperByte16(yawAxis.rate_feedback))) << 8;
 656:	ca e0       	ldi	r28, 0x0A	; 10
 658:	d1 e2       	ldi	r29, 0x21	; 33
 65a:	89 81       	ldd	r24, Y+1	; 0x01
 65c:	90 e0       	ldi	r25, 0x00	; 0
 65e:	2f d2       	rcall	.+1118   	; 0xabe <spiPC_write_read>
 660:	10 92 53 20 	sts	0x2053, r1
 664:	80 93 54 20 	sts	0x2054, r24
	command+= spiPC_write_read(lowerByte16(yawAxis.rate_feedback));			
 668:	88 81       	ld	r24, Y
 66a:	99 81       	ldd	r25, Y+1	; 0x01
 66c:	99 27       	eor	r25, r25
 66e:	27 d2       	rcall	.+1102   	; 0xabe <spiPC_write_read>
 670:	20 91 53 20 	lds	r18, 0x2053
 674:	30 91 54 20 	lds	r19, 0x2054
 678:	82 0f       	add	r24, r18
 67a:	93 1f       	adc	r25, r19
 67c:	80 93 53 20 	sts	0x2053, r24
 680:	90 93 54 20 	sts	0x2054, r25
	
	dummy_read = spiPC_write_read(END_PACKET_CHAR);													
 684:	8c ec       	ldi	r24, 0xCC	; 204
 686:	90 e0       	ldi	r25, 0x00	; 0
 688:	1a d2       	rcall	.+1076   	; 0xabe <spiPC_write_read>
 68a:	80 93 55 20 	sts	0x2055, r24
	dummy_read = spiPC_write_read(END_PACKET_CHAR);			
 68e:	8c ec       	ldi	r24, 0xCC	; 204
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	15 d2       	rcall	.+1066   	; 0xabe <spiPC_write_read>
 694:	80 93 55 20 	sts	0x2055, r24
	//rollAxis.Kp = pitchAxis.Kp;
	//rollAxis.Ki = rollAxis.Ki;
	//rollAxis.Kd_rate = rollAxis.Kd_rate;										
	
	
	PORTE.OUTSET = PIN4_bm;
 698:	f8 01       	movw	r30, r16
 69a:	f5 82       	std	Z+5, r15	; 0x05
	
	return command;
	
}
 69c:	80 91 53 20 	lds	r24, 0x2053
 6a0:	90 91 54 20 	lds	r25, 0x2054
 6a4:	df 91       	pop	r29
 6a6:	cf 91       	pop	r28
 6a8:	1f 91       	pop	r17
 6aa:	0f 91       	pop	r16
 6ac:	ff 90       	pop	r15
 6ae:	df 90       	pop	r13
 6b0:	cf 90       	pop	r12
 6b2:	bf 90       	pop	r11
 6b4:	af 90       	pop	r10
 6b6:	08 95       	ret

000006b8 <UpdateEulerAngles>:
OUTPUT:
DISCRIPTION:   Read in data from the IMU.  Most of the IMU data are 16 bits sorted in 32 bit registers, see
data sheet for read commands
*********************************************************************************************************** */
void UpdateEulerAngles()
{
 6b8:	0f 93       	push	r16
 6ba:	1f 93       	push	r17
 6bc:	cf 93       	push	r28
 6be:	df 93       	push	r29

	PORTF.OUTCLR = PIN4_bm;
 6c0:	c0 ea       	ldi	r28, 0xA0	; 160
 6c2:	d6 e0       	ldi	r29, 0x06	; 6
 6c4:	10 e1       	ldi	r17, 0x10	; 16
 6c6:	1e 83       	std	Y+6, r17	; 0x06

	uint8_t dummy_read = 0x00;
	//psi = yaw  phi = roll    theta = pitch
	dummy_read = spiIMU_write_read(READ_COMMAND);
 6c8:	80 e0       	ldi	r24, 0x00	; 0
 6ca:	90 e0       	ldi	r25, 0x00	; 0
 6cc:	05 d2       	rcall	.+1034   	; 0xad8 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(UM6_EULER_PHI_THETA);
 6ce:	82 e6       	ldi	r24, 0x62	; 98
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	02 d2       	rcall	.+1028   	; 0xad8 <spiIMU_write_read>
	
	//MSB first
	rollAxis.attitude_feedback = (spiIMU_write_read(DUMMY_READ)<< 8) | spiIMU_write_read(DUMMY_READ);
 6d4:	80 e0       	ldi	r24, 0x00	; 0
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	ff d1       	rcall	.+1022   	; 0xad8 <spiIMU_write_read>
 6da:	08 2f       	mov	r16, r24
 6dc:	80 e0       	ldi	r24, 0x00	; 0
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	fb d1       	rcall	.+1014   	; 0xad8 <spiIMU_write_read>
 6e2:	30 2f       	mov	r19, r16
 6e4:	20 e0       	ldi	r18, 0x00	; 0
 6e6:	82 2b       	or	r24, r18
 6e8:	93 2b       	or	r25, r19
 6ea:	80 93 27 20 	sts	0x2027, r24
 6ee:	90 93 28 20 	sts	0x2028, r25

	pitchAxis.attitude_feedback = (spiIMU_write_read(DUMMY_READ)<< 8) | spiIMU_write_read(UM6_EULER_PSI);
 6f2:	80 e0       	ldi	r24, 0x00	; 0
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	f0 d1       	rcall	.+992    	; 0xad8 <spiIMU_write_read>
 6f8:	08 2f       	mov	r16, r24
 6fa:	83 e6       	ldi	r24, 0x63	; 99
 6fc:	90 e0       	ldi	r25, 0x00	; 0
 6fe:	ec d1       	rcall	.+984    	; 0xad8 <spiIMU_write_read>
 700:	30 2f       	mov	r19, r16
 702:	20 e0       	ldi	r18, 0x00	; 0
 704:	82 2b       	or	r24, r18
 706:	93 2b       	or	r25, r19
 708:	80 93 74 20 	sts	0x2074, r24
 70c:	90 93 75 20 	sts	0x2075, r25
	
	yawAxis.attitude_feedback = (spiIMU_write_read(DUMMY_READ)<< 8) | spiIMU_write_read(DUMMY_READ);
 710:	80 e0       	ldi	r24, 0x00	; 0
 712:	90 e0       	ldi	r25, 0x00	; 0
 714:	e1 d1       	rcall	.+962    	; 0xad8 <spiIMU_write_read>
 716:	08 2f       	mov	r16, r24
 718:	80 e0       	ldi	r24, 0x00	; 0
 71a:	90 e0       	ldi	r25, 0x00	; 0
 71c:	dd d1       	rcall	.+954    	; 0xad8 <spiIMU_write_read>
 71e:	30 2f       	mov	r19, r16
 720:	20 e0       	ldi	r18, 0x00	; 0
 722:	82 2b       	or	r24, r18
 724:	93 2b       	or	r25, r19
 726:	80 93 08 21 	sts	0x2108, r24
 72a:	90 93 09 21 	sts	0x2109, r25

	dummy_read = spiIMU_write_read(DUMMY_READ);     dummy_read =  spiIMU_write_read(UM6_GYRO_PROC_XY);			// reserved bytes
 72e:	80 e0       	ldi	r24, 0x00	; 0
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	d2 d1       	rcall	.+932    	; 0xad8 <spiIMU_write_read>
 734:	8c e5       	ldi	r24, 0x5C	; 92
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	cf d1       	rcall	.+926    	; 0xad8 <spiIMU_write_read>
	
	pitchAxis.rate_feedback  = (spiIMU_write_read(DUMMY_READ)<< 8) | spiIMU_write_read(DUMMY_READ);
 73a:	80 e0       	ldi	r24, 0x00	; 0
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	cc d1       	rcall	.+920    	; 0xad8 <spiIMU_write_read>
 740:	08 2f       	mov	r16, r24
 742:	80 e0       	ldi	r24, 0x00	; 0
 744:	90 e0       	ldi	r25, 0x00	; 0
 746:	c8 d1       	rcall	.+912    	; 0xad8 <spiIMU_write_read>
 748:	30 2f       	mov	r19, r16
 74a:	20 e0       	ldi	r18, 0x00	; 0
 74c:	82 2b       	or	r24, r18
 74e:	93 2b       	or	r25, r19
 750:	80 93 76 20 	sts	0x2076, r24
 754:	90 93 77 20 	sts	0x2077, r25

	rollAxis.rate_feedback = (spiIMU_write_read(DUMMY_READ)<< 8) | spiIMU_write_read(UM6_GYRO_PROC_Z);
 758:	80 e0       	ldi	r24, 0x00	; 0
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	bd d1       	rcall	.+890    	; 0xad8 <spiIMU_write_read>
 75e:	08 2f       	mov	r16, r24
 760:	8d e5       	ldi	r24, 0x5D	; 93
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	b9 d1       	rcall	.+882    	; 0xad8 <spiIMU_write_read>
 766:	30 2f       	mov	r19, r16
 768:	20 e0       	ldi	r18, 0x00	; 0
 76a:	82 2b       	or	r24, r18
 76c:	93 2b       	or	r25, r19
 76e:	80 93 29 20 	sts	0x2029, r24
 772:	90 93 2a 20 	sts	0x202A, r25
	
	yawAxis.rate_feedback = (spiIMU_write_read(DUMMY_READ)<< 8) | spiIMU_write_read(DUMMY_READ);
 776:	80 e0       	ldi	r24, 0x00	; 0
 778:	90 e0       	ldi	r25, 0x00	; 0
 77a:	ae d1       	rcall	.+860    	; 0xad8 <spiIMU_write_read>
 77c:	08 2f       	mov	r16, r24
 77e:	80 e0       	ldi	r24, 0x00	; 0
 780:	90 e0       	ldi	r25, 0x00	; 0
 782:	aa d1       	rcall	.+852    	; 0xad8 <spiIMU_write_read>
 784:	30 2f       	mov	r19, r16
 786:	20 e0       	ldi	r18, 0x00	; 0
 788:	82 2b       	or	r24, r18
 78a:	93 2b       	or	r25, r19
 78c:	80 93 0a 21 	sts	0x210A, r24
 790:	90 93 0b 21 	sts	0x210B, r25

	dummy_read = spiIMU_write_read(DUMMY_READ);     dummy_read =  spiIMU_write_read(DUMMY_READ);			// reserved bytes
 794:	80 e0       	ldi	r24, 0x00	; 0
 796:	90 e0       	ldi	r25, 0x00	; 0
 798:	9f d1       	rcall	.+830    	; 0xad8 <spiIMU_write_read>
 79a:	80 e0       	ldi	r24, 0x00	; 0
 79c:	90 e0       	ldi	r25, 0x00	; 0
 79e:	9c d1       	rcall	.+824    	; 0xad8 <spiIMU_write_read>
	


	PORTF.OUTSET = PIN4_bm;
 7a0:	1d 83       	std	Y+5, r17	; 0x05
	//
	//rollAxis.attitude_feedback /= CONVERT_EULER_TO_DEG;
	//pitchAxis.attitude_feedback /= CONVERT_EULER_TO_DEG;
	//yawAxis.attitude_feedback /= CONVERT_EULER_TO_DEG;
	
}
 7a2:	df 91       	pop	r29
 7a4:	cf 91       	pop	r28
 7a6:	1f 91       	pop	r17
 7a8:	0f 91       	pop	r16
 7aa:	08 95       	ret

000007ac <ControlLoop>:
*********************************************************************************************************** */
void ControlLoop()
{
	
	
	int16counter++;
 7ac:	80 91 34 21 	lds	r24, 0x2134
 7b0:	90 91 35 21 	lds	r25, 0x2135
 7b4:	01 96       	adiw	r24, 0x01	; 1
 7b6:	80 93 34 21 	sts	0x2134, r24
 7ba:	90 93 35 21 	sts	0x2135, r25
	UpdateEulerAngles();
 7be:	7c df       	rcall	.-264    	; 0x6b8 <UpdateEulerAngles>
	SetPulseWidths();
 7c0:	09 de       	rcall	.-1006   	; 0x3d4 <SetPulseWidths>
	PI_attitude_rate(&pitchAxis);
 7c2:	86 e5       	ldi	r24, 0x56	; 86
 7c4:	90 e2       	ldi	r25, 0x20	; 32
 7c6:	3b dd       	rcall	.-1418   	; 0x23e <PI_attitude_rate>
	
	if (int16counter >= 31)
 7c8:	80 91 34 21 	lds	r24, 0x2134
 7cc:	90 91 35 21 	lds	r25, 0x2135
 7d0:	4f 97       	sbiw	r24, 0x1f	; 31
 7d2:	48 f0       	brcs	.+18     	; 0x7e6 <ControlLoop+0x3a>

	{
		WriteToPC_SPI();
 7d4:	58 de       	rcall	.-848    	; 0x486 <WriteToPC_SPI>
		PORTA.OUTTGL = PIN2_bm;
 7d6:	84 e0       	ldi	r24, 0x04	; 4
 7d8:	e0 e0       	ldi	r30, 0x00	; 0
 7da:	f6 e0       	ldi	r31, 0x06	; 6
 7dc:	87 83       	std	Z+7, r24	; 0x07
		int16counter = 0;
 7de:	10 92 34 21 	sts	0x2134, r1
 7e2:	10 92 35 21 	sts	0x2135, r1
 7e6:	08 95       	ret

000007e8 <init32MHzClock>:
*********************************************************************************************************** */
void init32MHzClock(void)
{

	//	Enable the 32 MHz internal RC oscillator.
	OSC.CTRL|=OSC_RC32MEN_bm;
 7e8:	e0 e5       	ldi	r30, 0x50	; 80
 7ea:	f0 e0       	ldi	r31, 0x00	; 0
 7ec:	80 81       	ld	r24, Z
 7ee:	82 60       	ori	r24, 0x02	; 2
 7f0:	80 83       	st	Z, r24
	//	The R32MRFY flag is set when the 32 MHz internal RC oscillator is stable
	//	and ready to be used as the System Clock source.
	while(!(OSC.STATUS &OSC_RC32MRDY_bm ));
 7f2:	81 81       	ldd	r24, Z+1	; 0x01
 7f4:	81 ff       	sbrs	r24, 1
 7f6:	fd cf       	rjmp	.-6      	; 0x7f2 <init32MHzClock+0xa>
	CCP=CCP_IOREG_gc;
 7f8:	88 ed       	ldi	r24, 0xD8	; 216
 7fa:	84 bf       	out	0x34, r24	; 52
	//	Select the 32MHz RC oscillator for the system clock
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
 7fc:	81 e0       	ldi	r24, 0x01	; 1
 7fe:	80 93 40 00 	sts	0x0040, r24
 802:	08 95       	ret

00000804 <intiLoopTimer>:
void intiLoopTimer()
{
	

	// Set the timer prescale.
	TCD0.CTRLA = TC_CLKSEL_DIV4_gc;
 804:	e0 e0       	ldi	r30, 0x00	; 0
 806:	f9 e0       	ldi	r31, 0x09	; 9
 808:	83 e0       	ldi	r24, 0x03	; 3
 80a:	80 83       	st	Z, r24

	/* Configure the timer for normal counting. */
	TCD0.CTRLB = TC_WGMODE_NORMAL_gc;
 80c:	11 82       	std	Z+1, r1	; 0x01

	
	// 21000 counts set f = 305HZ by trial and error
	// frequency depends on IMU SPI clock pre scaler?
	TCD0.PER = 21000;
 80e:	88 e0       	ldi	r24, 0x08	; 8
 810:	92 e5       	ldi	r25, 0x52	; 82
 812:	86 a3       	std	Z+38, r24	; 0x26
 814:	97 a3       	std	Z+39, r25	; 0x27

	//Configure timer to generate an interrupt on overflow. */
	TCD0.INTCTRLA = TC_OVFINTLVL_LO_gc;
 816:	81 e0       	ldi	r24, 0x01	; 1
 818:	86 83       	std	Z+6, r24	; 0x06

	/* Enable this interrupt level. */
	PMIC.CTRL |= PMIC_LOLVLEN_bm;
 81a:	e0 ea       	ldi	r30, 0xA0	; 160
 81c:	f0 e0       	ldi	r31, 0x00	; 0
 81e:	82 81       	ldd	r24, Z+2	; 0x02
 820:	81 60       	ori	r24, 0x01	; 1
 822:	82 83       	std	Z+2, r24	; 0x02
 824:	08 95       	ret

00000826 <zeroSensor>:




uint8_t zeroSensor()
{
 826:	1f 93       	push	r17
 828:	cf 93       	push	r28
 82a:	df 93       	push	r29
	
	PORTF.OUTCLR = PIN4_bm;
 82c:	c0 ea       	ldi	r28, 0xA0	; 160
 82e:	d6 e0       	ldi	r29, 0x06	; 6
 830:	10 e1       	ldi	r17, 0x10	; 16
 832:	1e 83       	std	Y+6, r17	; 0x06
	//zero mad 0xB0
	
	uint8_t dummy_read = 0x00;
	//psi = yaw  phi = roll    theta = pitch
	//0x01 0xAC 0x00 0x00 0x00 0x00
	dummy_read = spiIMU_write_read(WRITE_COMMAND);
 834:	81 e0       	ldi	r24, 0x01	; 1
 836:	90 e0       	ldi	r25, 0x00	; 0
 838:	4f d1       	rcall	.+670    	; 0xad8 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(ZERO_GYROS);
 83a:	8c ea       	ldi	r24, 0xAC	; 172
 83c:	90 e0       	ldi	r25, 0x00	; 0
 83e:	4c d1       	rcall	.+664    	; 0xad8 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(DUMMY_READ);
 840:	80 e0       	ldi	r24, 0x00	; 0
 842:	90 e0       	ldi	r25, 0x00	; 0
 844:	49 d1       	rcall	.+658    	; 0xad8 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(DUMMY_READ);
 846:	80 e0       	ldi	r24, 0x00	; 0
 848:	90 e0       	ldi	r25, 0x00	; 0
 84a:	46 d1       	rcall	.+652    	; 0xad8 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(DUMMY_READ);
 84c:	80 e0       	ldi	r24, 0x00	; 0
 84e:	90 e0       	ldi	r25, 0x00	; 0
 850:	43 d1       	rcall	.+646    	; 0xad8 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(DUMMY_READ);
 852:	80 e0       	ldi	r24, 0x00	; 0
 854:	90 e0       	ldi	r25, 0x00	; 0
 856:	40 d1       	rcall	.+640    	; 0xad8 <spiIMU_write_read>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 858:	8f e8       	ldi	r24, 0x8F	; 143
 85a:	91 e0       	ldi	r25, 0x01	; 1
 85c:	01 97       	sbiw	r24, 0x01	; 1
 85e:	f1 f7       	brne	.-4      	; 0x85c <zeroSensor+0x36>
 860:	00 c0       	rjmp	.+0      	; 0x862 <zeroSensor+0x3c>
 862:	00 00       	nop
	
	_delay_us(50);
	dummy_read = spiIMU_write_read(WRITE_COMMAND);
 864:	81 e0       	ldi	r24, 0x01	; 1
 866:	90 e0       	ldi	r25, 0x00	; 0
 868:	37 d1       	rcall	.+622    	; 0xad8 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(SET_ACCEL_REF);
 86a:	8f ea       	ldi	r24, 0xAF	; 175
 86c:	90 e0       	ldi	r25, 0x00	; 0
 86e:	34 d1       	rcall	.+616    	; 0xad8 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(DUMMY_READ);
 870:	80 e0       	ldi	r24, 0x00	; 0
 872:	90 e0       	ldi	r25, 0x00	; 0
 874:	31 d1       	rcall	.+610    	; 0xad8 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(DUMMY_READ);
 876:	80 e0       	ldi	r24, 0x00	; 0
 878:	90 e0       	ldi	r25, 0x00	; 0
 87a:	2e d1       	rcall	.+604    	; 0xad8 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(DUMMY_READ);
 87c:	80 e0       	ldi	r24, 0x00	; 0
 87e:	90 e0       	ldi	r25, 0x00	; 0
 880:	2b d1       	rcall	.+598    	; 0xad8 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(DUMMY_READ);
 882:	80 e0       	ldi	r24, 0x00	; 0
 884:	90 e0       	ldi	r25, 0x00	; 0
 886:	28 d1       	rcall	.+592    	; 0xad8 <spiIMU_write_read>
 888:	8f e8       	ldi	r24, 0x8F	; 143
 88a:	91 e0       	ldi	r25, 0x01	; 1
 88c:	01 97       	sbiw	r24, 0x01	; 1
 88e:	f1 f7       	brne	.-4      	; 0x88c <zeroSensor+0x66>
 890:	00 c0       	rjmp	.+0      	; 0x892 <zeroSensor+0x6c>
 892:	00 00       	nop
	

	_delay_us(50);
	dummy_read = spiIMU_write_read(WRITE_COMMAND);
 894:	81 e0       	ldi	r24, 0x01	; 1
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	1f d1       	rcall	.+574    	; 0xad8 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(SET_MAG_REF);
 89a:	80 eb       	ldi	r24, 0xB0	; 176
 89c:	90 e0       	ldi	r25, 0x00	; 0
 89e:	1c d1       	rcall	.+568    	; 0xad8 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(DUMMY_READ);
 8a0:	80 e0       	ldi	r24, 0x00	; 0
 8a2:	90 e0       	ldi	r25, 0x00	; 0
 8a4:	19 d1       	rcall	.+562    	; 0xad8 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(DUMMY_READ);
 8a6:	80 e0       	ldi	r24, 0x00	; 0
 8a8:	90 e0       	ldi	r25, 0x00	; 0
 8aa:	16 d1       	rcall	.+556    	; 0xad8 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(DUMMY_READ);
 8ac:	80 e0       	ldi	r24, 0x00	; 0
 8ae:	90 e0       	ldi	r25, 0x00	; 0
 8b0:	13 d1       	rcall	.+550    	; 0xad8 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(DUMMY_READ);
 8b2:	80 e0       	ldi	r24, 0x00	; 0
 8b4:	90 e0       	ldi	r25, 0x00	; 0
 8b6:	10 d1       	rcall	.+544    	; 0xad8 <spiIMU_write_read>
 8b8:	8f e8       	ldi	r24, 0x8F	; 143
 8ba:	91 e0       	ldi	r25, 0x01	; 1
 8bc:	01 97       	sbiw	r24, 0x01	; 1
 8be:	f1 f7       	brne	.-4      	; 0x8bc <zeroSensor+0x96>
 8c0:	00 c0       	rjmp	.+0      	; 0x8c2 <zeroSensor+0x9c>
 8c2:	00 00       	nop
	
	_delay_us(50);
	dummy_read = spiIMU_write_read(WRITE_COMMAND);
 8c4:	81 e0       	ldi	r24, 0x01	; 1
 8c6:	90 e0       	ldi	r25, 0x00	; 0
 8c8:	07 d1       	rcall	.+526    	; 0xad8 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(UM6_RESET_EKF);
 8ca:	8d ea       	ldi	r24, 0xAD	; 173
 8cc:	90 e0       	ldi	r25, 0x00	; 0
 8ce:	04 d1       	rcall	.+520    	; 0xad8 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(DUMMY_READ);
 8d0:	80 e0       	ldi	r24, 0x00	; 0
 8d2:	90 e0       	ldi	r25, 0x00	; 0
 8d4:	01 d1       	rcall	.+514    	; 0xad8 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(DUMMY_READ);
 8d6:	80 e0       	ldi	r24, 0x00	; 0
 8d8:	90 e0       	ldi	r25, 0x00	; 0
 8da:	fe d0       	rcall	.+508    	; 0xad8 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(DUMMY_READ);
 8dc:	80 e0       	ldi	r24, 0x00	; 0
 8de:	90 e0       	ldi	r25, 0x00	; 0
 8e0:	fb d0       	rcall	.+502    	; 0xad8 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(DUMMY_READ);
 8e2:	80 e0       	ldi	r24, 0x00	; 0
 8e4:	90 e0       	ldi	r25, 0x00	; 0
 8e6:	f8 d0       	rcall	.+496    	; 0xad8 <spiIMU_write_read>
	

	PORTF.OUTSET = PIN4_bm;
 8e8:	1d 83       	std	Y+5, r17	; 0x05
	
	return 1;
	
}
 8ea:	81 e0       	ldi	r24, 0x01	; 1
 8ec:	df 91       	pop	r29
 8ee:	cf 91       	pop	r28
 8f0:	1f 91       	pop	r17
 8f2:	08 95       	ret

000008f4 <initSystem>:
  INPUT:
  OUTPUT:
  DISCRIPTION:  Do all the pre control loop set up tasks
*********************************************************************************************************** */
uint8_t initSystem()
{
 8f4:	cf 93       	push	r28
 8f6:	df 93       	push	r29
	PORTA.DIRSET = 0xFF;			//  LEDS
 8f8:	c0 e0       	ldi	r28, 0x00	; 0
 8fa:	d6 e0       	ldi	r29, 0x06	; 6
 8fc:	8f ef       	ldi	r24, 0xFF	; 255
 8fe:	89 83       	std	Y+1, r24	; 0x01
	sei();
 900:	78 94       	sei
	initUART();
 902:	60 d1       	rcall	.+704    	; 0xbc4 <initUART>
	spi_set_up();
 904:	f6 d0       	rcall	.+492    	; 0xaf2 <spi_set_up>
	intPID_gains();
 906:	92 dd       	rcall	.-1244   	; 0x42c <intPID_gains>
	zeroSensor();
 908:	8e df       	rcall	.-228    	; 0x826 <zeroSensor>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 90a:	2f ef       	ldi	r18, 0xFF	; 255
 90c:	8f e4       	ldi	r24, 0x4F	; 79
 90e:	93 ec       	ldi	r25, 0xC3	; 195
 910:	21 50       	subi	r18, 0x01	; 1
 912:	80 40       	sbci	r24, 0x00	; 0
 914:	90 40       	sbci	r25, 0x00	; 0
 916:	e1 f7       	brne	.-8      	; 0x910 <initSystem+0x1c>
 918:	00 c0       	rjmp	.+0      	; 0x91a <initSystem+0x26>
 91a:	00 00       	nop
	_delay_ms(2000);
	zeroSensor();
 91c:	84 df       	rcall	.-248    	; 0x826 <zeroSensor>
	PORTA.DIRSET = 0x00;			//  LEDS
 91e:	19 82       	std	Y+1, r1	; 0x01
	return 1;

}
 920:	81 e0       	ldi	r24, 0x01	; 1
 922:	df 91       	pop	r29
 924:	cf 91       	pop	r28
 926:	08 95       	ret

00000928 <main>:
OUTPUT:
DISCRIPTION: Main is used for set up and then just an infinite loop
*********************************************************************************************************** */
int main()
{
		PORTA.OUTTGL = 0x0F;
 928:	8f e0       	ldi	r24, 0x0F	; 15
 92a:	e0 e0       	ldi	r30, 0x00	; 0
 92c:	f6 e0       	ldi	r31, 0x06	; 6
 92e:	87 83       	std	Z+7, r24	; 0x07
		systemState = SYSTEM_STATE_STARTUP;
 930:	10 92 08 20 	sts	0x2008, r1
		init32MHzClock();
 934:	59 df       	rcall	.-334    	; 0x7e8 <init32MHzClock>
		intiLoopTimer();
 936:	66 df       	rcall	.-308    	; 0x804 <intiLoopTimer>
		initSystem();
 938:	dd df       	rcall	.-70     	; 0x8f4 <initSystem>

		while(1)
		{
			nop();
 93a:	00 00       	nop
 93c:	fe cf       	rjmp	.-4      	; 0x93a <main+0x12>

0000093e <State>:
INPUT:
OUTPUT:
DISCRIPTION:   Determine what to do based on systemState.  Used to initializes and arm the quad.
*********************************************************************************************************** */
void State()
{
 93e:	1f 93       	push	r17
 940:	cf 93       	push	r28
 942:	df 93       	push	r29
	
	//sendUM6_Data();
	switch(systemState)
 944:	80 91 08 20 	lds	r24, 0x2008
 948:	82 30       	cpi	r24, 0x02	; 2
 94a:	69 f1       	breq	.+90     	; 0x9a6 <State+0x68>
 94c:	30 f4       	brcc	.+12     	; 0x95a <State+0x1c>
 94e:	88 23       	and	r24, r24
 950:	59 f0       	breq	.+22     	; 0x968 <State+0x2a>
 952:	81 30       	cpi	r24, 0x01	; 1
 954:	09 f0       	breq	.+2      	; 0x958 <State+0x1a>
 956:	79 c0       	rjmp	.+242    	; 0xa4a <State+0x10c>
 958:	15 c0       	rjmp	.+42     	; 0x984 <State+0x46>
 95a:	84 30       	cpi	r24, 0x04	; 4
 95c:	09 f4       	brne	.+2      	; 0x960 <State+0x22>
 95e:	41 c0       	rjmp	.+130    	; 0x9e2 <State+0xa4>
 960:	85 30       	cpi	r24, 0x05	; 5
 962:	09 f0       	breq	.+2      	; 0x966 <State+0x28>
 964:	72 c0       	rjmp	.+228    	; 0xa4a <State+0x10c>
 966:	42 c0       	rjmp	.+132    	; 0x9ec <State+0xae>
	{
		case SYSTEM_STATE_STARTUP:
			PORTA.OUTTGL = 0x00;
 968:	e0 e0       	ldi	r30, 0x00	; 0
 96a:	f6 e0       	ldi	r31, 0x06	; 6
 96c:	17 82       	std	Z+7, r1	; 0x07
			PORTA.OUTTGL = PIN2_bm;
 96e:	84 e0       	ldi	r24, 0x04	; 4
 970:	87 83       	std	Z+7, r24	; 0x07
			if (initSystem() ==  1)
 972:	c0 df       	rcall	.-128    	; 0x8f4 <initSystem>
 974:	81 30       	cpi	r24, 0x01	; 1
 976:	11 f4       	brne	.+4      	; 0x97c <State+0x3e>
			{
				systemState = SYSTEM_ZERO;
 978:	80 93 08 20 	sts	0x2008, r24
			}
			PORTA.OUTTGL = 0x00;
 97c:	e0 e0       	ldi	r30, 0x00	; 0
 97e:	f6 e0       	ldi	r31, 0x06	; 6
 980:	17 82       	std	Z+7, r1	; 0x07
			break;
 982:	63 c0       	rjmp	.+198    	; 0xa4a <State+0x10c>
		
		case SYSTEM_ZERO:
			// read commands from the PC and zero the system as necessary
			// PC transaction, read in command and send out sensor data
			UpdateEulerAngles();
 984:	99 de       	rcall	.-718    	; 0x6b8 <UpdateEulerAngles>
		
			PORTA.OUTTGL = PIN3_bm;
 986:	88 e0       	ldi	r24, 0x08	; 8
 988:	e0 e0       	ldi	r30, 0x00	; 0
 98a:	f6 e0       	ldi	r31, 0x06	; 6
 98c:	87 83       	std	Z+7, r24	; 0x07
			//  get the last command sent form the PC, either zero the IMU or get ready to arm the system
			if (WriteToPC_SPI() == SYSTEM_ZERO)
 98e:	7b dd       	rcall	.-1290   	; 0x486 <WriteToPC_SPI>
 990:	01 97       	sbiw	r24, 0x01	; 1
 992:	09 f4       	brne	.+2      	; 0x996 <State+0x58>
			{
				zeroSensor();
 994:	48 df       	rcall	.-368    	; 0x826 <zeroSensor>
			}
			
			if (WriteToPC_SPI() == SYSTEM_ARM)
 996:	77 dd       	rcall	.-1298   	; 0x486 <WriteToPC_SPI>
 998:	02 97       	sbiw	r24, 0x02	; 2
 99a:	09 f0       	breq	.+2      	; 0x99e <State+0x60>
 99c:	56 c0       	rjmp	.+172    	; 0xa4a <State+0x10c>
			{
				systemState = SYSTEM_ARM;
 99e:	82 e0       	ldi	r24, 0x02	; 2
 9a0:	80 93 08 20 	sts	0x2008, r24
 9a4:	52 c0       	rjmp	.+164    	; 0xa4a <State+0x10c>
		
			break;
		
		case SYSTEM_ARM:
			//Arm the system by enabling the PWM
			PORTA.OUTTGL = 0x00;
 9a6:	c0 e0       	ldi	r28, 0x00	; 0
 9a8:	d6 e0       	ldi	r29, 0x06	; 6
 9aa:	1f 82       	std	Y+7, r1	; 0x07
			PORTA.OUTTGL = PIN2_bm;
 9ac:	14 e0       	ldi	r17, 0x04	; 4
 9ae:	1f 83       	std	Y+7, r17	; 0x07
			initPWM();
 9b0:	c8 dc       	rcall	.-1648   	; 0x342 <initPWM>
			systemState = SYSTEM_STATE_FLY;
 9b2:	10 93 08 20 	sts	0x2008, r17
			PORTA.OUTTGL = PIN2_bm;
 9b6:	1f 83       	std	Y+7, r17	; 0x07
 9b8:	2f ef       	ldi	r18, 0xFF	; 255
 9ba:	37 ea       	ldi	r19, 0xA7	; 167
 9bc:	81 e6       	ldi	r24, 0x61	; 97
 9be:	21 50       	subi	r18, 0x01	; 1
 9c0:	30 40       	sbci	r19, 0x00	; 0
 9c2:	80 40       	sbci	r24, 0x00	; 0
 9c4:	e1 f7       	brne	.-8      	; 0x9be <State+0x80>
 9c6:	00 c0       	rjmp	.+0      	; 0x9c8 <State+0x8a>
 9c8:	00 00       	nop
			_delay_ms(1000);
			PORTA.OUTTGL = PIN2_bm;
 9ca:	1f 83       	std	Y+7, r17	; 0x07
 9cc:	9f ef       	ldi	r25, 0xFF	; 255
 9ce:	27 ea       	ldi	r18, 0xA7	; 167
 9d0:	31 e6       	ldi	r19, 0x61	; 97
 9d2:	91 50       	subi	r25, 0x01	; 1
 9d4:	20 40       	sbci	r18, 0x00	; 0
 9d6:	30 40       	sbci	r19, 0x00	; 0
 9d8:	e1 f7       	brne	.-8      	; 0x9d2 <State+0x94>
 9da:	00 c0       	rjmp	.+0      	; 0x9dc <State+0x9e>
 9dc:	00 00       	nop
			_delay_ms(1000);
			PORTA.OUTTGL = PIN2_bm;
 9de:	1f 83       	std	Y+7, r17	; 0x07
			break;
 9e0:	34 c0       	rjmp	.+104    	; 0xa4a <State+0x10c>
		
		case SYSTEM_STATE_FLY:
			// run the control loop
			PORTA.OUTCLR = 0x00;
 9e2:	e0 e0       	ldi	r30, 0x00	; 0
 9e4:	f6 e0       	ldi	r31, 0x06	; 6
 9e6:	16 82       	std	Z+6, r1	; 0x06
			//PORTA.OUTTGL = PIN3_bm;
			ControlLoop();
 9e8:	e1 de       	rcall	.-574    	; 0x7ac <ControlLoop>
			break;
 9ea:	2f c0       	rjmp	.+94     	; 0xa4a <State+0x10c>
		
		case SYSTEM_DISARM:
			
			DisablePWM();
 9ec:	d4 dc       	rcall	.-1624   	; 0x396 <DisablePWM>
			PORTA.OUTTGL = PIN2_bm;
 9ee:	e0 e0       	ldi	r30, 0x00	; 0
 9f0:	f6 e0       	ldi	r31, 0x06	; 6
 9f2:	84 e0       	ldi	r24, 0x04	; 4
 9f4:	87 83       	std	Z+7, r24	; 0x07
 9f6:	9f ef       	ldi	r25, 0xFF	; 255
 9f8:	27 ea       	ldi	r18, 0xA7	; 167
 9fa:	31 e6       	ldi	r19, 0x61	; 97
 9fc:	91 50       	subi	r25, 0x01	; 1
 9fe:	20 40       	sbci	r18, 0x00	; 0
 a00:	30 40       	sbci	r19, 0x00	; 0
 a02:	e1 f7       	brne	.-8      	; 0x9fc <State+0xbe>
 a04:	00 c0       	rjmp	.+0      	; 0xa06 <State+0xc8>
 a06:	00 00       	nop
			_delay_ms(1000);
			PORTA.OUTTGL = PIN2_bm;
 a08:	87 83       	std	Z+7, r24	; 0x07
 a0a:	9f ef       	ldi	r25, 0xFF	; 255
 a0c:	27 ea       	ldi	r18, 0xA7	; 167
 a0e:	31 e6       	ldi	r19, 0x61	; 97
 a10:	91 50       	subi	r25, 0x01	; 1
 a12:	20 40       	sbci	r18, 0x00	; 0
 a14:	30 40       	sbci	r19, 0x00	; 0
 a16:	e1 f7       	brne	.-8      	; 0xa10 <State+0xd2>
 a18:	00 c0       	rjmp	.+0      	; 0xa1a <State+0xdc>
 a1a:	00 00       	nop
			_delay_ms(1000);
			PORTA.OUTTGL = PIN2_bm;
 a1c:	87 83       	std	Z+7, r24	; 0x07
 a1e:	9f ef       	ldi	r25, 0xFF	; 255
 a20:	27 ea       	ldi	r18, 0xA7	; 167
 a22:	31 e6       	ldi	r19, 0x61	; 97
 a24:	91 50       	subi	r25, 0x01	; 1
 a26:	20 40       	sbci	r18, 0x00	; 0
 a28:	30 40       	sbci	r19, 0x00	; 0
 a2a:	e1 f7       	brne	.-8      	; 0xa24 <State+0xe6>
 a2c:	00 c0       	rjmp	.+0      	; 0xa2e <State+0xf0>
 a2e:	00 00       	nop
			_delay_ms(1000);
			PORTA.OUTTGL = PIN2_bm;
 a30:	87 83       	std	Z+7, r24	; 0x07
 a32:	9f ef       	ldi	r25, 0xFF	; 255
 a34:	27 ea       	ldi	r18, 0xA7	; 167
 a36:	31 e6       	ldi	r19, 0x61	; 97
 a38:	91 50       	subi	r25, 0x01	; 1
 a3a:	20 40       	sbci	r18, 0x00	; 0
 a3c:	30 40       	sbci	r19, 0x00	; 0
 a3e:	e1 f7       	brne	.-8      	; 0xa38 <State+0xfa>
 a40:	00 c0       	rjmp	.+0      	; 0xa42 <State+0x104>
 a42:	00 00       	nop
			_delay_ms(1000);
			PORTA.OUTTGL = PIN2_bm;
 a44:	87 83       	std	Z+7, r24	; 0x07
			systemState = SYSTEM_STATE_STARTUP;
 a46:	10 92 08 20 	sts	0x2008, r1
		
		default:
			break;
		
	}			// end case
}
 a4a:	df 91       	pop	r29
 a4c:	cf 91       	pop	r28
 a4e:	1f 91       	pop	r17
 a50:	08 95       	ret

00000a52 <__vector_77>:
  INPUT:
  OUTPUT:
  DISCRIPTION:   Interrupt vector
*********************************************************************************************************** */
ISR(TCD0_OVF_vect)
{
 a52:	1f 92       	push	r1
 a54:	0f 92       	push	r0
 a56:	0f b6       	in	r0, 0x3f	; 63
 a58:	0f 92       	push	r0
 a5a:	11 24       	eor	r1, r1
 a5c:	08 b6       	in	r0, 0x38	; 56
 a5e:	0f 92       	push	r0
 a60:	18 be       	out	0x38, r1	; 56
 a62:	09 b6       	in	r0, 0x39	; 57
 a64:	0f 92       	push	r0
 a66:	19 be       	out	0x39, r1	; 57
 a68:	0b b6       	in	r0, 0x3b	; 59
 a6a:	0f 92       	push	r0
 a6c:	1b be       	out	0x3b, r1	; 59
 a6e:	2f 93       	push	r18
 a70:	3f 93       	push	r19
 a72:	4f 93       	push	r20
 a74:	5f 93       	push	r21
 a76:	6f 93       	push	r22
 a78:	7f 93       	push	r23
 a7a:	8f 93       	push	r24
 a7c:	9f 93       	push	r25
 a7e:	af 93       	push	r26
 a80:	bf 93       	push	r27
 a82:	ef 93       	push	r30
 a84:	ff 93       	push	r31
	
	//ControlLoop();
	 State();
 a86:	5b df       	rcall	.-330    	; 0x93e <State>
	TCD0.CNT = 0;
 a88:	e0 e0       	ldi	r30, 0x00	; 0
 a8a:	f9 e0       	ldi	r31, 0x09	; 9
 a8c:	10 a2       	std	Z+32, r1	; 0x20
 a8e:	11 a2       	std	Z+33, r1	; 0x21
	
}
 a90:	ff 91       	pop	r31
 a92:	ef 91       	pop	r30
 a94:	bf 91       	pop	r27
 a96:	af 91       	pop	r26
 a98:	9f 91       	pop	r25
 a9a:	8f 91       	pop	r24
 a9c:	7f 91       	pop	r23
 a9e:	6f 91       	pop	r22
 aa0:	5f 91       	pop	r21
 aa2:	4f 91       	pop	r20
 aa4:	3f 91       	pop	r19
 aa6:	2f 91       	pop	r18
 aa8:	0f 90       	pop	r0
 aaa:	0b be       	out	0x3b, r0	; 59
 aac:	0f 90       	pop	r0
 aae:	09 be       	out	0x39, r0	; 57
 ab0:	0f 90       	pop	r0
 ab2:	08 be       	out	0x38, r0	; 56
 ab4:	0f 90       	pop	r0
 ab6:	0f be       	out	0x3f, r0	; 63
 ab8:	0f 90       	pop	r0
 aba:	1f 90       	pop	r1
 abc:	18 95       	reti

00000abe <spiPC_write_read>:
			  Read the data from the data register, this was on MISO
*********************************************************************************************************** */

unsigned char spiPC_write_read(unsigned char spi_data1)
{
	SPIE.DATA = spi_data1;
 abe:	e0 ec       	ldi	r30, 0xC0	; 192
 ac0:	fa e0       	ldi	r31, 0x0A	; 10
 ac2:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIE.STATUS & SPI_IF_bm)); // Wait until the data transfer is complete
 ac4:	82 81       	ldd	r24, Z+2	; 0x02
 ac6:	88 23       	and	r24, r24
 ac8:	ec f7       	brge	.-6      	; 0xac4 <spiPC_write_read+0x6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 aca:	80 e4       	ldi	r24, 0x40	; 64
 acc:	8a 95       	dec	r24
 ace:	f1 f7       	brne	.-4      	; 0xacc <spiPC_write_read+0xe>
	_delay_us(6);
	return SPIE.DATA;
 ad0:	e0 ec       	ldi	r30, 0xC0	; 192
 ad2:	fa e0       	ldi	r31, 0x0A	; 10
 ad4:	83 81       	ldd	r24, Z+3	; 0x03
}
 ad6:	08 95       	ret

00000ad8 <spiIMU_write_read>:
			  Wait until the interrupt flag is set	
			  Read the data from the data register, this was on MISO
*********************************************************************************************************** */
unsigned char spiIMU_write_read(unsigned char spi_data)
{
	SPIF.DATA = spi_data;
 ad8:	e0 ec       	ldi	r30, 0xC0	; 192
 ada:	fb e0       	ldi	r31, 0x0B	; 11
 adc:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIF.STATUS & SPI_IF_bm)); // Wait until the data transfer is complete
 ade:	82 81       	ldd	r24, Z+2	; 0x02
 ae0:	88 23       	and	r24, r24
 ae2:	ec f7       	brge	.-6      	; 0xade <spiIMU_write_read+0x6>
 ae4:	80 e2       	ldi	r24, 0x20	; 32
 ae6:	8a 95       	dec	r24
 ae8:	f1 f7       	brne	.-4      	; 0xae6 <spiIMU_write_read+0xe>
	_delay_us(3);
	return SPIF.DATA;
 aea:	e0 ec       	ldi	r30, 0xC0	; 192
 aec:	fb e0       	ldi	r31, 0x0B	; 11
 aee:	83 81       	ldd	r24, Z+3	; 0x03
}
 af0:	08 95       	ret

00000af2 <spi_set_up>:
DISCRIPTION:    Initialize SPI master on port F for the IMU communication.
			    Initialize SPI master on port F for the PC communication
*********************************************************************************************************** */
	
void spi_set_up()
{
 af2:	af 92       	push	r10
 af4:	cf 92       	push	r12
 af6:	ef 92       	push	r14
 af8:	0f 93       	push	r16
 afa:	cf 93       	push	r28
 afc:	df 93       	push	r29
	/* Initialize SPI master on port F for the IMU communication. */
	/* Init SS pin as output with wired AND and pull-up. */
	//*************************************************************
	PORTF.DIRSET = PIN4_bm;
 afe:	e0 ea       	ldi	r30, 0xA0	; 160
 b00:	f6 e0       	ldi	r31, 0x06	; 6
 b02:	c0 e1       	ldi	r28, 0x10	; 16
 b04:	c1 83       	std	Z+1, r28	; 0x01
	PORTF.PIN4CTRL = PORT_OPC_WIREDANDPULL_gc;
 b06:	d8 e3       	ldi	r29, 0x38	; 56
 b08:	d4 8b       	std	Z+20, r29	; 0x14

	/* Set SS output to high. (No slave addressed). */
	PORTF.OUTSET = PIN4_bm;
 b0a:	c5 83       	std	Z+5, r28	; 0x05

	/* Initialize SPI master on port F for the IMU communication. */
	SPI_MasterInit(&spiMasterF,
 b0c:	0f 2e       	mov	r0, r31
 b0e:	f3 e0       	ldi	r31, 0x03	; 3
 b10:	af 2e       	mov	r10, r31
 b12:	f0 2d       	mov	r31, r0
 b14:	c1 2c       	mov	r12, r1
 b16:	e1 2c       	mov	r14, r1
 b18:	00 e0       	ldi	r16, 0x00	; 0
 b1a:	20 e0       	ldi	r18, 0x00	; 0
 b1c:	40 ea       	ldi	r20, 0xA0	; 160
 b1e:	56 e0       	ldi	r21, 0x06	; 6
 b20:	60 ec       	ldi	r22, 0xC0	; 192
 b22:	7b e0       	ldi	r23, 0x0B	; 11
 b24:	86 e3       	ldi	r24, 0x36	; 54
 b26:	91 e2       	ldi	r25, 0x21	; 33
 b28:	1d d0       	rcall	.+58     	; 0xb64 <SPI_MasterInit>
		SPI_MODE_0_gc,							//The UM6 SPI clock (SCK) is active high, with data clocked in on the first rising edge1
		SPI_INTLVL_OFF_gc,
		false,									// false to double clock mode
		SPI_PRESCALER_DIV128_gc);					//32mHz /128 = 250kHz  MAX rate is 400kHz but there is not prescaler

		SPIF.DATA = 0x00;						// init SPI data register
 b2a:	e0 ec       	ldi	r30, 0xC0	; 192
 b2c:	fb e0       	ldi	r31, 0x0B	; 11
 b2e:	13 82       	std	Z+3, r1	; 0x03
		
		
		/* Initialize SPI master on port F for the PC communication */
		//*************************************************************
		/* Init SS pin as output with wired AND and pull-up. */
		PORTE.DIRSET = PIN4_bm;
 b30:	e0 e8       	ldi	r30, 0x80	; 128
 b32:	f6 e0       	ldi	r31, 0x06	; 6
 b34:	c1 83       	std	Z+1, r28	; 0x01
		PORTE.PIN4CTRL = PORT_OPC_WIREDANDPULL_gc;
 b36:	d4 8b       	std	Z+20, r29	; 0x14

		/* Set SS output to high. (No slave addressed). */
		PORTE.OUTSET = PIN4_bm;
 b38:	c5 83       	std	Z+5, r28	; 0x05

		SPI_MasterInit(&spiMasterE,
 b3a:	68 94       	set
 b3c:	aa 24       	eor	r10, r10
 b3e:	a1 f8       	bld	r10, 1
 b40:	20 e0       	ldi	r18, 0x00	; 0
 b42:	40 e8       	ldi	r20, 0x80	; 128
 b44:	56 e0       	ldi	r21, 0x06	; 6
 b46:	60 ec       	ldi	r22, 0xC0	; 192
 b48:	7a e0       	ldi	r23, 0x0A	; 10
 b4a:	8d e3       	ldi	r24, 0x3D	; 61
 b4c:	91 e2       	ldi	r25, 0x21	; 33
 b4e:	0a d0       	rcall	.+20     	; 0xb64 <SPI_MasterInit>
		false,
		SPI_MODE_0_gc,							//The UM6 SPI clock (SCK) is active high, with data clocked in on the first rising edge1
		SPI_INTLVL_OFF_gc,
		false,									// false to double clock mode
		SPI_PRESCALER_DIV64_gc);				//32mHz /64 = 500,000 bps
		SPIE.DATA = 0x00;						// init SPI data register
 b50:	e0 ec       	ldi	r30, 0xC0	; 192
 b52:	fa e0       	ldi	r31, 0x0A	; 10
 b54:	13 82       	std	Z+3, r1	; 0x03

}
 b56:	df 91       	pop	r29
 b58:	cf 91       	pop	r28
 b5a:	0f 91       	pop	r16
 b5c:	ef 90       	pop	r14
 b5e:	cf 90       	pop	r12
 b60:	af 90       	pop	r10
 b62:	08 95       	ret

00000b64 <SPI_MasterInit>:
                    bool lsbFirst,
                    SPI_MODE_t mode,
                    SPI_INTLVL_t intLevel,
                    bool clk2x,
                    SPI_PRESCALER_t clockDivision)
{
 b64:	af 92       	push	r10
 b66:	cf 92       	push	r12
 b68:	ef 92       	push	r14
 b6a:	0f 93       	push	r16
 b6c:	fc 01       	movw	r30, r24
	spi->module         = module;
 b6e:	60 83       	st	Z, r22
 b70:	71 83       	std	Z+1, r23	; 0x01
	spi->port           = port;
 b72:	42 83       	std	Z+2, r20	; 0x02
 b74:	53 83       	std	Z+3, r21	; 0x03
	spi->interrupted    = false;
 b76:	14 82       	std	Z+4, r1	; 0x04

	spi->module->CTRL   = clockDivision |                  /* SPI prescaler. */
 b78:	cc 20       	and	r12, r12
 b7a:	11 f0       	breq	.+4      	; 0xb80 <SPI_MasterInit+0x1c>
 b7c:	90 e8       	ldi	r25, 0x80	; 128
 b7e:	01 c0       	rjmp	.+2      	; 0xb82 <SPI_MasterInit+0x1e>
 b80:	90 e0       	ldi	r25, 0x00	; 0
 b82:	22 23       	and	r18, r18
 b84:	11 f0       	breq	.+4      	; 0xb8a <SPI_MasterInit+0x26>
 b86:	80 e2       	ldi	r24, 0x20	; 32
 b88:	01 c0       	rjmp	.+2      	; 0xb8c <SPI_MasterInit+0x28>
 b8a:	80 e0       	ldi	r24, 0x00	; 0
 b8c:	00 65       	ori	r16, 0x50	; 80
 b8e:	0a 29       	or	r16, r10
 b90:	09 2b       	or	r16, r25
 b92:	08 2b       	or	r16, r24
 b94:	db 01       	movw	r26, r22
 b96:	0c 93       	st	X, r16
	                      (lsbFirst ? SPI_DORD_bm  : 0) |  /* Data order. */
	                      SPI_MASTER_bm |                  /* SPI master. */
	                      mode;                            /* SPI mode. */

	/* Interrupt level. */
	spi->module->INTCTRL = intLevel;
 b98:	a0 81       	ld	r26, Z
 b9a:	b1 81       	ldd	r27, Z+1	; 0x01
 b9c:	11 96       	adiw	r26, 0x01	; 1
 b9e:	ec 92       	st	X, r14

	/* No assigned data packet. */
	spi->dataPacket = NULL;
 ba0:	15 82       	std	Z+5, r1	; 0x05
 ba2:	16 82       	std	Z+6, r1	; 0x06

 	/* MOSI and SCK as output. */
	spi->port->DIRSET  = SPI_MOSI_bm | SPI_SCK_bm;
 ba4:	02 80       	ldd	r0, Z+2	; 0x02
 ba6:	f3 81       	ldd	r31, Z+3	; 0x03
 ba8:	e0 2d       	mov	r30, r0
 baa:	80 ea       	ldi	r24, 0xA0	; 160
 bac:	81 83       	std	Z+1, r24	; 0x01
}
 bae:	0f 91       	pop	r16
 bb0:	ef 90       	pop	r14
 bb2:	cf 90       	pop	r12
 bb4:	af 90       	pop	r10
 bb6:	08 95       	ret

00000bb8 <TC0_ConfigClockSource>:
 *  \param tc              Timer/Counter module instance.
 *  \param clockSelection  Timer/Counter clock source setting.
 */
void TC0_ConfigClockSource( volatile TC0_t * tc, TC_CLKSEL_t clockSelection )
{
	tc->CTRLA = ( tc->CTRLA & ~TC0_CLKSEL_gm ) | clockSelection;
 bb8:	fc 01       	movw	r30, r24
 bba:	20 81       	ld	r18, Z
 bbc:	20 7f       	andi	r18, 0xF0	; 240
 bbe:	62 2b       	or	r22, r18
 bc0:	60 83       	st	Z, r22
 bc2:	08 95       	ret

00000bc4 <initUART>:
void initUART()
{
	
	//  XBEE on USARTD1
	/* PD6 (RXD1) input*/
	PORTD.DIRCLR = PIN6_bm;
 bc4:	e0 e6       	ldi	r30, 0x60	; 96
 bc6:	f6 e0       	ldi	r31, 0x06	; 6
 bc8:	90 e4       	ldi	r25, 0x40	; 64
 bca:	92 83       	std	Z+2, r25	; 0x02
	/* PD7 (TXD1) as output. */
	PORTD.DIRSET = PIN7_bm;
 bcc:	80 e8       	ldi	r24, 0x80	; 128
 bce:	81 83       	std	Z+1, r24	; 0x01
	
	
	//  IMU on USARTC1
	/* PC6 (RXD1) input*/
	PORTC.DIRCLR = PIN6_bm;
 bd0:	e0 e4       	ldi	r30, 0x40	; 64
 bd2:	f6 e0       	ldi	r31, 0x06	; 6
 bd4:	92 83       	std	Z+2, r25	; 0x02
	/* PD7 (TXD1) as output. */
	PORTC.DIRSET = PIN7_bm;
 bd6:	81 83       	std	Z+1, r24	; 0x01
	
	USART_Format_Set(&XBEE_USART, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, true);
 bd8:	e0 eb       	ldi	r30, 0xB0	; 176
 bda:	f9 e0       	ldi	r31, 0x09	; 9
 bdc:	8b e0       	ldi	r24, 0x0B	; 11
 bde:	85 83       	std	Z+5, r24	; 0x05
	USART_Baudrate_Set(&XBEE_USART, 1047 , -6);			// set for 32MHZ and 115200
 be0:	87 e1       	ldi	r24, 0x17	; 23
 be2:	86 83       	std	Z+6, r24	; 0x06
 be4:	84 ea       	ldi	r24, 0xA4	; 164
 be6:	87 83       	std	Z+7, r24	; 0x07
	/* Enable both RX and TX. */
	USART_Rx_Enable(&XBEE_USART);
 be8:	84 81       	ldd	r24, Z+4	; 0x04
 bea:	80 61       	ori	r24, 0x10	; 16
 bec:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(&XBEE_USART);
 bee:	84 81       	ldd	r24, Z+4	; 0x04
 bf0:	88 60       	ori	r24, 0x08	; 8
 bf2:	84 83       	std	Z+4, r24	; 0x04
 bf4:	08 95       	ret

00000bf6 <__divmodhi4>:
 bf6:	97 fb       	bst	r25, 7
 bf8:	07 2e       	mov	r0, r23
 bfa:	16 f4       	brtc	.+4      	; 0xc00 <__divmodhi4+0xa>
 bfc:	00 94       	com	r0
 bfe:	06 d0       	rcall	.+12     	; 0xc0c <__divmodhi4_neg1>
 c00:	77 fd       	sbrc	r23, 7
 c02:	08 d0       	rcall	.+16     	; 0xc14 <__divmodhi4_neg2>
 c04:	0b d0       	rcall	.+22     	; 0xc1c <__udivmodhi4>
 c06:	07 fc       	sbrc	r0, 7
 c08:	05 d0       	rcall	.+10     	; 0xc14 <__divmodhi4_neg2>
 c0a:	3e f4       	brtc	.+14     	; 0xc1a <__divmodhi4_exit>

00000c0c <__divmodhi4_neg1>:
 c0c:	90 95       	com	r25
 c0e:	81 95       	neg	r24
 c10:	9f 4f       	sbci	r25, 0xFF	; 255
 c12:	08 95       	ret

00000c14 <__divmodhi4_neg2>:
 c14:	70 95       	com	r23
 c16:	61 95       	neg	r22
 c18:	7f 4f       	sbci	r23, 0xFF	; 255

00000c1a <__divmodhi4_exit>:
 c1a:	08 95       	ret

00000c1c <__udivmodhi4>:
 c1c:	aa 1b       	sub	r26, r26
 c1e:	bb 1b       	sub	r27, r27
 c20:	51 e1       	ldi	r21, 0x11	; 17
 c22:	07 c0       	rjmp	.+14     	; 0xc32 <__udivmodhi4_ep>

00000c24 <__udivmodhi4_loop>:
 c24:	aa 1f       	adc	r26, r26
 c26:	bb 1f       	adc	r27, r27
 c28:	a6 17       	cp	r26, r22
 c2a:	b7 07       	cpc	r27, r23
 c2c:	10 f0       	brcs	.+4      	; 0xc32 <__udivmodhi4_ep>
 c2e:	a6 1b       	sub	r26, r22
 c30:	b7 0b       	sbc	r27, r23

00000c32 <__udivmodhi4_ep>:
 c32:	88 1f       	adc	r24, r24
 c34:	99 1f       	adc	r25, r25
 c36:	5a 95       	dec	r21
 c38:	a9 f7       	brne	.-22     	; 0xc24 <__udivmodhi4_loop>
 c3a:	80 95       	com	r24
 c3c:	90 95       	com	r25
 c3e:	bc 01       	movw	r22, r24
 c40:	cd 01       	movw	r24, r26
 c42:	08 95       	ret

00000c44 <_exit>:
 c44:	f8 94       	cli

00000c46 <__stop_program>:
 c46:	ff cf       	rjmp	.-2      	; 0xc46 <__stop_program>
