
PSU_quadcopter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ec2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00802000  00000ec2  00000f56  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000018a  0080200a  0080200a  00000f60  2**0
                  ALLOC
  3 .stab         00003c24  00000000  00000000  00000f60  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001067  00000000  00000000  00004b84  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00005beb  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000378  00000000  00000000  00005c1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005300  00000000  00000000  00005f92  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001042  00000000  00000000  0000b292  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000020bc  00000000  00000000  0000c2d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000008e4  00000000  00000000  0000e390  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001c2e  00000000  00000000  0000ec74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001b9a  00000000  00000000  000108a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000002d8  00000000  00000000  0001243c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	f9 c0       	rjmp	.+498    	; 0x1f4 <__ctors_end>
   2:	00 00       	nop
   4:	1b c1       	rjmp	.+566    	; 0x23c <__bad_interrupt>
   6:	00 00       	nop
   8:	19 c1       	rjmp	.+562    	; 0x23c <__bad_interrupt>
   a:	00 00       	nop
   c:	17 c1       	rjmp	.+558    	; 0x23c <__bad_interrupt>
   e:	00 00       	nop
  10:	15 c1       	rjmp	.+554    	; 0x23c <__bad_interrupt>
  12:	00 00       	nop
  14:	13 c1       	rjmp	.+550    	; 0x23c <__bad_interrupt>
  16:	00 00       	nop
  18:	11 c1       	rjmp	.+546    	; 0x23c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	0f c1       	rjmp	.+542    	; 0x23c <__bad_interrupt>
  1e:	00 00       	nop
  20:	0d c1       	rjmp	.+538    	; 0x23c <__bad_interrupt>
  22:	00 00       	nop
  24:	0b c1       	rjmp	.+534    	; 0x23c <__bad_interrupt>
  26:	00 00       	nop
  28:	09 c1       	rjmp	.+530    	; 0x23c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	07 c1       	rjmp	.+526    	; 0x23c <__bad_interrupt>
  2e:	00 00       	nop
  30:	05 c1       	rjmp	.+522    	; 0x23c <__bad_interrupt>
  32:	00 00       	nop
  34:	03 c1       	rjmp	.+518    	; 0x23c <__bad_interrupt>
  36:	00 00       	nop
  38:	01 c1       	rjmp	.+514    	; 0x23c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	ff c0       	rjmp	.+510    	; 0x23c <__bad_interrupt>
  3e:	00 00       	nop
  40:	fd c0       	rjmp	.+506    	; 0x23c <__bad_interrupt>
  42:	00 00       	nop
  44:	fb c0       	rjmp	.+502    	; 0x23c <__bad_interrupt>
  46:	00 00       	nop
  48:	f9 c0       	rjmp	.+498    	; 0x23c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	f7 c0       	rjmp	.+494    	; 0x23c <__bad_interrupt>
  4e:	00 00       	nop
  50:	f5 c0       	rjmp	.+490    	; 0x23c <__bad_interrupt>
  52:	00 00       	nop
  54:	f3 c0       	rjmp	.+486    	; 0x23c <__bad_interrupt>
  56:	00 00       	nop
  58:	f1 c0       	rjmp	.+482    	; 0x23c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	ef c0       	rjmp	.+478    	; 0x23c <__bad_interrupt>
  5e:	00 00       	nop
  60:	ed c0       	rjmp	.+474    	; 0x23c <__bad_interrupt>
  62:	00 00       	nop
  64:	eb c0       	rjmp	.+470    	; 0x23c <__bad_interrupt>
  66:	00 00       	nop
  68:	e9 c0       	rjmp	.+466    	; 0x23c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	e7 c0       	rjmp	.+462    	; 0x23c <__bad_interrupt>
  6e:	00 00       	nop
  70:	e5 c0       	rjmp	.+458    	; 0x23c <__bad_interrupt>
  72:	00 00       	nop
  74:	e3 c0       	rjmp	.+454    	; 0x23c <__bad_interrupt>
  76:	00 00       	nop
  78:	e1 c0       	rjmp	.+450    	; 0x23c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	df c0       	rjmp	.+446    	; 0x23c <__bad_interrupt>
  7e:	00 00       	nop
  80:	dd c0       	rjmp	.+442    	; 0x23c <__bad_interrupt>
  82:	00 00       	nop
  84:	db c0       	rjmp	.+438    	; 0x23c <__bad_interrupt>
  86:	00 00       	nop
  88:	d9 c0       	rjmp	.+434    	; 0x23c <__bad_interrupt>
  8a:	00 00       	nop
  8c:	d7 c0       	rjmp	.+430    	; 0x23c <__bad_interrupt>
  8e:	00 00       	nop
  90:	d5 c0       	rjmp	.+426    	; 0x23c <__bad_interrupt>
  92:	00 00       	nop
  94:	d3 c0       	rjmp	.+422    	; 0x23c <__bad_interrupt>
  96:	00 00       	nop
  98:	d1 c0       	rjmp	.+418    	; 0x23c <__bad_interrupt>
  9a:	00 00       	nop
  9c:	cf c0       	rjmp	.+414    	; 0x23c <__bad_interrupt>
  9e:	00 00       	nop
  a0:	cd c0       	rjmp	.+410    	; 0x23c <__bad_interrupt>
  a2:	00 00       	nop
  a4:	cb c0       	rjmp	.+406    	; 0x23c <__bad_interrupt>
  a6:	00 00       	nop
  a8:	c9 c0       	rjmp	.+402    	; 0x23c <__bad_interrupt>
  aa:	00 00       	nop
  ac:	c7 c0       	rjmp	.+398    	; 0x23c <__bad_interrupt>
  ae:	00 00       	nop
  b0:	c5 c0       	rjmp	.+394    	; 0x23c <__bad_interrupt>
  b2:	00 00       	nop
  b4:	c3 c0       	rjmp	.+390    	; 0x23c <__bad_interrupt>
  b6:	00 00       	nop
  b8:	c1 c0       	rjmp	.+386    	; 0x23c <__bad_interrupt>
  ba:	00 00       	nop
  bc:	bf c0       	rjmp	.+382    	; 0x23c <__bad_interrupt>
  be:	00 00       	nop
  c0:	bd c0       	rjmp	.+378    	; 0x23c <__bad_interrupt>
  c2:	00 00       	nop
  c4:	bb c0       	rjmp	.+374    	; 0x23c <__bad_interrupt>
  c6:	00 00       	nop
  c8:	b9 c0       	rjmp	.+370    	; 0x23c <__bad_interrupt>
  ca:	00 00       	nop
  cc:	b7 c0       	rjmp	.+366    	; 0x23c <__bad_interrupt>
  ce:	00 00       	nop
  d0:	b5 c0       	rjmp	.+362    	; 0x23c <__bad_interrupt>
  d2:	00 00       	nop
  d4:	b3 c0       	rjmp	.+358    	; 0x23c <__bad_interrupt>
  d6:	00 00       	nop
  d8:	b1 c0       	rjmp	.+354    	; 0x23c <__bad_interrupt>
  da:	00 00       	nop
  dc:	af c0       	rjmp	.+350    	; 0x23c <__bad_interrupt>
  de:	00 00       	nop
  e0:	ad c0       	rjmp	.+346    	; 0x23c <__bad_interrupt>
  e2:	00 00       	nop
  e4:	ab c0       	rjmp	.+342    	; 0x23c <__bad_interrupt>
  e6:	00 00       	nop
  e8:	a9 c0       	rjmp	.+338    	; 0x23c <__bad_interrupt>
  ea:	00 00       	nop
  ec:	a7 c0       	rjmp	.+334    	; 0x23c <__bad_interrupt>
  ee:	00 00       	nop
  f0:	a5 c0       	rjmp	.+330    	; 0x23c <__bad_interrupt>
  f2:	00 00       	nop
  f4:	a3 c0       	rjmp	.+326    	; 0x23c <__bad_interrupt>
  f6:	00 00       	nop
  f8:	a1 c0       	rjmp	.+322    	; 0x23c <__bad_interrupt>
  fa:	00 00       	nop
  fc:	9f c0       	rjmp	.+318    	; 0x23c <__bad_interrupt>
  fe:	00 00       	nop
 100:	9d c0       	rjmp	.+314    	; 0x23c <__bad_interrupt>
 102:	00 00       	nop
 104:	9b c0       	rjmp	.+310    	; 0x23c <__bad_interrupt>
 106:	00 00       	nop
 108:	99 c0       	rjmp	.+306    	; 0x23c <__bad_interrupt>
 10a:	00 00       	nop
 10c:	97 c0       	rjmp	.+302    	; 0x23c <__bad_interrupt>
 10e:	00 00       	nop
 110:	95 c0       	rjmp	.+298    	; 0x23c <__bad_interrupt>
 112:	00 00       	nop
 114:	93 c0       	rjmp	.+294    	; 0x23c <__bad_interrupt>
 116:	00 00       	nop
 118:	91 c0       	rjmp	.+290    	; 0x23c <__bad_interrupt>
 11a:	00 00       	nop
 11c:	8f c0       	rjmp	.+286    	; 0x23c <__bad_interrupt>
 11e:	00 00       	nop
 120:	8d c0       	rjmp	.+282    	; 0x23c <__bad_interrupt>
 122:	00 00       	nop
 124:	8b c0       	rjmp	.+278    	; 0x23c <__bad_interrupt>
 126:	00 00       	nop
 128:	89 c0       	rjmp	.+274    	; 0x23c <__bad_interrupt>
 12a:	00 00       	nop
 12c:	87 c0       	rjmp	.+270    	; 0x23c <__bad_interrupt>
 12e:	00 00       	nop
 130:	85 c0       	rjmp	.+266    	; 0x23c <__bad_interrupt>
 132:	00 00       	nop
 134:	a2 c5       	rjmp	.+2884   	; 0xc7a <__vector_77>
 136:	00 00       	nop
 138:	81 c0       	rjmp	.+258    	; 0x23c <__bad_interrupt>
 13a:	00 00       	nop
 13c:	7f c0       	rjmp	.+254    	; 0x23c <__bad_interrupt>
 13e:	00 00       	nop
 140:	7d c0       	rjmp	.+250    	; 0x23c <__bad_interrupt>
 142:	00 00       	nop
 144:	7b c0       	rjmp	.+246    	; 0x23c <__bad_interrupt>
 146:	00 00       	nop
 148:	79 c0       	rjmp	.+242    	; 0x23c <__bad_interrupt>
 14a:	00 00       	nop
 14c:	77 c0       	rjmp	.+238    	; 0x23c <__bad_interrupt>
 14e:	00 00       	nop
 150:	75 c0       	rjmp	.+234    	; 0x23c <__bad_interrupt>
 152:	00 00       	nop
 154:	73 c0       	rjmp	.+230    	; 0x23c <__bad_interrupt>
 156:	00 00       	nop
 158:	71 c0       	rjmp	.+226    	; 0x23c <__bad_interrupt>
 15a:	00 00       	nop
 15c:	6f c0       	rjmp	.+222    	; 0x23c <__bad_interrupt>
 15e:	00 00       	nop
 160:	6d c0       	rjmp	.+218    	; 0x23c <__bad_interrupt>
 162:	00 00       	nop
 164:	6b c0       	rjmp	.+214    	; 0x23c <__bad_interrupt>
 166:	00 00       	nop
 168:	69 c0       	rjmp	.+210    	; 0x23c <__bad_interrupt>
 16a:	00 00       	nop
 16c:	67 c0       	rjmp	.+206    	; 0x23c <__bad_interrupt>
 16e:	00 00       	nop
 170:	65 c0       	rjmp	.+202    	; 0x23c <__bad_interrupt>
 172:	00 00       	nop
 174:	63 c0       	rjmp	.+198    	; 0x23c <__bad_interrupt>
 176:	00 00       	nop
 178:	61 c0       	rjmp	.+194    	; 0x23c <__bad_interrupt>
 17a:	00 00       	nop
 17c:	5f c0       	rjmp	.+190    	; 0x23c <__bad_interrupt>
 17e:	00 00       	nop
 180:	5d c0       	rjmp	.+186    	; 0x23c <__bad_interrupt>
 182:	00 00       	nop
 184:	5b c0       	rjmp	.+182    	; 0x23c <__bad_interrupt>
 186:	00 00       	nop
 188:	59 c0       	rjmp	.+178    	; 0x23c <__bad_interrupt>
 18a:	00 00       	nop
 18c:	57 c0       	rjmp	.+174    	; 0x23c <__bad_interrupt>
 18e:	00 00       	nop
 190:	55 c0       	rjmp	.+170    	; 0x23c <__bad_interrupt>
 192:	00 00       	nop
 194:	53 c0       	rjmp	.+166    	; 0x23c <__bad_interrupt>
 196:	00 00       	nop
 198:	51 c0       	rjmp	.+162    	; 0x23c <__bad_interrupt>
 19a:	00 00       	nop
 19c:	4f c0       	rjmp	.+158    	; 0x23c <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	4d c0       	rjmp	.+154    	; 0x23c <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	4b c0       	rjmp	.+150    	; 0x23c <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	49 c0       	rjmp	.+146    	; 0x23c <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	47 c0       	rjmp	.+142    	; 0x23c <__bad_interrupt>
 1ae:	00 00       	nop
 1b0:	45 c0       	rjmp	.+138    	; 0x23c <__bad_interrupt>
 1b2:	00 00       	nop
 1b4:	43 c0       	rjmp	.+134    	; 0x23c <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	41 c0       	rjmp	.+130    	; 0x23c <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	3f c0       	rjmp	.+126    	; 0x23c <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	3d c0       	rjmp	.+122    	; 0x23c <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	3b c0       	rjmp	.+118    	; 0x23c <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	39 c0       	rjmp	.+114    	; 0x23c <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	37 c0       	rjmp	.+110    	; 0x23c <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	35 c0       	rjmp	.+106    	; 0x23c <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	33 c0       	rjmp	.+102    	; 0x23c <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	31 c0       	rjmp	.+98     	; 0x23c <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	2f c0       	rjmp	.+94     	; 0x23c <__bad_interrupt>
 1de:	00 00       	nop
 1e0:	2d c0       	rjmp	.+90     	; 0x23c <__bad_interrupt>
 1e2:	00 00       	nop
 1e4:	2b c0       	rjmp	.+86     	; 0x23c <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	29 c0       	rjmp	.+82     	; 0x23c <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	27 c0       	rjmp	.+78     	; 0x23c <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	25 c0       	rjmp	.+74     	; 0x23c <__bad_interrupt>
	...

000001f4 <__ctors_end>:
 1f4:	11 24       	eor	r1, r1
 1f6:	1f be       	out	0x3f, r1	; 63
 1f8:	cf ef       	ldi	r28, 0xFF	; 255
 1fa:	df e3       	ldi	r29, 0x3F	; 63
 1fc:	de bf       	out	0x3e, r29	; 62
 1fe:	cd bf       	out	0x3d, r28	; 61
 200:	00 e0       	ldi	r16, 0x00	; 0
 202:	0c bf       	out	0x3c, r16	; 60
 204:	18 be       	out	0x38, r1	; 56
 206:	19 be       	out	0x39, r1	; 57
 208:	1a be       	out	0x3a, r1	; 58
 20a:	1b be       	out	0x3b, r1	; 59

0000020c <__do_copy_data>:
 20c:	10 e2       	ldi	r17, 0x20	; 32
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	e2 ec       	ldi	r30, 0xC2	; 194
 214:	fe e0       	ldi	r31, 0x0E	; 14
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	0b bf       	out	0x3b, r16	; 59
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
 21c:	07 90       	elpm	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	aa 30       	cpi	r26, 0x0A	; 10
 222:	b1 07       	cpc	r27, r17
 224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>
 226:	1b be       	out	0x3b, r1	; 59

00000228 <__do_clear_bss>:
 228:	21 e2       	ldi	r18, 0x21	; 33
 22a:	aa e0       	ldi	r26, 0x0A	; 10
 22c:	b0 e2       	ldi	r27, 0x20	; 32
 22e:	01 c0       	rjmp	.+2      	; 0x232 <.do_clear_bss_start>

00000230 <.do_clear_bss_loop>:
 230:	1d 92       	st	X+, r1

00000232 <.do_clear_bss_start>:
 232:	a4 39       	cpi	r26, 0x94	; 148
 234:	b2 07       	cpc	r27, r18
 236:	e1 f7       	brne	.-8      	; 0x230 <.do_clear_bss_loop>
 238:	d3 d4       	rcall	.+2470   	; 0xbe0 <main>
 23a:	41 c6       	rjmp	.+3202   	; 0xebe <_exit>

0000023c <__bad_interrupt>:
 23c:	e1 ce       	rjmp	.-574    	; 0x0 <__vectors>

0000023e <PI_attitude_rate>:
INPUT:
OUTPUT:
DISCRIPTION:  nest PI loops, with the rate loop on the inside
*********************************************************************************************************** */
void PI_attitude_rate(PID_data *pid_data)
{
 23e:	fc 01       	movw	r30, r24
	
	////  save the last error calculation so we can calculate the derivative
	pid_data->previousError0 = pid_data->previousError1;
 240:	82 ad       	ldd	r24, Z+58	; 0x3a
 242:	93 ad       	ldd	r25, Z+59	; 0x3b
 244:	80 af       	std	Z+56, r24	; 0x38
 246:	91 af       	std	Z+57, r25	; 0x39
	pid_data->previousError1 = pid_data->previousError2;
 248:	84 ad       	ldd	r24, Z+60	; 0x3c
 24a:	95 ad       	ldd	r25, Z+61	; 0x3d
 24c:	82 af       	std	Z+58, r24	; 0x3a
 24e:	93 af       	std	Z+59, r25	; 0x3b
	pid_data->previousError2 = pid_data->attitude_error;
 250:	84 a5       	ldd	r24, Z+44	; 0x2c
 252:	95 a5       	ldd	r25, Z+45	; 0x2d
 254:	84 af       	std	Z+60, r24	; 0x3c
 256:	95 af       	std	Z+61, r25	; 0x3d

	// calculate error
	pid_data->attitude_error = (pid_data->attitude_command - pid_data->attitude_feedback);
 258:	26 a1       	ldd	r18, Z+38	; 0x26
 25a:	37 a1       	ldd	r19, Z+39	; 0x27
 25c:	46 8d       	ldd	r20, Z+30	; 0x1e
 25e:	57 8d       	ldd	r21, Z+31	; 0x1f
 260:	24 1b       	sub	r18, r20
 262:	35 0b       	sbc	r19, r21
 264:	24 a7       	std	Z+44, r18	; 0x2c
 266:	35 a7       	std	Z+45, r19	; 0x2d
	//pid_data->i_term_attitude =(pid_data->attitude_error * pid_data->Ki)/300 + (pid_data->previousError2 * pid_data->Ki)/300 +
	//(pid_data->previousError1 * pid_data->Ki)/300 + (pid_data->previousError0 * pid_data->Ki)/300;
	

	//Tustin approximation
	pid_data->i_term_attitude += (pid_data->Ki*(pid_data->attitude_error + pid_data->previousError2))/600;          
 268:	bc 01       	movw	r22, r24
 26a:	62 0f       	add	r22, r18
 26c:	73 1f       	adc	r23, r19
 26e:	40 8d       	ldd	r20, Z+24	; 0x18
 270:	51 8d       	ldd	r21, Z+25	; 0x19
 272:	64 9f       	mul	r22, r20
 274:	c0 01       	movw	r24, r0
 276:	65 9f       	mul	r22, r21
 278:	90 0d       	add	r25, r0
 27a:	74 9f       	mul	r23, r20
 27c:	90 0d       	add	r25, r0
 27e:	11 24       	eor	r1, r1
 280:	68 e5       	ldi	r22, 0x58	; 88
 282:	72 e0       	ldi	r23, 0x02	; 2
 284:	f5 d5       	rcall	.+3050   	; 0xe70 <__divmodhi4>
 286:	84 85       	ldd	r24, Z+12	; 0x0c
 288:	95 85       	ldd	r25, Z+13	; 0x0d
 28a:	68 0f       	add	r22, r24
 28c:	79 1f       	adc	r23, r25
 28e:	64 87       	std	Z+12, r22	; 0x0c
 290:	75 87       	std	Z+13, r23	; 0x0d
	
	
	//pid_data->i_term_attitude = pid_data->i_term_attitude/1000;
	//  limit integral wind up
	if(pid_data->i_term_attitude> i_outMax) pid_data->i_term_attitude= i_outMax;
 292:	80 91 04 20 	lds	r24, 0x2004
 296:	90 91 05 20 	lds	r25, 0x2005
 29a:	86 17       	cp	r24, r22
 29c:	97 07       	cpc	r25, r23
 29e:	1c f4       	brge	.+6      	; 0x2a6 <PI_attitude_rate+0x68>
 2a0:	84 87       	std	Z+12, r24	; 0x0c
 2a2:	95 87       	std	Z+13, r25	; 0x0d
 2a4:	09 c0       	rjmp	.+18     	; 0x2b8 <PI_attitude_rate+0x7a>
	else if(pid_data->i_term_attitude< i_outMin) pid_data->i_term_attitude= i_outMin;
 2a6:	80 91 06 20 	lds	r24, 0x2006
 2aa:	90 91 07 20 	lds	r25, 0x2007
 2ae:	68 17       	cp	r22, r24
 2b0:	79 07       	cpc	r23, r25
 2b2:	14 f4       	brge	.+4      	; 0x2b8 <PI_attitude_rate+0x7a>
 2b4:	84 87       	std	Z+12, r24	; 0x0c
 2b6:	95 87       	std	Z+13, r25	; 0x0d
	
	//calculate attitude p term
	pid_data->p_term_attitude =(pid_data->attitude_error * pid_data->Kp)/10;
 2b8:	46 89       	ldd	r20, Z+22	; 0x16
 2ba:	57 89       	ldd	r21, Z+23	; 0x17
 2bc:	24 9f       	mul	r18, r20
 2be:	c0 01       	movw	r24, r0
 2c0:	25 9f       	mul	r18, r21
 2c2:	90 0d       	add	r25, r0
 2c4:	34 9f       	mul	r19, r20
 2c6:	90 0d       	add	r25, r0
 2c8:	11 24       	eor	r1, r1
 2ca:	2a e0       	ldi	r18, 0x0A	; 10
 2cc:	30 e0       	ldi	r19, 0x00	; 0
 2ce:	b9 01       	movw	r22, r18
 2d0:	cf d5       	rcall	.+2974   	; 0xe70 <__divmodhi4>
 2d2:	62 87       	std	Z+10, r22	; 0x0a
 2d4:	73 87       	std	Z+11, r23	; 0x0b

	//  sum the p and i term for the attitude controller (outer loop)
	pid_data->attitude_loop_out = (pid_data->p_term_attitude);  // + pid_data->i_term_attitude);
 2d6:	df 01       	movw	r26, r30
 2d8:	a4 5b       	subi	r26, 0xB4	; 180
 2da:	bf 4f       	sbci	r27, 0xFF	; 255
 2dc:	6d 93       	st	X+, r22
 2de:	7c 93       	st	X, r23

	//  calculate the rate error, the input to the rate loop is the output of the attitude loop
	pid_data->rate_error = (pid_data->attitude_loop_out- pid_data->rate_feedback)/10;
 2e0:	42 a1       	ldd	r20, Z+34	; 0x22
 2e2:	53 a1       	ldd	r21, Z+35	; 0x23
 2e4:	cb 01       	movw	r24, r22
 2e6:	84 1b       	sub	r24, r20
 2e8:	95 0b       	sbc	r25, r21
 2ea:	b9 01       	movw	r22, r18
 2ec:	c1 d5       	rcall	.+2946   	; 0xe70 <__divmodhi4>
 2ee:	66 a7       	std	Z+46, r22	; 0x2e
 2f0:	77 a7       	std	Z+47, r23	; 0x2f

	//  p term for rate loop
	pid_data->p_term_rate = (pid_data->rate_error * pid_data->Kp_rate);
 2f2:	20 89       	ldd	r18, Z+16	; 0x10
 2f4:	31 89       	ldd	r19, Z+17	; 0x11
 2f6:	62 9f       	mul	r22, r18
 2f8:	c0 01       	movw	r24, r0
 2fa:	63 9f       	mul	r22, r19
 2fc:	90 0d       	add	r25, r0
 2fe:	72 9f       	mul	r23, r18
 300:	90 0d       	add	r25, r0
 302:	11 24       	eor	r1, r1
 304:	84 83       	std	Z+4, r24	; 0x04
 306:	95 83       	std	Z+5, r25	; 0x05

	pid_data->pid_total =pid_data->p_term_rate;
 308:	84 8f       	std	Z+28, r24	; 0x1c
 30a:	95 8f       	std	Z+29, r25	; 0x1d
 30c:	08 95       	ret

0000030e <initPWM>:
}

void trim()
{
	rollAxis.trim = rollAxis.attitude_command;
	pitchAxis.trim = pitchAxis.attitude_command;
 30e:	e0 e0       	ldi	r30, 0x00	; 0
 310:	f8 e0       	ldi	r31, 0x08	; 8
 312:	83 e0       	ldi	r24, 0x03	; 3
 314:	80 83       	st	Z, r24
 316:	81 83       	std	Z+1, r24	; 0x01
 318:	82 83       	std	Z+2, r24	; 0x02
 31a:	83 83       	std	Z+3, r24	; 0x03
 31c:	81 81       	ldd	r24, Z+1	; 0x01
 31e:	80 61       	ori	r24, 0x10	; 16
 320:	81 83       	std	Z+1, r24	; 0x01
 322:	81 81       	ldd	r24, Z+1	; 0x01
 324:	80 62       	ori	r24, 0x20	; 32
 326:	81 83       	std	Z+1, r24	; 0x01
 328:	81 81       	ldd	r24, Z+1	; 0x01
 32a:	80 64       	ori	r24, 0x40	; 64
 32c:	81 83       	std	Z+1, r24	; 0x01
 32e:	81 81       	ldd	r24, Z+1	; 0x01
 330:	80 68       	ori	r24, 0x80	; 128
 332:	81 83       	std	Z+1, r24	; 0x01
 334:	8f e0       	ldi	r24, 0x0F	; 15
 336:	a0 e4       	ldi	r26, 0x40	; 64
 338:	b6 e0       	ldi	r27, 0x06	; 6
 33a:	11 96       	adiw	r26, 0x01	; 1
 33c:	8c 93       	st	X, r24
 33e:	10 ae       	std	Z+56, r1	; 0x38
 340:	11 ae       	std	Z+57, r1	; 0x39
 342:	12 ae       	std	Z+58, r1	; 0x3a
 344:	13 ae       	std	Z+59, r1	; 0x3b
 346:	14 ae       	std	Z+60, r1	; 0x3c
 348:	15 ae       	std	Z+61, r1	; 0x3d
 34a:	10 92 3e 08 	sts	0x083E, r1
 34e:	10 92 3f 08 	sts	0x083F, r1
 352:	89 e2       	ldi	r24, 0x29	; 41
 354:	98 e6       	ldi	r25, 0x68	; 104
 356:	86 a3       	std	Z+38, r24	; 0x26
 358:	97 a3       	std	Z+39, r25	; 0x27
 35a:	63 e0       	ldi	r22, 0x03	; 3
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	98 e0       	ldi	r25, 0x08	; 8
 360:	54 c5       	rjmp	.+2728   	; 0xe0a <TC0_ConfigClockSource>

00000362 <doPWM>:
 362:	e0 e0       	ldi	r30, 0x00	; 0
 364:	f8 e0       	ldi	r31, 0x08	; 8
 366:	e4 85       	ldd	r30, Z+12	; 0x0c
 368:	e0 ff       	sbrs	r30, 0
 36a:	0e c0       	rjmp	.+28     	; 0x388 <doPWM+0x26>
 36c:	e0 e0       	ldi	r30, 0x00	; 0
 36e:	f8 e0       	ldi	r31, 0x08	; 8
 370:	a1 e0       	ldi	r26, 0x01	; 1
 372:	a4 87       	std	Z+12, r26	; 0x0c
 374:	80 af       	std	Z+56, r24	; 0x38
 376:	91 af       	std	Z+57, r25	; 0x39
 378:	62 af       	std	Z+58, r22	; 0x3a
 37a:	73 af       	std	Z+59, r23	; 0x3b
 37c:	44 af       	std	Z+60, r20	; 0x3c
 37e:	55 af       	std	Z+61, r21	; 0x3d
 380:	20 93 3e 08 	sts	0x083E, r18
 384:	30 93 3f 08 	sts	0x083F, r19
 388:	08 95       	ret

0000038a <SetPulseWidths>:
 38a:	80 91 17 21 	lds	r24, 0x2117
 38e:	90 91 18 21 	lds	r25, 0x2118
 392:	9c 01       	movw	r18, r24
 394:	21 5d       	subi	r18, 0xD1	; 209
 396:	37 40       	sbci	r19, 0x07	; 7
 398:	2f 32       	cpi	r18, 0x2F	; 47
 39a:	38 40       	sbci	r19, 0x08	; 8
 39c:	08 f0       	brcs	.+2      	; 0x3a0 <SetPulseWidths+0x16>
 39e:	46 c0       	rjmp	.+140    	; 0x42c <SetPulseWidths+0xa2>
 3a0:	20 91 08 20 	lds	r18, 0x2008
 3a4:	21 11       	cpse	r18, r1
 3a6:	17 c0       	rjmp	.+46     	; 0x3d6 <SetPulseWidths+0x4c>
 3a8:	88 0f       	add	r24, r24
 3aa:	99 1f       	adc	r25, r25
 3ac:	88 0f       	add	r24, r24
 3ae:	99 1f       	adc	r25, r25
 3b0:	60 91 8d 20 	lds	r22, 0x208D
 3b4:	70 91 8e 20 	lds	r23, 0x208E
 3b8:	e0 91 2b 20 	lds	r30, 0x202B
 3bc:	f0 91 2c 20 	lds	r31, 0x202C
 3c0:	9c 01       	movw	r18, r24
 3c2:	26 1b       	sub	r18, r22
 3c4:	37 0b       	sbc	r19, r23
 3c6:	ac 01       	movw	r20, r24
 3c8:	4e 1b       	sub	r20, r30
 3ca:	5f 0b       	sbc	r21, r31
 3cc:	68 0f       	add	r22, r24
 3ce:	79 1f       	adc	r23, r25
 3d0:	8e 0f       	add	r24, r30
 3d2:	9f 1f       	adc	r25, r31
 3d4:	c6 df       	rcall	.-116    	; 0x362 <doPWM>
 3d6:	80 91 08 20 	lds	r24, 0x2008
 3da:	81 30       	cpi	r24, 0x01	; 1
 3dc:	39 f5       	brne	.+78     	; 0x42c <SetPulseWidths+0xa2>
 3de:	80 91 17 21 	lds	r24, 0x2117
 3e2:	90 91 18 21 	lds	r25, 0x2118
 3e6:	88 0f       	add	r24, r24
 3e8:	99 1f       	adc	r25, r25
 3ea:	88 0f       	add	r24, r24
 3ec:	99 1f       	adc	r25, r25
 3ee:	60 91 8d 20 	lds	r22, 0x208D
 3f2:	70 91 8e 20 	lds	r23, 0x208E
 3f6:	e0 91 41 21 	lds	r30, 0x2141
 3fa:	f0 91 42 21 	lds	r31, 0x2142
 3fe:	a0 91 2b 20 	lds	r26, 0x202B
 402:	b0 91 2c 20 	lds	r27, 0x202C
 406:	9c 01       	movw	r18, r24
 408:	26 1b       	sub	r18, r22
 40a:	37 0b       	sbc	r19, r23
 40c:	2e 0f       	add	r18, r30
 40e:	3f 1f       	adc	r19, r31
 410:	ac 01       	movw	r20, r24
 412:	4a 1b       	sub	r20, r26
 414:	5b 0b       	sbc	r21, r27
 416:	4e 0f       	add	r20, r30
 418:	5f 1f       	adc	r21, r31
 41a:	68 0f       	add	r22, r24
 41c:	79 1f       	adc	r23, r25
 41e:	6e 1b       	sub	r22, r30
 420:	7f 0b       	sbc	r23, r31
 422:	8a 0f       	add	r24, r26
 424:	9b 1f       	adc	r25, r27
 426:	8e 1b       	sub	r24, r30
 428:	9f 0b       	sbc	r25, r31
 42a:	9b df       	rcall	.-202    	; 0x362 <doPWM>
 42c:	80 91 17 21 	lds	r24, 0x2117
 430:	90 91 18 21 	lds	r25, 0x2118
 434:	06 97       	sbiw	r24, 0x06	; 6
 436:	4c f4       	brge	.+18     	; 0x44a <SetPulseWidths+0xc0>
 438:	20 e0       	ldi	r18, 0x00	; 0
 43a:	30 e0       	ldi	r19, 0x00	; 0
 43c:	40 e0       	ldi	r20, 0x00	; 0
 43e:	50 e0       	ldi	r21, 0x00	; 0
 440:	60 e0       	ldi	r22, 0x00	; 0
 442:	70 e0       	ldi	r23, 0x00	; 0
 444:	80 e0       	ldi	r24, 0x00	; 0
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	8c cf       	rjmp	.-232    	; 0x362 <doPWM>
 44a:	08 95       	ret

0000044c <intPID_gains>:
 44c:	44 e0       	ldi	r20, 0x04	; 4
 44e:	50 e0       	ldi	r21, 0x00	; 0
 450:	40 93 87 20 	sts	0x2087, r20
 454:	50 93 88 20 	sts	0x2088, r21
 458:	82 e0       	ldi	r24, 0x02	; 2
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	80 93 89 20 	sts	0x2089, r24
 460:	90 93 8a 20 	sts	0x208A, r25
 464:	26 e0       	ldi	r18, 0x06	; 6
 466:	30 e0       	ldi	r19, 0x00	; 0
 468:	20 93 81 20 	sts	0x2081, r18
 46c:	30 93 82 20 	sts	0x2082, r19
 470:	10 92 83 20 	sts	0x2083, r1
 474:	10 92 84 20 	sts	0x2084, r1
 478:	80 93 3b 21 	sts	0x213B, r24
 47c:	90 93 3c 21 	sts	0x213C, r25
 480:	80 93 3d 21 	sts	0x213D, r24
 484:	90 93 3e 21 	sts	0x213E, r25
 488:	80 93 35 21 	sts	0x2135, r24
 48c:	90 93 36 21 	sts	0x2136, r25
 490:	10 92 37 21 	sts	0x2137, r1
 494:	10 92 38 21 	sts	0x2138, r1
 498:	40 93 25 20 	sts	0x2025, r20
 49c:	50 93 26 20 	sts	0x2026, r21
 4a0:	80 93 27 20 	sts	0x2027, r24
 4a4:	90 93 28 20 	sts	0x2028, r25
 4a8:	20 93 1f 20 	sts	0x201F, r18
 4ac:	30 93 20 20 	sts	0x2020, r19
 4b0:	10 92 21 20 	sts	0x2021, r1
 4b4:	10 92 22 20 	sts	0x2022, r1
 4b8:	88 ec       	ldi	r24, 0xC8	; 200
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	80 93 41 20 	sts	0x2041, r24
 4c0:	90 93 42 20 	sts	0x2042, r25
 4c4:	80 93 a3 20 	sts	0x20A3, r24
 4c8:	90 93 a4 20 	sts	0x20A4, r25
 4cc:	80 93 57 21 	sts	0x2157, r24
 4d0:	90 93 58 21 	sts	0x2158, r25
 4d4:	08 95       	ret

000004d6 <sendUM6_Data>:
 4d6:	8c ec       	ldi	r24, 0xCC	; 204
 4d8:	9c ec       	ldi	r25, 0xCC	; 204
 4da:	be d4       	rcall	.+2428   	; 0xe58 <sendData_int16_t>
 4dc:	80 91 35 20 	lds	r24, 0x2035
 4e0:	90 91 36 20 	lds	r25, 0x2036
 4e4:	b9 d4       	rcall	.+2418   	; 0xe58 <sendData_int16_t>
 4e6:	80 91 2d 20 	lds	r24, 0x202D
 4ea:	90 91 2e 20 	lds	r25, 0x202E
 4ee:	b4 c4       	rjmp	.+2408   	; 0xe58 <sendData_int16_t>

000004f0 <WriteToPC_SPI>:
 4f0:	ef 92       	push	r14
 4f2:	ff 92       	push	r15
 4f4:	0f 93       	push	r16
 4f6:	1f 93       	push	r17
 4f8:	cf 93       	push	r28
 4fa:	df 93       	push	r29
 4fc:	80 e1       	ldi	r24, 0x10	; 16
 4fe:	e0 e8       	ldi	r30, 0x80	; 128
 500:	f6 e0       	ldi	r31, 0x06	; 6
 502:	86 83       	std	Z+6, r24	; 0x06
 504:	80 e0       	ldi	r24, 0x00	; 0
 506:	ef d3       	rcall	.+2014   	; 0xce6 <spiPC_write_read>
 508:	d8 2f       	mov	r29, r24
 50a:	20 e0       	ldi	r18, 0x00	; 0
 50c:	c2 2f       	mov	r28, r18
 50e:	07 e1       	ldi	r16, 0x17	; 23
 510:	11 e2       	ldi	r17, 0x21	; 33
 512:	f8 01       	movw	r30, r16
 514:	c0 83       	st	Z, r28
 516:	d1 83       	std	Z+1, r29	; 0x01
 518:	80 91 66 20 	lds	r24, 0x2066
 51c:	e4 d3       	rcall	.+1992   	; 0xce6 <spiPC_write_read>
 51e:	c8 0f       	add	r28, r24
 520:	d1 1d       	adc	r29, r1
 522:	f8 01       	movw	r30, r16
 524:	c0 83       	st	Z, r28
 526:	d1 83       	std	Z+1, r29	; 0x01
 528:	0f 2e       	mov	r0, r31
 52a:	ff e2       	ldi	r31, 0x2F	; 47
 52c:	ef 2e       	mov	r14, r31
 52e:	f0 e2       	ldi	r31, 0x20	; 32
 530:	ff 2e       	mov	r15, r31
 532:	f0 2d       	mov	r31, r0
 534:	f7 01       	movw	r30, r14
 536:	81 81       	ldd	r24, Z+1	; 0x01
 538:	d6 d3       	rcall	.+1964   	; 0xce6 <spiPC_write_read>
 53a:	d8 2f       	mov	r29, r24
 53c:	f0 e0       	ldi	r31, 0x00	; 0
 53e:	cf 2f       	mov	r28, r31
 540:	05 e3       	ldi	r16, 0x35	; 53
 542:	10 e2       	ldi	r17, 0x20	; 32
 544:	f8 01       	movw	r30, r16
 546:	c0 83       	st	Z, r28
 548:	d1 83       	std	Z+1, r29	; 0x01
 54a:	f7 01       	movw	r30, r14
 54c:	80 81       	ld	r24, Z
 54e:	cb d3       	rcall	.+1942   	; 0xce6 <spiPC_write_read>
 550:	c8 0f       	add	r28, r24
 552:	d1 1d       	adc	r29, r1
 554:	f8 01       	movw	r30, r16
 556:	c0 83       	st	Z, r28
 558:	d1 83       	std	Z+1, r29	; 0x01
 55a:	0f 2e       	mov	r0, r31
 55c:	f1 e9       	ldi	r31, 0x91	; 145
 55e:	ef 2e       	mov	r14, r31
 560:	f0 e2       	ldi	r31, 0x20	; 32
 562:	ff 2e       	mov	r15, r31
 564:	f0 2d       	mov	r31, r0
 566:	f7 01       	movw	r30, r14
 568:	81 81       	ldd	r24, Z+1	; 0x01
 56a:	bd d3       	rcall	.+1914   	; 0xce6 <spiPC_write_read>
 56c:	d8 2f       	mov	r29, r24
 56e:	f0 e0       	ldi	r31, 0x00	; 0
 570:	cf 2f       	mov	r28, r31
 572:	07 e9       	ldi	r16, 0x97	; 151
 574:	10 e2       	ldi	r17, 0x20	; 32
 576:	f8 01       	movw	r30, r16
 578:	c0 83       	st	Z, r28
 57a:	d1 83       	std	Z+1, r29	; 0x01
 57c:	f7 01       	movw	r30, r14
 57e:	80 81       	ld	r24, Z
 580:	b2 d3       	rcall	.+1892   	; 0xce6 <spiPC_write_read>
 582:	c8 0f       	add	r28, r24
 584:	d1 1d       	adc	r29, r1
 586:	f8 01       	movw	r30, r16
 588:	c0 83       	st	Z, r28
 58a:	d1 83       	std	Z+1, r29	; 0x01
 58c:	0f 2e       	mov	r0, r31
 58e:	f5 e4       	ldi	r31, 0x45	; 69
 590:	ef 2e       	mov	r14, r31
 592:	f1 e2       	ldi	r31, 0x21	; 33
 594:	ff 2e       	mov	r15, r31
 596:	f0 2d       	mov	r31, r0
 598:	f7 01       	movw	r30, r14
 59a:	81 81       	ldd	r24, Z+1	; 0x01
 59c:	a4 d3       	rcall	.+1864   	; 0xce6 <spiPC_write_read>
 59e:	d8 2f       	mov	r29, r24
 5a0:	f0 e0       	ldi	r31, 0x00	; 0
 5a2:	cf 2f       	mov	r28, r31
 5a4:	0b e4       	ldi	r16, 0x4B	; 75
 5a6:	11 e2       	ldi	r17, 0x21	; 33
 5a8:	f8 01       	movw	r30, r16
 5aa:	c0 83       	st	Z, r28
 5ac:	d1 83       	std	Z+1, r29	; 0x01
 5ae:	f7 01       	movw	r30, r14
 5b0:	80 81       	ld	r24, Z
 5b2:	99 d3       	rcall	.+1842   	; 0xce6 <spiPC_write_read>
 5b4:	c8 0f       	add	r28, r24
 5b6:	d1 1d       	adc	r29, r1
 5b8:	f8 01       	movw	r30, r16
 5ba:	c0 83       	st	Z, r28
 5bc:	d1 83       	std	Z+1, r29	; 0x01
 5be:	e1 e4       	ldi	r30, 0x41	; 65
 5c0:	f1 e2       	ldi	r31, 0x21	; 33
 5c2:	80 81       	ld	r24, Z
 5c4:	91 81       	ldd	r25, Z+1	; 0x01
 5c6:	99 23       	and	r25, r25
 5c8:	0c f4       	brge	.+2      	; 0x5cc <WriteToPC_SPI+0xdc>
 5ca:	01 96       	adiw	r24, 0x01	; 1
 5cc:	95 95       	asr	r25
 5ce:	87 95       	ror	r24
 5d0:	03 e3       	ldi	r16, 0x33	; 51
 5d2:	10 e2       	ldi	r17, 0x20	; 32
 5d4:	f8 01       	movw	r30, r16
 5d6:	80 83       	st	Z, r24
 5d8:	91 83       	std	Z+1, r25	; 0x01
 5da:	89 2f       	mov	r24, r25
 5dc:	84 d3       	rcall	.+1800   	; 0xce6 <spiPC_write_read>
 5de:	d8 2f       	mov	r29, r24
 5e0:	f0 e0       	ldi	r31, 0x00	; 0
 5e2:	cf 2f       	mov	r28, r31
 5e4:	0f 2e       	mov	r0, r31
 5e6:	fb e3       	ldi	r31, 0x3B	; 59
 5e8:	ef 2e       	mov	r14, r31
 5ea:	f1 e2       	ldi	r31, 0x21	; 33
 5ec:	ff 2e       	mov	r15, r31
 5ee:	f0 2d       	mov	r31, r0
 5f0:	f7 01       	movw	r30, r14
 5f2:	c0 83       	st	Z, r28
 5f4:	d1 83       	std	Z+1, r29	; 0x01
 5f6:	f8 01       	movw	r30, r16
 5f8:	80 81       	ld	r24, Z
 5fa:	75 d3       	rcall	.+1770   	; 0xce6 <spiPC_write_read>
 5fc:	c8 0f       	add	r28, r24
 5fe:	d1 1d       	adc	r29, r1
 600:	f7 01       	movw	r30, r14
 602:	c0 83       	st	Z, r28
 604:	d1 83       	std	Z+1, r29	; 0x01
 606:	0f 2e       	mov	r0, r31
 608:	f5 e9       	ldi	r31, 0x95	; 149
 60a:	ef 2e       	mov	r14, r31
 60c:	f0 e2       	ldi	r31, 0x20	; 32
 60e:	ff 2e       	mov	r15, r31
 610:	f0 2d       	mov	r31, r0
 612:	f7 01       	movw	r30, r14
 614:	c0 83       	st	Z, r28
 616:	d1 83       	std	Z+1, r29	; 0x01
 618:	8d 2f       	mov	r24, r29
 61a:	65 d3       	rcall	.+1738   	; 0xce6 <spiPC_write_read>
 61c:	d8 2f       	mov	r29, r24
 61e:	f0 e0       	ldi	r31, 0x00	; 0
 620:	cf 2f       	mov	r28, r31
 622:	0d e3       	ldi	r16, 0x3D	; 61
 624:	11 e2       	ldi	r17, 0x21	; 33
 626:	f8 01       	movw	r30, r16
 628:	c0 83       	st	Z, r28
 62a:	d1 83       	std	Z+1, r29	; 0x01
 62c:	f7 01       	movw	r30, r14
 62e:	80 81       	ld	r24, Z
 630:	5a d3       	rcall	.+1716   	; 0xce6 <spiPC_write_read>
 632:	9e 01       	movw	r18, r28
 634:	28 0f       	add	r18, r24
 636:	31 1d       	adc	r19, r1
 638:	c9 01       	movw	r24, r18
 63a:	f8 01       	movw	r30, r16
 63c:	20 83       	st	Z, r18
 63e:	31 83       	std	Z+1, r19	; 0x01
 640:	c9 e4       	ldi	r28, 0x49	; 73
 642:	d1 e2       	ldi	r29, 0x21	; 33
 644:	28 83       	st	Y, r18
 646:	39 83       	std	Y+1, r19	; 0x01
 648:	89 2f       	mov	r24, r25
 64a:	4d d3       	rcall	.+1690   	; 0xce6 <spiPC_write_read>
 64c:	18 2f       	mov	r17, r24
 64e:	00 e0       	ldi	r16, 0x00	; 0
 650:	0f 2e       	mov	r0, r31
 652:	f5 e3       	ldi	r31, 0x35	; 53
 654:	ef 2e       	mov	r14, r31
 656:	f1 e2       	ldi	r31, 0x21	; 33
 658:	ff 2e       	mov	r15, r31
 65a:	f0 2d       	mov	r31, r0
 65c:	f7 01       	movw	r30, r14
 65e:	00 83       	st	Z, r16
 660:	11 83       	std	Z+1, r17	; 0x01
 662:	88 81       	ld	r24, Y
 664:	40 d3       	rcall	.+1664   	; 0xce6 <spiPC_write_read>
 666:	08 0f       	add	r16, r24
 668:	11 1d       	adc	r17, r1
 66a:	f7 01       	movw	r30, r14
 66c:	00 83       	st	Z, r16
 66e:	11 83       	std	Z+1, r17	; 0x01
 670:	89 81       	ldd	r24, Y+1	; 0x01
 672:	39 d3       	rcall	.+1650   	; 0xce6 <spiPC_write_read>
 674:	10 92 63 20 	sts	0x2063, r1
 678:	80 93 64 20 	sts	0x2064, r24
 67c:	88 81       	ld	r24, Y
 67e:	33 d3       	rcall	.+1638   	; 0xce6 <spiPC_write_read>
 680:	20 91 63 20 	lds	r18, 0x2063
 684:	30 91 64 20 	lds	r19, 0x2064
 688:	28 0f       	add	r18, r24
 68a:	31 1d       	adc	r19, r1
 68c:	20 93 63 20 	sts	0x2063, r18
 690:	30 93 64 20 	sts	0x2064, r19
 694:	80 e8       	ldi	r24, 0x80	; 128
 696:	27 d3       	rcall	.+1614   	; 0xce6 <spiPC_write_read>
 698:	80 93 66 20 	sts	0x2066, r24
 69c:	80 e8       	ldi	r24, 0x80	; 128
 69e:	23 d3       	rcall	.+1606   	; 0xce6 <spiPC_write_read>
 6a0:	80 93 66 20 	sts	0x2066, r24
 6a4:	80 e1       	ldi	r24, 0x10	; 16
 6a6:	e0 e8       	ldi	r30, 0x80	; 128
 6a8:	f6 e0       	ldi	r31, 0x06	; 6
 6aa:	85 83       	std	Z+5, r24	; 0x05
 6ac:	80 91 63 20 	lds	r24, 0x2063
 6b0:	90 91 64 20 	lds	r25, 0x2064
 6b4:	df 91       	pop	r29
 6b6:	cf 91       	pop	r28
 6b8:	1f 91       	pop	r17
 6ba:	0f 91       	pop	r16
 6bc:	ff 90       	pop	r15
 6be:	ef 90       	pop	r14
 6c0:	08 95       	ret

000006c2 <WriteToPC_SPI_test>:
 6c2:	ef 92       	push	r14
 6c4:	ff 92       	push	r15
 6c6:	0f 93       	push	r16
 6c8:	1f 93       	push	r17
 6ca:	cf 93       	push	r28
 6cc:	df 93       	push	r29
 6ce:	80 e1       	ldi	r24, 0x10	; 16
 6d0:	e0 e8       	ldi	r30, 0x80	; 128
 6d2:	f6 e0       	ldi	r31, 0x06	; 6
 6d4:	86 83       	std	Z+6, r24	; 0x06
 6d6:	80 e0       	ldi	r24, 0x00	; 0
 6d8:	06 d3       	rcall	.+1548   	; 0xce6 <spiPC_write_read>
 6da:	d8 2f       	mov	r29, r24
 6dc:	80 e0       	ldi	r24, 0x00	; 0
 6de:	c8 2f       	mov	r28, r24
 6e0:	07 e1       	ldi	r16, 0x17	; 23
 6e2:	11 e2       	ldi	r17, 0x21	; 33
 6e4:	f8 01       	movw	r30, r16
 6e6:	c0 83       	st	Z, r28
 6e8:	d1 83       	std	Z+1, r29	; 0x01
 6ea:	80 91 66 20 	lds	r24, 0x2066
 6ee:	fb d2       	rcall	.+1526   	; 0xce6 <spiPC_write_read>
 6f0:	c8 0f       	add	r28, r24
 6f2:	d1 1d       	adc	r29, r1
 6f4:	f8 01       	movw	r30, r16
 6f6:	c0 83       	st	Z, r28
 6f8:	d1 83       	std	Z+1, r29	; 0x01
 6fa:	e5 e3       	ldi	r30, 0x35	; 53
 6fc:	f0 e2       	ldi	r31, 0x20	; 32
 6fe:	80 81       	ld	r24, Z
 700:	91 81       	ldd	r25, Z+1	; 0x01
 702:	99 23       	and	r25, r25
 704:	0c f4       	brge	.+2      	; 0x708 <WriteToPC_SPI_test+0x46>
 706:	01 96       	adiw	r24, 0x01	; 1
 708:	95 95       	asr	r25
 70a:	87 95       	ror	r24
 70c:	cf e2       	ldi	r28, 0x2F	; 47
 70e:	d0 e2       	ldi	r29, 0x20	; 32
 710:	88 83       	st	Y, r24
 712:	99 83       	std	Y+1, r25	; 0x01
 714:	89 2f       	mov	r24, r25
 716:	e7 d2       	rcall	.+1486   	; 0xce6 <spiPC_write_read>
 718:	10 92 66 20 	sts	0x2066, r1
 71c:	88 81       	ld	r24, Y
 71e:	e3 d2       	rcall	.+1478   	; 0xce6 <spiPC_write_read>
 720:	90 91 66 20 	lds	r25, 0x2066
 724:	89 0f       	add	r24, r25
 726:	80 93 66 20 	sts	0x2066, r24
 72a:	e5 e3       	ldi	r30, 0x35	; 53
 72c:	f0 e2       	ldi	r31, 0x20	; 32
 72e:	80 81       	ld	r24, Z
 730:	91 81       	ldd	r25, Z+1	; 0x01
 732:	99 23       	and	r25, r25
 734:	0c f4       	brge	.+2      	; 0x738 <WriteToPC_SPI_test+0x76>
 736:	01 96       	adiw	r24, 0x01	; 1
 738:	95 95       	asr	r25
 73a:	87 95       	ror	r24
 73c:	01 e9       	ldi	r16, 0x91	; 145
 73e:	10 e2       	ldi	r17, 0x20	; 32
 740:	f8 01       	movw	r30, r16
 742:	80 83       	st	Z, r24
 744:	91 83       	std	Z+1, r25	; 0x01
 746:	89 2f       	mov	r24, r25
 748:	ce d2       	rcall	.+1436   	; 0xce6 <spiPC_write_read>
 74a:	d8 2f       	mov	r29, r24
 74c:	f0 e0       	ldi	r31, 0x00	; 0
 74e:	cf 2f       	mov	r28, r31
 750:	0f 2e       	mov	r0, r31
 752:	f7 e9       	ldi	r31, 0x97	; 151
 754:	ef 2e       	mov	r14, r31
 756:	f0 e2       	ldi	r31, 0x20	; 32
 758:	ff 2e       	mov	r15, r31
 75a:	f0 2d       	mov	r31, r0
 75c:	f7 01       	movw	r30, r14
 75e:	c0 83       	st	Z, r28
 760:	d1 83       	std	Z+1, r29	; 0x01
 762:	f8 01       	movw	r30, r16
 764:	80 81       	ld	r24, Z
 766:	bf d2       	rcall	.+1406   	; 0xce6 <spiPC_write_read>
 768:	c8 0f       	add	r28, r24
 76a:	d1 1d       	adc	r29, r1
 76c:	f7 01       	movw	r30, r14
 76e:	c0 83       	st	Z, r28
 770:	d1 83       	std	Z+1, r29	; 0x01
 772:	0f 2e       	mov	r0, r31
 774:	f5 e4       	ldi	r31, 0x45	; 69
 776:	ef 2e       	mov	r14, r31
 778:	f1 e2       	ldi	r31, 0x21	; 33
 77a:	ff 2e       	mov	r15, r31
 77c:	f0 2d       	mov	r31, r0
 77e:	f7 01       	movw	r30, r14
 780:	81 81       	ldd	r24, Z+1	; 0x01
 782:	b1 d2       	rcall	.+1378   	; 0xce6 <spiPC_write_read>
 784:	d8 2f       	mov	r29, r24
 786:	f0 e0       	ldi	r31, 0x00	; 0
 788:	cf 2f       	mov	r28, r31
 78a:	0b e4       	ldi	r16, 0x4B	; 75
 78c:	11 e2       	ldi	r17, 0x21	; 33
 78e:	f8 01       	movw	r30, r16
 790:	c0 83       	st	Z, r28
 792:	d1 83       	std	Z+1, r29	; 0x01
 794:	f7 01       	movw	r30, r14
 796:	80 81       	ld	r24, Z
 798:	a6 d2       	rcall	.+1356   	; 0xce6 <spiPC_write_read>
 79a:	c8 0f       	add	r28, r24
 79c:	d1 1d       	adc	r29, r1
 79e:	f8 01       	movw	r30, r16
 7a0:	c0 83       	st	Z, r28
 7a2:	d1 83       	std	Z+1, r29	; 0x01
 7a4:	e5 e3       	ldi	r30, 0x35	; 53
 7a6:	f0 e2       	ldi	r31, 0x20	; 32
 7a8:	80 81       	ld	r24, Z
 7aa:	91 81       	ldd	r25, Z+1	; 0x01
 7ac:	99 23       	and	r25, r25
 7ae:	0c f4       	brge	.+2      	; 0x7b2 <WriteToPC_SPI_test+0xf0>
 7b0:	01 96       	adiw	r24, 0x01	; 1
 7b2:	95 95       	asr	r25
 7b4:	87 95       	ror	r24
 7b6:	03 e3       	ldi	r16, 0x33	; 51
 7b8:	10 e2       	ldi	r17, 0x20	; 32
 7ba:	f8 01       	movw	r30, r16
 7bc:	80 83       	st	Z, r24
 7be:	91 83       	std	Z+1, r25	; 0x01
 7c0:	89 2f       	mov	r24, r25
 7c2:	91 d2       	rcall	.+1314   	; 0xce6 <spiPC_write_read>
 7c4:	d8 2f       	mov	r29, r24
 7c6:	f0 e0       	ldi	r31, 0x00	; 0
 7c8:	cf 2f       	mov	r28, r31
 7ca:	0f 2e       	mov	r0, r31
 7cc:	f7 e8       	ldi	r31, 0x87	; 135
 7ce:	ef 2e       	mov	r14, r31
 7d0:	f0 e2       	ldi	r31, 0x20	; 32
 7d2:	ff 2e       	mov	r15, r31
 7d4:	f0 2d       	mov	r31, r0
 7d6:	f7 01       	movw	r30, r14
 7d8:	c0 83       	st	Z, r28
 7da:	d1 83       	std	Z+1, r29	; 0x01
 7dc:	f8 01       	movw	r30, r16
 7de:	80 81       	ld	r24, Z
 7e0:	82 d2       	rcall	.+1284   	; 0xce6 <spiPC_write_read>
 7e2:	c8 0f       	add	r28, r24
 7e4:	d1 1d       	adc	r29, r1
 7e6:	f7 01       	movw	r30, r14
 7e8:	c0 83       	st	Z, r28
 7ea:	d1 83       	std	Z+1, r29	; 0x01
 7ec:	eb e1       	ldi	r30, 0x1B	; 27
 7ee:	f0 e2       	ldi	r31, 0x20	; 32
 7f0:	80 81       	ld	r24, Z
 7f2:	91 81       	ldd	r25, Z+1	; 0x01
 7f4:	99 23       	and	r25, r25
 7f6:	0c f4       	brge	.+2      	; 0x7fa <WriteToPC_SPI_test+0x138>
 7f8:	01 96       	adiw	r24, 0x01	; 1
 7fa:	95 95       	asr	r25
 7fc:	87 95       	ror	r24
 7fe:	05 e9       	ldi	r16, 0x95	; 149
 800:	10 e2       	ldi	r17, 0x20	; 32
 802:	f8 01       	movw	r30, r16
 804:	80 83       	st	Z, r24
 806:	91 83       	std	Z+1, r25	; 0x01
 808:	89 2f       	mov	r24, r25
 80a:	6d d2       	rcall	.+1242   	; 0xce6 <spiPC_write_read>
 80c:	d8 2f       	mov	r29, r24
 80e:	f0 e0       	ldi	r31, 0x00	; 0
 810:	cf 2f       	mov	r28, r31
 812:	0f 2e       	mov	r0, r31
 814:	f9 e8       	ldi	r31, 0x89	; 137
 816:	ef 2e       	mov	r14, r31
 818:	f0 e2       	ldi	r31, 0x20	; 32
 81a:	ff 2e       	mov	r15, r31
 81c:	f0 2d       	mov	r31, r0
 81e:	f7 01       	movw	r30, r14
 820:	c0 83       	st	Z, r28
 822:	d1 83       	std	Z+1, r29	; 0x01
 824:	f8 01       	movw	r30, r16
 826:	80 81       	ld	r24, Z
 828:	5e d2       	rcall	.+1212   	; 0xce6 <spiPC_write_read>
 82a:	c8 0f       	add	r28, r24
 82c:	d1 1d       	adc	r29, r1
 82e:	f7 01       	movw	r30, r14
 830:	c0 83       	st	Z, r28
 832:	d1 83       	std	Z+1, r29	; 0x01
 834:	e3 e1       	ldi	r30, 0x13	; 19
 836:	f0 e2       	ldi	r31, 0x20	; 32
 838:	80 81       	ld	r24, Z
 83a:	91 81       	ldd	r25, Z+1	; 0x01
 83c:	99 23       	and	r25, r25
 83e:	0c f4       	brge	.+2      	; 0x842 <WriteToPC_SPI_test+0x180>
 840:	01 96       	adiw	r24, 0x01	; 1
 842:	95 95       	asr	r25
 844:	87 95       	ror	r24
 846:	c9 e4       	ldi	r28, 0x49	; 73
 848:	d1 e2       	ldi	r29, 0x21	; 33
 84a:	88 83       	st	Y, r24
 84c:	99 83       	std	Y+1, r25	; 0x01
 84e:	89 2f       	mov	r24, r25
 850:	4a d2       	rcall	.+1172   	; 0xce6 <spiPC_write_read>
 852:	18 2f       	mov	r17, r24
 854:	00 e0       	ldi	r16, 0x00	; 0
 856:	0f 2e       	mov	r0, r31
 858:	f1 e8       	ldi	r31, 0x81	; 129
 85a:	ef 2e       	mov	r14, r31
 85c:	f0 e2       	ldi	r31, 0x20	; 32
 85e:	ff 2e       	mov	r15, r31
 860:	f0 2d       	mov	r31, r0
 862:	f7 01       	movw	r30, r14
 864:	00 83       	st	Z, r16
 866:	11 83       	std	Z+1, r17	; 0x01
 868:	88 81       	ld	r24, Y
 86a:	3d d2       	rcall	.+1146   	; 0xce6 <spiPC_write_read>
 86c:	08 0f       	add	r16, r24
 86e:	11 1d       	adc	r17, r1
 870:	f7 01       	movw	r30, r14
 872:	00 83       	st	Z, r16
 874:	11 83       	std	Z+1, r17	; 0x01
 876:	89 81       	ldd	r24, Y+1	; 0x01
 878:	36 d2       	rcall	.+1132   	; 0xce6 <spiPC_write_read>
 87a:	10 92 63 20 	sts	0x2063, r1
 87e:	80 93 64 20 	sts	0x2064, r24
 882:	88 81       	ld	r24, Y
 884:	30 d2       	rcall	.+1120   	; 0xce6 <spiPC_write_read>
 886:	20 91 63 20 	lds	r18, 0x2063
 88a:	30 91 64 20 	lds	r19, 0x2064
 88e:	28 0f       	add	r18, r24
 890:	31 1d       	adc	r19, r1
 892:	20 93 63 20 	sts	0x2063, r18
 896:	30 93 64 20 	sts	0x2064, r19
 89a:	80 e8       	ldi	r24, 0x80	; 128
 89c:	24 d2       	rcall	.+1096   	; 0xce6 <spiPC_write_read>
 89e:	80 93 66 20 	sts	0x2066, r24
 8a2:	80 e8       	ldi	r24, 0x80	; 128
 8a4:	20 d2       	rcall	.+1088   	; 0xce6 <spiPC_write_read>
 8a6:	80 93 66 20 	sts	0x2066, r24
 8aa:	80 e1       	ldi	r24, 0x10	; 16
 8ac:	e0 e8       	ldi	r30, 0x80	; 128
 8ae:	f6 e0       	ldi	r31, 0x06	; 6
 8b0:	85 83       	std	Z+5, r24	; 0x05
 8b2:	80 91 63 20 	lds	r24, 0x2063
 8b6:	90 91 64 20 	lds	r25, 0x2064
 8ba:	df 91       	pop	r29
 8bc:	cf 91       	pop	r28
 8be:	1f 91       	pop	r17
 8c0:	0f 91       	pop	r16
 8c2:	ff 90       	pop	r15
 8c4:	ef 90       	pop	r14
 8c6:	08 95       	ret

000008c8 <UpdateEulerAngles>:
 8c8:	cf 93       	push	r28
 8ca:	80 e1       	ldi	r24, 0x10	; 16
 8cc:	e0 ea       	ldi	r30, 0xA0	; 160
 8ce:	f6 e0       	ldi	r31, 0x06	; 6
 8d0:	86 83       	std	Z+6, r24	; 0x06
 8d2:	80 e0       	ldi	r24, 0x00	; 0
 8d4:	16 d2       	rcall	.+1068   	; 0xd02 <spiIMU_write_read>
 8d6:	82 e6       	ldi	r24, 0x62	; 98
 8d8:	14 d2       	rcall	.+1064   	; 0xd02 <spiIMU_write_read>
 8da:	80 e0       	ldi	r24, 0x00	; 0
 8dc:	12 d2       	rcall	.+1060   	; 0xd02 <spiIMU_write_read>
 8de:	c8 2f       	mov	r28, r24
 8e0:	80 e0       	ldi	r24, 0x00	; 0
 8e2:	0f d2       	rcall	.+1054   	; 0xd02 <spiIMU_write_read>
 8e4:	3c 2f       	mov	r19, r28
 8e6:	20 e0       	ldi	r18, 0x00	; 0
 8e8:	28 2b       	or	r18, r24
 8ea:	20 93 2d 20 	sts	0x202D, r18
 8ee:	30 93 2e 20 	sts	0x202E, r19
 8f2:	c9 01       	movw	r24, r18
 8f4:	99 23       	and	r25, r25
 8f6:	0c f4       	brge	.+2      	; 0x8fa <UpdateEulerAngles+0x32>
 8f8:	01 96       	adiw	r24, 0x01	; 1
 8fa:	95 95       	asr	r25
 8fc:	87 95       	ror	r24
 8fe:	80 93 2f 20 	sts	0x202F, r24
 902:	90 93 30 20 	sts	0x2030, r25
 906:	80 e0       	ldi	r24, 0x00	; 0
 908:	fc d1       	rcall	.+1016   	; 0xd02 <spiIMU_write_read>
 90a:	c8 2f       	mov	r28, r24
 90c:	83 e6       	ldi	r24, 0x63	; 99
 90e:	f9 d1       	rcall	.+1010   	; 0xd02 <spiIMU_write_read>
 910:	3c 2f       	mov	r19, r28
 912:	20 e0       	ldi	r18, 0x00	; 0
 914:	28 2b       	or	r18, r24
 916:	20 93 8f 20 	sts	0x208F, r18
 91a:	30 93 90 20 	sts	0x2090, r19
 91e:	c9 01       	movw	r24, r18
 920:	99 23       	and	r25, r25
 922:	0c f4       	brge	.+2      	; 0x926 <UpdateEulerAngles+0x5e>
 924:	01 96       	adiw	r24, 0x01	; 1
 926:	95 95       	asr	r25
 928:	87 95       	ror	r24
 92a:	80 93 91 20 	sts	0x2091, r24
 92e:	90 93 92 20 	sts	0x2092, r25
 932:	80 e0       	ldi	r24, 0x00	; 0
 934:	e6 d1       	rcall	.+972    	; 0xd02 <spiIMU_write_read>
 936:	c8 2f       	mov	r28, r24
 938:	80 e0       	ldi	r24, 0x00	; 0
 93a:	e3 d1       	rcall	.+966    	; 0xd02 <spiIMU_write_read>
 93c:	3c 2f       	mov	r19, r28
 93e:	20 e0       	ldi	r18, 0x00	; 0
 940:	28 2b       	or	r18, r24
 942:	20 93 43 21 	sts	0x2143, r18
 946:	30 93 44 21 	sts	0x2144, r19
 94a:	c9 01       	movw	r24, r18
 94c:	99 23       	and	r25, r25
 94e:	0c f4       	brge	.+2      	; 0x952 <UpdateEulerAngles+0x8a>
 950:	01 96       	adiw	r24, 0x01	; 1
 952:	95 95       	asr	r25
 954:	87 95       	ror	r24
 956:	80 93 45 21 	sts	0x2145, r24
 95a:	90 93 46 21 	sts	0x2146, r25
 95e:	80 e0       	ldi	r24, 0x00	; 0
 960:	d0 d1       	rcall	.+928    	; 0xd02 <spiIMU_write_read>
 962:	8c e5       	ldi	r24, 0x5C	; 92
 964:	ce d1       	rcall	.+924    	; 0xd02 <spiIMU_write_read>
 966:	80 e0       	ldi	r24, 0x00	; 0
 968:	cc d1       	rcall	.+920    	; 0xd02 <spiIMU_write_read>
 96a:	c8 2f       	mov	r28, r24
 96c:	80 e0       	ldi	r24, 0x00	; 0
 96e:	c9 d1       	rcall	.+914    	; 0xd02 <spiIMU_write_read>
 970:	3c 2f       	mov	r19, r28
 972:	20 e0       	ldi	r18, 0x00	; 0
 974:	28 2b       	or	r18, r24
 976:	20 93 31 20 	sts	0x2031, r18
 97a:	30 93 32 20 	sts	0x2032, r19
 97e:	c9 01       	movw	r24, r18
 980:	99 23       	and	r25, r25
 982:	0c f4       	brge	.+2      	; 0x986 <UpdateEulerAngles+0xbe>
 984:	01 96       	adiw	r24, 0x01	; 1
 986:	95 95       	asr	r25
 988:	87 95       	ror	r24
 98a:	80 93 33 20 	sts	0x2033, r24
 98e:	90 93 34 20 	sts	0x2034, r25
 992:	80 e0       	ldi	r24, 0x00	; 0
 994:	b6 d1       	rcall	.+876    	; 0xd02 <spiIMU_write_read>
 996:	c8 2f       	mov	r28, r24
 998:	8d e5       	ldi	r24, 0x5D	; 93
 99a:	b3 d1       	rcall	.+870    	; 0xd02 <spiIMU_write_read>
 99c:	3c 2f       	mov	r19, r28
 99e:	20 e0       	ldi	r18, 0x00	; 0
 9a0:	28 2b       	or	r18, r24
 9a2:	20 93 93 20 	sts	0x2093, r18
 9a6:	30 93 94 20 	sts	0x2094, r19
 9aa:	c9 01       	movw	r24, r18
 9ac:	99 23       	and	r25, r25
 9ae:	0c f4       	brge	.+2      	; 0x9b2 <UpdateEulerAngles+0xea>
 9b0:	01 96       	adiw	r24, 0x01	; 1
 9b2:	95 95       	asr	r25
 9b4:	87 95       	ror	r24
 9b6:	80 93 95 20 	sts	0x2095, r24
 9ba:	90 93 96 20 	sts	0x2096, r25
 9be:	80 e0       	ldi	r24, 0x00	; 0
 9c0:	a0 d1       	rcall	.+832    	; 0xd02 <spiIMU_write_read>
 9c2:	c8 2f       	mov	r28, r24
 9c4:	80 e0       	ldi	r24, 0x00	; 0
 9c6:	9d d1       	rcall	.+826    	; 0xd02 <spiIMU_write_read>
 9c8:	3c 2f       	mov	r19, r28
 9ca:	20 e0       	ldi	r18, 0x00	; 0
 9cc:	28 2b       	or	r18, r24
 9ce:	20 93 47 21 	sts	0x2147, r18
 9d2:	30 93 48 21 	sts	0x2148, r19
 9d6:	c9 01       	movw	r24, r18
 9d8:	99 23       	and	r25, r25
 9da:	0c f4       	brge	.+2      	; 0x9de <UpdateEulerAngles+0x116>
 9dc:	01 96       	adiw	r24, 0x01	; 1
 9de:	95 95       	asr	r25
 9e0:	87 95       	ror	r24
 9e2:	80 93 49 21 	sts	0x2149, r24
 9e6:	90 93 4a 21 	sts	0x214A, r25
 9ea:	80 e0       	ldi	r24, 0x00	; 0
 9ec:	8a d1       	rcall	.+788    	; 0xd02 <spiIMU_write_read>
 9ee:	80 e0       	ldi	r24, 0x00	; 0
 9f0:	88 d1       	rcall	.+784    	; 0xd02 <spiIMU_write_read>
 9f2:	80 e1       	ldi	r24, 0x10	; 16
 9f4:	e0 ea       	ldi	r30, 0xA0	; 160
 9f6:	f6 e0       	ldi	r31, 0x06	; 6
 9f8:	85 83       	std	Z+5, r24	; 0x05
 9fa:	cf 91       	pop	r28
 9fc:	08 95       	ret

000009fe <ControlLoop>:
 9fe:	80 91 79 21 	lds	r24, 0x2179
 a02:	90 91 7a 21 	lds	r25, 0x217A
 a06:	01 96       	adiw	r24, 0x01	; 1
 a08:	80 93 79 21 	sts	0x2179, r24
 a0c:	90 93 7a 21 	sts	0x217A, r25
 a10:	5b df       	rcall	.-330    	; 0x8c8 <UpdateEulerAngles>
 a12:	81 e7       	ldi	r24, 0x71	; 113
 a14:	90 e2       	ldi	r25, 0x20	; 32
 a16:	13 dc       	rcall	.-2010   	; 0x23e <PI_attitude_rate>
 a18:	85 e2       	ldi	r24, 0x25	; 37
 a1a:	91 e2       	ldi	r25, 0x21	; 33
 a1c:	10 dc       	rcall	.-2016   	; 0x23e <PI_attitude_rate>
 a1e:	8f e0       	ldi	r24, 0x0F	; 15
 a20:	90 e2       	ldi	r25, 0x20	; 32
 a22:	0d dc       	rcall	.-2022   	; 0x23e <PI_attitude_rate>
 a24:	b2 dc       	rcall	.-1692   	; 0x38a <SetPulseWidths>
 a26:	57 dd       	rcall	.-1362   	; 0x4d6 <sendUM6_Data>
 a28:	80 91 79 21 	lds	r24, 0x2179
 a2c:	90 91 7a 21 	lds	r25, 0x217A
 a30:	4f 97       	sbiw	r24, 0x1f	; 31
 a32:	d0 f0       	brcs	.+52     	; 0xa68 <ControlLoop+0x6a>
 a34:	80 91 0a 20 	lds	r24, 0x200A
 a38:	81 11       	cpse	r24, r1
 a3a:	09 c0       	rjmp	.+18     	; 0xa4e <ControlLoop+0x50>
 a3c:	59 dd       	rcall	.-1358   	; 0x4f0 <WriteToPC_SPI>
 a3e:	80 93 6f 20 	sts	0x206F, r24
 a42:	90 93 70 20 	sts	0x2070, r25
 a46:	10 92 79 21 	sts	0x2179, r1
 a4a:	10 92 7a 21 	sts	0x217A, r1
 a4e:	80 91 0a 20 	lds	r24, 0x200A
 a52:	81 30       	cpi	r24, 0x01	; 1
 a54:	49 f4       	brne	.+18     	; 0xa68 <ControlLoop+0x6a>
 a56:	35 de       	rcall	.-918    	; 0x6c2 <WriteToPC_SPI_test>
 a58:	80 93 6f 20 	sts	0x206F, r24
 a5c:	90 93 70 20 	sts	0x2070, r25
 a60:	10 92 79 21 	sts	0x2179, r1
 a64:	10 92 7a 21 	sts	0x217A, r1
 a68:	08 95       	ret

00000a6a <init32MHzClock>:
*********************************************************************************************************** */
void init32MHzClock(void)
{

	//	Enable the 32 MHz internal RC oscillator.
	OSC.CTRL|=OSC_RC32MEN_bm;
 a6a:	e0 e5       	ldi	r30, 0x50	; 80
 a6c:	f0 e0       	ldi	r31, 0x00	; 0
 a6e:	80 81       	ld	r24, Z
 a70:	82 60       	ori	r24, 0x02	; 2
 a72:	80 83       	st	Z, r24
	//	The R32MRFY flag is set when the 32 MHz internal RC oscillator is stable
	//	and ready to be used as the System Clock source.
	while(!(OSC.STATUS &OSC_RC32MRDY_bm ));
 a74:	81 81       	ldd	r24, Z+1	; 0x01
 a76:	81 ff       	sbrs	r24, 1
 a78:	fd cf       	rjmp	.-6      	; 0xa74 <init32MHzClock+0xa>
	CCP=CCP_IOREG_gc;
 a7a:	88 ed       	ldi	r24, 0xD8	; 216
 a7c:	84 bf       	out	0x34, r24	; 52
	//	Select the 32MHz RC oscillator for the system clock
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
 a7e:	81 e0       	ldi	r24, 0x01	; 1
 a80:	80 93 40 00 	sts	0x0040, r24
 a84:	08 95       	ret

00000a86 <intiLoopTimer>:
void intiLoopTimer()
{
	

	// Set the timer prescale.
	TCD0.CTRLA = TC_CLKSEL_DIV4_gc;
 a86:	e0 e0       	ldi	r30, 0x00	; 0
 a88:	f9 e0       	ldi	r31, 0x09	; 9
 a8a:	83 e0       	ldi	r24, 0x03	; 3
 a8c:	80 83       	st	Z, r24

	/* Configure the timer for normal counting. */
	TCD0.CTRLB = TC_WGMODE_NORMAL_gc;
 a8e:	11 82       	std	Z+1, r1	; 0x01
	
	//  32MHz / TC_CLKSEL_DIV4_gc
	TCD0.PER = 26666;  //  Need the time to overflow at 300Hz
 a90:	8a e2       	ldi	r24, 0x2A	; 42
 a92:	98 e6       	ldi	r25, 0x68	; 104
 a94:	86 a3       	std	Z+38, r24	; 0x26
 a96:	97 a3       	std	Z+39, r25	; 0x27
	
	//TCD0.PER = 60000;
	//Configure timer to generate an interrupt on overflow. */
	TCD0.INTCTRLA = TC_OVFINTLVL_LO_gc;
 a98:	81 e0       	ldi	r24, 0x01	; 1
 a9a:	86 83       	std	Z+6, r24	; 0x06

	/* Enable this interrupt level. */
	PMIC.CTRL |= PMIC_LOLVLEN_bm;
 a9c:	e0 ea       	ldi	r30, 0xA0	; 160
 a9e:	f0 e0       	ldi	r31, 0x00	; 0
 aa0:	82 81       	ldd	r24, Z+2	; 0x02
 aa2:	81 60       	ori	r24, 0x01	; 1
 aa4:	82 83       	std	Z+2, r24	; 0x02
 aa6:	08 95       	ret

00000aa8 <zeroSensor>:

}


uint8_t zeroSensor()
{
 aa8:	1f 93       	push	r17
 aaa:	cf 93       	push	r28
 aac:	df 93       	push	r29
	
	PORTF.OUTCLR = PIN4_bm;
 aae:	c0 ea       	ldi	r28, 0xA0	; 160
 ab0:	d6 e0       	ldi	r29, 0x06	; 6
 ab2:	10 e1       	ldi	r17, 0x10	; 16
 ab4:	1e 83       	std	Y+6, r17	; 0x06
	//zero mad 0xB0
	
	//uint8_t dummy_read = 0x00;
	//psi = yaw  phi = roll    theta = pitch
	//0x01 0xAC 0x00 0x00 0x00 0x00
	dummy_read = spiIMU_write_read(WRITE_COMMAND);
 ab6:	81 e0       	ldi	r24, 0x01	; 1
 ab8:	24 d1       	rcall	.+584    	; 0xd02 <spiIMU_write_read>
 aba:	80 93 66 20 	sts	0x2066, r24
	dummy_read = spiIMU_write_read(ZERO_GYROS);
 abe:	8c ea       	ldi	r24, 0xAC	; 172
 ac0:	20 d1       	rcall	.+576    	; 0xd02 <spiIMU_write_read>
 ac2:	80 93 66 20 	sts	0x2066, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 ac6:	80 e0       	ldi	r24, 0x00	; 0
 ac8:	1c d1       	rcall	.+568    	; 0xd02 <spiIMU_write_read>
 aca:	80 93 66 20 	sts	0x2066, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 ace:	80 e0       	ldi	r24, 0x00	; 0
 ad0:	18 d1       	rcall	.+560    	; 0xd02 <spiIMU_write_read>
 ad2:	80 93 66 20 	sts	0x2066, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 ad6:	80 e0       	ldi	r24, 0x00	; 0
 ad8:	14 d1       	rcall	.+552    	; 0xd02 <spiIMU_write_read>
 ada:	80 93 66 20 	sts	0x2066, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 ade:	80 e0       	ldi	r24, 0x00	; 0
 ae0:	10 d1       	rcall	.+544    	; 0xd02 <spiIMU_write_read>
 ae2:	80 93 66 20 	sts	0x2066, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 ae6:	8f e8       	ldi	r24, 0x8F	; 143
 ae8:	91 e0       	ldi	r25, 0x01	; 1
 aea:	01 97       	sbiw	r24, 0x01	; 1
 aec:	f1 f7       	brne	.-4      	; 0xaea <zeroSensor+0x42>
 aee:	00 c0       	rjmp	.+0      	; 0xaf0 <zeroSensor+0x48>
 af0:	00 00       	nop
	
	_delay_us(50);
	dummy_read = spiIMU_write_read(WRITE_COMMAND);
 af2:	81 e0       	ldi	r24, 0x01	; 1
 af4:	06 d1       	rcall	.+524    	; 0xd02 <spiIMU_write_read>
 af6:	80 93 66 20 	sts	0x2066, r24
	dummy_read = spiIMU_write_read(SET_ACCEL_REF);
 afa:	8f ea       	ldi	r24, 0xAF	; 175
 afc:	02 d1       	rcall	.+516    	; 0xd02 <spiIMU_write_read>
 afe:	80 93 66 20 	sts	0x2066, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 b02:	80 e0       	ldi	r24, 0x00	; 0
 b04:	fe d0       	rcall	.+508    	; 0xd02 <spiIMU_write_read>
 b06:	80 93 66 20 	sts	0x2066, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 b0a:	80 e0       	ldi	r24, 0x00	; 0
 b0c:	fa d0       	rcall	.+500    	; 0xd02 <spiIMU_write_read>
 b0e:	80 93 66 20 	sts	0x2066, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 b12:	80 e0       	ldi	r24, 0x00	; 0
 b14:	f6 d0       	rcall	.+492    	; 0xd02 <spiIMU_write_read>
 b16:	80 93 66 20 	sts	0x2066, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 b1a:	80 e0       	ldi	r24, 0x00	; 0
 b1c:	f2 d0       	rcall	.+484    	; 0xd02 <spiIMU_write_read>
 b1e:	80 93 66 20 	sts	0x2066, r24
 b22:	8f e8       	ldi	r24, 0x8F	; 143
 b24:	91 e0       	ldi	r25, 0x01	; 1
 b26:	01 97       	sbiw	r24, 0x01	; 1
 b28:	f1 f7       	brne	.-4      	; 0xb26 <zeroSensor+0x7e>
 b2a:	00 c0       	rjmp	.+0      	; 0xb2c <zeroSensor+0x84>
 b2c:	00 00       	nop
	

	_delay_us(50);
	dummy_read = spiIMU_write_read(WRITE_COMMAND);
 b2e:	81 e0       	ldi	r24, 0x01	; 1
 b30:	e8 d0       	rcall	.+464    	; 0xd02 <spiIMU_write_read>
 b32:	80 93 66 20 	sts	0x2066, r24
	dummy_read = spiIMU_write_read(SET_MAG_REF);
 b36:	80 eb       	ldi	r24, 0xB0	; 176
 b38:	e4 d0       	rcall	.+456    	; 0xd02 <spiIMU_write_read>
 b3a:	80 93 66 20 	sts	0x2066, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 b3e:	80 e0       	ldi	r24, 0x00	; 0
 b40:	e0 d0       	rcall	.+448    	; 0xd02 <spiIMU_write_read>
 b42:	80 93 66 20 	sts	0x2066, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 b46:	80 e0       	ldi	r24, 0x00	; 0
 b48:	dc d0       	rcall	.+440    	; 0xd02 <spiIMU_write_read>
 b4a:	80 93 66 20 	sts	0x2066, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 b4e:	80 e0       	ldi	r24, 0x00	; 0
 b50:	d8 d0       	rcall	.+432    	; 0xd02 <spiIMU_write_read>
 b52:	80 93 66 20 	sts	0x2066, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 b56:	80 e0       	ldi	r24, 0x00	; 0
 b58:	d4 d0       	rcall	.+424    	; 0xd02 <spiIMU_write_read>
 b5a:	80 93 66 20 	sts	0x2066, r24
 b5e:	8f e8       	ldi	r24, 0x8F	; 143
 b60:	91 e0       	ldi	r25, 0x01	; 1
 b62:	01 97       	sbiw	r24, 0x01	; 1
 b64:	f1 f7       	brne	.-4      	; 0xb62 <zeroSensor+0xba>
 b66:	00 c0       	rjmp	.+0      	; 0xb68 <zeroSensor+0xc0>
 b68:	00 00       	nop
	
	_delay_us(50);
	dummy_read = spiIMU_write_read(WRITE_COMMAND);
 b6a:	81 e0       	ldi	r24, 0x01	; 1
 b6c:	ca d0       	rcall	.+404    	; 0xd02 <spiIMU_write_read>
 b6e:	80 93 66 20 	sts	0x2066, r24
	dummy_read = spiIMU_write_read(UM6_RESET_EKF);
 b72:	8d ea       	ldi	r24, 0xAD	; 173
 b74:	c6 d0       	rcall	.+396    	; 0xd02 <spiIMU_write_read>
 b76:	80 93 66 20 	sts	0x2066, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 b7a:	80 e0       	ldi	r24, 0x00	; 0
 b7c:	c2 d0       	rcall	.+388    	; 0xd02 <spiIMU_write_read>
 b7e:	80 93 66 20 	sts	0x2066, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 b82:	80 e0       	ldi	r24, 0x00	; 0
 b84:	be d0       	rcall	.+380    	; 0xd02 <spiIMU_write_read>
 b86:	80 93 66 20 	sts	0x2066, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 b8a:	80 e0       	ldi	r24, 0x00	; 0
 b8c:	ba d0       	rcall	.+372    	; 0xd02 <spiIMU_write_read>
 b8e:	80 93 66 20 	sts	0x2066, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 b92:	80 e0       	ldi	r24, 0x00	; 0
 b94:	b6 d0       	rcall	.+364    	; 0xd02 <spiIMU_write_read>
 b96:	80 93 66 20 	sts	0x2066, r24
	

	PORTF.OUTSET = PIN4_bm;
 b9a:	1d 83       	std	Y+5, r17	; 0x05
	
	return 1;
	
}
 b9c:	81 e0       	ldi	r24, 0x01	; 1
 b9e:	df 91       	pop	r29
 ba0:	cf 91       	pop	r28
 ba2:	1f 91       	pop	r17
 ba4:	08 95       	ret

00000ba6 <initSystem>:
  DISCRIPTION:  Do all the pre control loop set up tasks
*********************************************************************************************************** */
uint8_t initSystem()
{

	sei();
 ba6:	78 94       	sei
	initUART();
 ba8:	36 d1       	rcall	.+620    	; 0xe16 <initUART>
	spi_set_up();
 baa:	b8 d0       	rcall	.+368    	; 0xd1c <spi_set_up>
	intPID_gains();
 bac:	4f dc       	rcall	.-1890   	; 0x44c <intPID_gains>
	zeroSensor();
 bae:	7c df       	rcall	.-264    	; 0xaa8 <zeroSensor>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 bb0:	2f ef       	ldi	r18, 0xFF	; 255
 bb2:	8f e4       	ldi	r24, 0x4F	; 79
 bb4:	93 ec       	ldi	r25, 0xC3	; 195
 bb6:	21 50       	subi	r18, 0x01	; 1
 bb8:	80 40       	sbci	r24, 0x00	; 0
 bba:	90 40       	sbci	r25, 0x00	; 0
 bbc:	e1 f7       	brne	.-8      	; 0xbb6 <initSystem+0x10>
 bbe:	00 c0       	rjmp	.+0      	; 0xbc0 <initSystem+0x1a>
 bc0:	00 00       	nop
	_delay_ms(2000);
	zeroSensor();
 bc2:	72 df       	rcall	.-284    	; 0xaa8 <zeroSensor>
	yawAxis.trim = 0;
 bc4:	10 92 77 21 	sts	0x2177, r1
 bc8:	10 92 78 21 	sts	0x2178, r1
	rollAxis.trim = 0;
 bcc:	10 92 61 20 	sts	0x2061, r1
 bd0:	10 92 62 20 	sts	0x2062, r1
	pitchAxis.trim = 0;
 bd4:	10 92 c3 20 	sts	0x20C3, r1
 bd8:	10 92 c4 20 	sts	0x20C4, r1
	return 1;

}
 bdc:	81 e0       	ldi	r24, 0x01	; 1
 bde:	08 95       	ret

00000be0 <main>:
OUTPUT:
DISCRIPTION: Main is used for set up and then just an infinite loop
*********************************************************************************************************** */
int main()
{
	PORTA.DIRSET = 0x0F;
 be0:	8f e0       	ldi	r24, 0x0F	; 15
 be2:	e0 e0       	ldi	r30, 0x00	; 0
 be4:	f6 e0       	ldi	r31, 0x06	; 6
 be6:	81 83       	std	Z+1, r24	; 0x01
	systemState = SYSTEM_STATE_STARTUP;
 be8:	8a ea       	ldi	r24, 0xAA	; 170
 bea:	80 93 65 20 	sts	0x2065, r24
	init32MHzClock();
 bee:	3d df       	rcall	.-390    	; 0xa6a <init32MHzClock>
	initSystem();
 bf0:	da df       	rcall	.-76     	; 0xba6 <initSystem>
	intiLoopTimer();
 bf2:	49 df       	rcall	.-366    	; 0xa86 <intiLoopTimer>

	
	while(1)
	{
		nop();
 bf4:	00 00       	nop
 bf6:	fe cf       	rjmp	.-4      	; 0xbf4 <main+0x14>

00000bf8 <State>:
DISCRIPTION:   Determine what to do based on systemState.  Used to initializes and arm the quad.
*********************************************************************************************************** */
void State()
{
	
	LEDPORT.OUTTGL = PIN0_bm;
 bf8:	81 e0       	ldi	r24, 0x01	; 1
 bfa:	e0 e0       	ldi	r30, 0x00	; 0
 bfc:	f6 e0       	ldi	r31, 0x06	; 6
 bfe:	87 83       	std	Z+7, r24	; 0x07
	

	switch(systemState)
 c00:	80 91 65 20 	lds	r24, 0x2065
 c04:	82 30       	cpi	r24, 0x02	; 2
 c06:	71 f1       	breq	.+92     	; 0xc64 <State+0x6c>
 c08:	18 f4       	brcc	.+6      	; 0xc10 <State+0x18>
 c0a:	81 30       	cpi	r24, 0x01	; 1
 c0c:	a9 f5       	brne	.+106    	; 0xc78 <State+0x80>
 c0e:	0a c0       	rjmp	.+20     	; 0xc24 <State+0x2c>
 c10:	84 30       	cpi	r24, 0x04	; 4
 c12:	69 f1       	breq	.+90     	; 0xc6e <State+0x76>
 c14:	8a 3a       	cpi	r24, 0xAA	; 170
 c16:	81 f5       	brne	.+96     	; 0xc78 <State+0x80>
	{
		case SYSTEM_STATE_STARTUP:
			
			
			if (initSystem() ==  1)
 c18:	c6 df       	rcall	.-116    	; 0xba6 <initSystem>
 c1a:	81 30       	cpi	r24, 0x01	; 1
 c1c:	69 f5       	brne	.+90     	; 0xc78 <State+0x80>
			{
				systemState = SYSTEM_ZERO;
 c1e:	80 93 65 20 	sts	0x2065, r24
 c22:	08 95       	ret
 c24:	2f ef       	ldi	r18, 0xFF	; 255
 c26:	83 ec       	ldi	r24, 0xC3	; 195
 c28:	99 e0       	ldi	r25, 0x09	; 9
 c2a:	21 50       	subi	r18, 0x01	; 1
 c2c:	80 40       	sbci	r24, 0x00	; 0
 c2e:	90 40       	sbci	r25, 0x00	; 0
 c30:	e1 f7       	brne	.-8      	; 0xc2a <State+0x32>
 c32:	00 c0       	rjmp	.+0      	; 0xc34 <State+0x3c>
 c34:	00 00       	nop

			//LEDPORT.OUTTGL = PIN1_bm;
			// read commands from the PC and zero the system as necessary
			// PC transaction, read in command and send out sensor data
			_delay_ms(100);
			UpdateEulerAngles();
 c36:	48 de       	rcall	.-880    	; 0x8c8 <UpdateEulerAngles>
			
			LEDPORT.OUTSET = PIN1_bm;
 c38:	82 e0       	ldi	r24, 0x02	; 2
 c3a:	e0 e0       	ldi	r30, 0x00	; 0
 c3c:	f6 e0       	ldi	r31, 0x06	; 6
 c3e:	85 83       	std	Z+5, r24	; 0x05
			//  get the last command sent form the PC, either zero the IMU or get ready to arm the system
			if ((cmdBytes = WriteToPC_SPI()) == SYSTEM_ZERO)
 c40:	57 dc       	rcall	.-1874   	; 0x4f0 <WriteToPC_SPI>
 c42:	80 93 6f 20 	sts	0x206F, r24
 c46:	90 93 70 20 	sts	0x2070, r25
 c4a:	01 97       	sbiw	r24, 0x01	; 1
 c4c:	09 f4       	brne	.+2      	; 0xc50 <State+0x58>
			{
				
	
				zeroSensor();
 c4e:	2c df       	rcall	.-424    	; 0xaa8 <zeroSensor>
				//LEDPORT.OUTCLR = PIN1_bm;
			}

			if (cmdBytes == SYSTEM_ARM)
 c50:	80 91 6f 20 	lds	r24, 0x206F
 c54:	90 91 70 20 	lds	r25, 0x2070
 c58:	02 97       	sbiw	r24, 0x02	; 2
 c5a:	71 f4       	brne	.+28     	; 0xc78 <State+0x80>
			{
				systemState = SYSTEM_ARM;
 c5c:	82 e0       	ldi	r24, 0x02	; 2
 c5e:	80 93 65 20 	sts	0x2065, r24
 c62:	08 95       	ret
			}

		break;

		case SYSTEM_ARM:
			initPWM();
 c64:	54 db       	rcall	.-2392   	; 0x30e <initPWM>
			systemState = SYSTEM_STATE_FLY;
 c66:	84 e0       	ldi	r24, 0x04	; 4
 c68:	80 93 65 20 	sts	0x2065, r24
			

		break;
 c6c:	08 95       	ret

		case SYSTEM_STATE_FLY:
			// run the control loop
			LEDPORT.OUTTGL = PIN1_bm;
 c6e:	82 e0       	ldi	r24, 0x02	; 2
 c70:	e0 e0       	ldi	r30, 0x00	; 0
 c72:	f6 e0       	ldi	r31, 0x06	; 6
 c74:	87 83       	std	Z+7, r24	; 0x07
		
			ControlLoop();
 c76:	c3 ce       	rjmp	.-634    	; 0x9fe <ControlLoop>
 c78:	08 95       	ret

00000c7a <__vector_77>:
  INPUT:
  OUTPUT:
  DISCRIPTION:   Interrupt vector
*********************************************************************************************************** */
ISR(TCD0_OVF_vect)
{
 c7a:	1f 92       	push	r1
 c7c:	0f 92       	push	r0
 c7e:	0f b6       	in	r0, 0x3f	; 63
 c80:	0f 92       	push	r0
 c82:	11 24       	eor	r1, r1
 c84:	08 b6       	in	r0, 0x38	; 56
 c86:	0f 92       	push	r0
 c88:	18 be       	out	0x38, r1	; 56
 c8a:	09 b6       	in	r0, 0x39	; 57
 c8c:	0f 92       	push	r0
 c8e:	19 be       	out	0x39, r1	; 57
 c90:	0b b6       	in	r0, 0x3b	; 59
 c92:	0f 92       	push	r0
 c94:	1b be       	out	0x3b, r1	; 59
 c96:	2f 93       	push	r18
 c98:	3f 93       	push	r19
 c9a:	4f 93       	push	r20
 c9c:	5f 93       	push	r21
 c9e:	6f 93       	push	r22
 ca0:	7f 93       	push	r23
 ca2:	8f 93       	push	r24
 ca4:	9f 93       	push	r25
 ca6:	af 93       	push	r26
 ca8:	bf 93       	push	r27
 caa:	ef 93       	push	r30
 cac:	ff 93       	push	r31
	//LEDPORT.OUTTGL = PIN0_bm;
	TCD0.CNT = 0;
 cae:	e0 e0       	ldi	r30, 0x00	; 0
 cb0:	f9 e0       	ldi	r31, 0x09	; 9
 cb2:	10 a2       	std	Z+32, r1	; 0x20
 cb4:	11 a2       	std	Z+33, r1	; 0x21
	State();
 cb6:	a0 df       	rcall	.-192    	; 0xbf8 <State>

}
 cb8:	ff 91       	pop	r31
 cba:	ef 91       	pop	r30
 cbc:	bf 91       	pop	r27
 cbe:	af 91       	pop	r26
 cc0:	9f 91       	pop	r25
 cc2:	8f 91       	pop	r24
 cc4:	7f 91       	pop	r23
 cc6:	6f 91       	pop	r22
 cc8:	5f 91       	pop	r21
 cca:	4f 91       	pop	r20
 ccc:	3f 91       	pop	r19
 cce:	2f 91       	pop	r18
 cd0:	0f 90       	pop	r0
 cd2:	0b be       	out	0x3b, r0	; 59
 cd4:	0f 90       	pop	r0
 cd6:	09 be       	out	0x39, r0	; 57
 cd8:	0f 90       	pop	r0
 cda:	08 be       	out	0x38, r0	; 56
 cdc:	0f 90       	pop	r0
 cde:	0f be       	out	0x3f, r0	; 63
 ce0:	0f 90       	pop	r0
 ce2:	1f 90       	pop	r1
 ce4:	18 95       	reti

00000ce6 <spiPC_write_read>:
	SPIC.DATA = spi_data;
	while(!(SPIC.STATUS & SPI_IF_bm)); // Wait until the data transfer is complete
	_delay_us(6);
	return SPIC.DATA;

}
 ce6:	e0 ec       	ldi	r30, 0xC0	; 192
 ce8:	fa e0       	ldi	r31, 0x0A	; 10
 cea:	83 83       	std	Z+3, r24	; 0x03
 cec:	82 81       	ldd	r24, Z+2	; 0x02
 cee:	88 23       	and	r24, r24
 cf0:	ec f7       	brge	.-6      	; 0xcec <spiPC_write_read+0x6>
 cf2:	8a e2       	ldi	r24, 0x2A	; 42
 cf4:	8a 95       	dec	r24
 cf6:	f1 f7       	brne	.-4      	; 0xcf4 <spiPC_write_read+0xe>
 cf8:	00 c0       	rjmp	.+0      	; 0xcfa <spiPC_write_read+0x14>
 cfa:	e0 ec       	ldi	r30, 0xC0	; 192
 cfc:	fa e0       	ldi	r31, 0x0A	; 10
 cfe:	83 81       	ldd	r24, Z+3	; 0x03
 d00:	08 95       	ret

00000d02 <spiIMU_write_read>:
 d02:	e0 ec       	ldi	r30, 0xC0	; 192
 d04:	fb e0       	ldi	r31, 0x0B	; 11
 d06:	83 83       	std	Z+3, r24	; 0x03
 d08:	82 81       	ldd	r24, Z+2	; 0x02
 d0a:	88 23       	and	r24, r24
 d0c:	ec f7       	brge	.-6      	; 0xd08 <spiIMU_write_read+0x6>
 d0e:	80 e2       	ldi	r24, 0x20	; 32
 d10:	8a 95       	dec	r24
 d12:	f1 f7       	brne	.-4      	; 0xd10 <spiIMU_write_read+0xe>
 d14:	e0 ec       	ldi	r30, 0xC0	; 192
 d16:	fb e0       	ldi	r31, 0x0B	; 11
 d18:	83 81       	ldd	r24, Z+3	; 0x03
 d1a:	08 95       	ret

00000d1c <spi_set_up>:
DISCRIPTION:    Initialize SPI master on port F for the IMU communication.
			    Initialize SPI master on port F for the PC communication
*********************************************************************************************************** */
	
void spi_set_up()
{
 d1c:	af 92       	push	r10
 d1e:	cf 92       	push	r12
 d20:	ef 92       	push	r14
 d22:	0f 93       	push	r16
 d24:	cf 93       	push	r28
 d26:	df 93       	push	r29
	///* Initialize SPI master on port F for the IMU communication. */
	///* Init SS pin as output with wired AND and pull-up. */
	////*************************************************************
	PORTF.DIRSET = PIN4_bm;
 d28:	e0 ea       	ldi	r30, 0xA0	; 160
 d2a:	f6 e0       	ldi	r31, 0x06	; 6
 d2c:	c0 e1       	ldi	r28, 0x10	; 16
 d2e:	c1 83       	std	Z+1, r28	; 0x01
	PORTF.PIN4CTRL = PORT_OPC_WIREDANDPULL_gc;
 d30:	d8 e3       	ldi	r29, 0x38	; 56
 d32:	d4 8b       	std	Z+20, r29	; 0x14

	/* Set SS output to high. (No slave addressed). */
	PORTF.OUTSET = PIN4_bm;
 d34:	c5 83       	std	Z+5, r28	; 0x05

	/* Initialize SPI master on port F for the IMU communication. */
	SPI_MasterInit(&spiMasterF,
 d36:	0f 2e       	mov	r0, r31
 d38:	f3 e0       	ldi	r31, 0x03	; 3
 d3a:	af 2e       	mov	r10, r31
 d3c:	f0 2d       	mov	r31, r0
 d3e:	c1 2c       	mov	r12, r1
 d40:	e1 2c       	mov	r14, r1
 d42:	00 e0       	ldi	r16, 0x00	; 0
 d44:	20 e0       	ldi	r18, 0x00	; 0
 d46:	40 ea       	ldi	r20, 0xA0	; 160
 d48:	56 e0       	ldi	r21, 0x06	; 6
 d4a:	60 ec       	ldi	r22, 0xC0	; 192
 d4c:	7b e0       	ldi	r23, 0x0B	; 11
 d4e:	8f e7       	ldi	r24, 0x7F	; 127
 d50:	91 e2       	ldi	r25, 0x21	; 33
 d52:	31 d0       	rcall	.+98     	; 0xdb6 <SPI_MasterInit>
		SPI_MODE_0_gc,							//The UM6 SPI clock (SCK) is active high, with data clocked in on the first rising edge1
		SPI_INTLVL_OFF_gc,
		false,									// false to double clock mode
		SPI_PRESCALER_DIV128_gc);					//32MHz /128 = 250kHz  MAX rate is 400kHz but there is not prescaler

		SPIF.DATA = 0x00;						// init SPI data register
 d54:	e0 ec       	ldi	r30, 0xC0	; 192
 d56:	fb e0       	ldi	r31, 0x0B	; 11
 d58:	13 82       	std	Z+3, r1	; 0x03
		
		
			///* Initialize SPI master on port F for the IMU communication. */
	///* Init SS pin as output with wired AND and pull-up. */
	////*************************************************************
	PORTC.DIRSET = PIN4_bm;
 d5a:	e0 e4       	ldi	r30, 0x40	; 64
 d5c:	f6 e0       	ldi	r31, 0x06	; 6
 d5e:	c1 83       	std	Z+1, r28	; 0x01
	PORTC.PIN4CTRL = PORT_OPC_WIREDANDPULL_gc;
 d60:	d4 8b       	std	Z+20, r29	; 0x14

	/* Set SS output to high. (No slave addressed). */
	PORTC.OUTSET = PIN4_bm;
 d62:	c5 83       	std	Z+5, r28	; 0x05

	/* Initialize SPI master on port F for the IMU communication. */
	SPI_MasterInit(&spiMasterC,
 d64:	68 94       	set
 d66:	aa 24       	eor	r10, r10
 d68:	a1 f8       	bld	r10, 1
 d6a:	20 e0       	ldi	r18, 0x00	; 0
 d6c:	40 e4       	ldi	r20, 0x40	; 64
 d6e:	56 e0       	ldi	r21, 0x06	; 6
 d70:	60 ec       	ldi	r22, 0xC0	; 192
 d72:	78 e0       	ldi	r23, 0x08	; 8
 d74:	86 e8       	ldi	r24, 0x86	; 134
 d76:	91 e2       	ldi	r25, 0x21	; 33
 d78:	1e d0       	rcall	.+60     	; 0xdb6 <SPI_MasterInit>
		SPI_MODE_0_gc,							//The UM6 SPI clock (SCK) is active high, with data clocked in on the first rising edge1
		SPI_INTLVL_OFF_gc,
		false,									// false to double clock mode
		SPI_PRESCALER_DIV64_gc);				//32MHz /128 = 250kHz  MAX rate is 400kHz but there is not prescaler

		SPIC.DATA = 0x00;						// init SPI data register
 d7a:	e0 ec       	ldi	r30, 0xC0	; 192
 d7c:	f8 e0       	ldi	r31, 0x08	; 8
 d7e:	13 82       	std	Z+3, r1	; 0x03
	
		
		/* Initialize SPI master on port F for the PC communication */
		//*************************************************************
		/* Init SS pin as output with wired AND and pull-up. */
		PORTE.DIRSET = PIN4_bm;
 d80:	e0 e8       	ldi	r30, 0x80	; 128
 d82:	f6 e0       	ldi	r31, 0x06	; 6
 d84:	c1 83       	std	Z+1, r28	; 0x01
		PORTE.PIN4CTRL = PORT_OPC_WIREDANDPULL_gc;
 d86:	d4 8b       	std	Z+20, r29	; 0x14

		/* Set SS output to high. (No slave addressed). */
		PORTE.OUTSET = PIN4_bm;
 d88:	c5 83       	std	Z+5, r28	; 0x05

		SPI_MasterInit(&spiMasterE,
 d8a:	0f 2e       	mov	r0, r31
 d8c:	f3 e0       	ldi	r31, 0x03	; 3
 d8e:	af 2e       	mov	r10, r31
 d90:	f0 2d       	mov	r31, r0
 d92:	20 e0       	ldi	r18, 0x00	; 0
 d94:	40 e8       	ldi	r20, 0x80	; 128
 d96:	56 e0       	ldi	r21, 0x06	; 6
 d98:	60 ec       	ldi	r22, 0xC0	; 192
 d9a:	7a e0       	ldi	r23, 0x0A	; 10
 d9c:	8d e8       	ldi	r24, 0x8D	; 141
 d9e:	91 e2       	ldi	r25, 0x21	; 33
 da0:	0a d0       	rcall	.+20     	; 0xdb6 <SPI_MasterInit>
		false,
		SPI_MODE_0_gc,							//The UM6 SPI clock (SCK) is active high, with data clocked in on the first rising edge1
		SPI_INTLVL_OFF_gc,
		false,									// false to double clock mode
		SPI_PRESCALER_DIV128_gc);				//32MHz /64 = 500,000 bps
		SPIE.DATA = 0x00;						// init SPI data register
 da2:	e0 ec       	ldi	r30, 0xC0	; 192
 da4:	fa e0       	ldi	r31, 0x0A	; 10
 da6:	13 82       	std	Z+3, r1	; 0x03

}
 da8:	df 91       	pop	r29
 daa:	cf 91       	pop	r28
 dac:	0f 91       	pop	r16
 dae:	ef 90       	pop	r14
 db0:	cf 90       	pop	r12
 db2:	af 90       	pop	r10
 db4:	08 95       	ret

00000db6 <SPI_MasterInit>:
                    bool lsbFirst,
                    SPI_MODE_t mode,
                    SPI_INTLVL_t intLevel,
                    bool clk2x,
                    SPI_PRESCALER_t clockDivision)
{
 db6:	af 92       	push	r10
 db8:	cf 92       	push	r12
 dba:	ef 92       	push	r14
 dbc:	0f 93       	push	r16
 dbe:	fc 01       	movw	r30, r24
	spi->module         = module;
 dc0:	60 83       	st	Z, r22
 dc2:	71 83       	std	Z+1, r23	; 0x01
	spi->port           = port;
 dc4:	42 83       	std	Z+2, r20	; 0x02
 dc6:	53 83       	std	Z+3, r21	; 0x03
	spi->interrupted    = false;
 dc8:	14 82       	std	Z+4, r1	; 0x04

	spi->module->CTRL   = clockDivision |                  /* SPI prescaler. */
 dca:	cc 20       	and	r12, r12
 dcc:	11 f0       	breq	.+4      	; 0xdd2 <SPI_MasterInit+0x1c>
 dce:	90 e8       	ldi	r25, 0x80	; 128
 dd0:	01 c0       	rjmp	.+2      	; 0xdd4 <SPI_MasterInit+0x1e>
 dd2:	90 e0       	ldi	r25, 0x00	; 0
 dd4:	22 23       	and	r18, r18
 dd6:	11 f0       	breq	.+4      	; 0xddc <SPI_MasterInit+0x26>
 dd8:	80 e2       	ldi	r24, 0x20	; 32
 dda:	01 c0       	rjmp	.+2      	; 0xdde <SPI_MasterInit+0x28>
 ddc:	80 e0       	ldi	r24, 0x00	; 0
 dde:	00 65       	ori	r16, 0x50	; 80
 de0:	0a 29       	or	r16, r10
 de2:	09 2b       	or	r16, r25
 de4:	08 2b       	or	r16, r24
 de6:	db 01       	movw	r26, r22
 de8:	0c 93       	st	X, r16
	                      (lsbFirst ? SPI_DORD_bm  : 0) |  /* Data order. */
	                      SPI_MASTER_bm |                  /* SPI master. */
	                      mode;                            /* SPI mode. */

	/* Interrupt level. */
	spi->module->INTCTRL = intLevel;
 dea:	a0 81       	ld	r26, Z
 dec:	b1 81       	ldd	r27, Z+1	; 0x01
 dee:	11 96       	adiw	r26, 0x01	; 1
 df0:	ec 92       	st	X, r14

	/* No assigned data packet. */
	spi->dataPacket = NULL;
 df2:	15 82       	std	Z+5, r1	; 0x05
 df4:	16 82       	std	Z+6, r1	; 0x06

 	/* MOSI and SCK as output. */
	spi->port->DIRSET  = SPI_MOSI_bm | SPI_SCK_bm;
 df6:	02 80       	ldd	r0, Z+2	; 0x02
 df8:	f3 81       	ldd	r31, Z+3	; 0x03
 dfa:	e0 2d       	mov	r30, r0
 dfc:	80 ea       	ldi	r24, 0xA0	; 160
 dfe:	81 83       	std	Z+1, r24	; 0x01
}
 e00:	0f 91       	pop	r16
 e02:	ef 90       	pop	r14
 e04:	cf 90       	pop	r12
 e06:	af 90       	pop	r10
 e08:	08 95       	ret

00000e0a <TC0_ConfigClockSource>:
 *  \param tc              Timer/Counter module instance.
 *  \param clockSelection  Timer/Counter clock source setting.
 */
void TC0_ConfigClockSource( volatile TC0_t * tc, TC_CLKSEL_t clockSelection )
{
	tc->CTRLA = ( tc->CTRLA & ~TC0_CLKSEL_gm ) | clockSelection;
 e0a:	fc 01       	movw	r30, r24
 e0c:	20 81       	ld	r18, Z
 e0e:	20 7f       	andi	r18, 0xF0	; 240
 e10:	62 2b       	or	r22, r18
 e12:	60 83       	st	Z, r22
 e14:	08 95       	ret

00000e16 <initUART>:
void initUART()
{
	
	//  XBEE on USARTD1
	/* PD6 (RXD1) input*/
	PORTD.DIRCLR = PIN6_bm;
 e16:	e0 e6       	ldi	r30, 0x60	; 96
 e18:	f6 e0       	ldi	r31, 0x06	; 6
 e1a:	90 e4       	ldi	r25, 0x40	; 64
 e1c:	92 83       	std	Z+2, r25	; 0x02
	/* PD7 (TXD1) as output. */
	PORTD.DIRSET = PIN7_bm;
 e1e:	80 e8       	ldi	r24, 0x80	; 128
 e20:	81 83       	std	Z+1, r24	; 0x01
	
	
	//  IMU on USARTC1
	/* PC6 (RXD1) input*/
	PORTC.DIRCLR = PIN6_bm;
 e22:	e0 e4       	ldi	r30, 0x40	; 64
 e24:	f6 e0       	ldi	r31, 0x06	; 6
 e26:	92 83       	std	Z+2, r25	; 0x02
	/* PD7 (TXD1) as output. */
	PORTC.DIRSET = PIN7_bm;
 e28:	81 83       	std	Z+1, r24	; 0x01
	
	USART_Format_Set(&XBEE_USART, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, true);
 e2a:	e0 eb       	ldi	r30, 0xB0	; 176
 e2c:	f9 e0       	ldi	r31, 0x09	; 9
 e2e:	8b e0       	ldi	r24, 0x0B	; 11
 e30:	85 83       	std	Z+5, r24	; 0x05
	USART_Baudrate_Set(&XBEE_USART, 1047 , -6);			// set for 32MHZ and 115200
 e32:	87 e1       	ldi	r24, 0x17	; 23
 e34:	86 83       	std	Z+6, r24	; 0x06
 e36:	84 ea       	ldi	r24, 0xA4	; 164
 e38:	87 83       	std	Z+7, r24	; 0x07
	
	/* Enable both RX and TX. */
	USART_Rx_Enable(&XBEE_USART);
 e3a:	84 81       	ldd	r24, Z+4	; 0x04
 e3c:	80 61       	ori	r24, 0x10	; 16
 e3e:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(&XBEE_USART);
 e40:	84 81       	ldd	r24, Z+4	; 0x04
 e42:	88 60       	ori	r24, 0x08	; 8
 e44:	84 83       	std	Z+4, r24	; 0x04
 e46:	08 95       	ret

00000e48 <put_USART_PC_char>:
void put_USART_PC_char(uint8_t sendThis)
{

	do{

	}while(!USART_IsTXDataRegisterEmpty(&XBEE_USART));
 e48:	e0 eb       	ldi	r30, 0xB0	; 176
 e4a:	f9 e0       	ldi	r31, 0x09	; 9
 e4c:	91 81       	ldd	r25, Z+1	; 0x01
 e4e:	95 ff       	sbrs	r25, 5
 e50:	fd cf       	rjmp	.-6      	; 0xe4c <put_USART_PC_char+0x4>
	USART_PutChar(&XBEE_USART, sendThis);
 e52:	80 93 b0 09 	sts	0x09B0, r24
 e56:	08 95       	ret

00000e58 <sendData_int16_t>:
}


//send 16 bit data on USART, 2 bytes
void sendData_int16_t(int16_t sendthis)
{
 e58:	cf 93       	push	r28
 e5a:	df 93       	push	r29
 e5c:	ec 01       	movw	r28, r24
	put_USART_PC_char( MASK_TOP_BYTE & (sendthis >> 8));
 e5e:	8d 2f       	mov	r24, r29
 e60:	90 e0       	ldi	r25, 0x00	; 0
 e62:	f2 df       	rcall	.-28     	; 0xe48 <put_USART_PC_char>
	put_USART_PC_char (MASK_TOP_BYTE & sendthis);
 e64:	ce 01       	movw	r24, r28
 e66:	99 27       	eor	r25, r25
 e68:	ef df       	rcall	.-34     	; 0xe48 <put_USART_PC_char>
}
 e6a:	df 91       	pop	r29
 e6c:	cf 91       	pop	r28
 e6e:	08 95       	ret

00000e70 <__divmodhi4>:
 e70:	97 fb       	bst	r25, 7
 e72:	07 2e       	mov	r0, r23
 e74:	16 f4       	brtc	.+4      	; 0xe7a <__divmodhi4+0xa>
 e76:	00 94       	com	r0
 e78:	06 d0       	rcall	.+12     	; 0xe86 <__divmodhi4_neg1>
 e7a:	77 fd       	sbrc	r23, 7
 e7c:	08 d0       	rcall	.+16     	; 0xe8e <__divmodhi4_neg2>
 e7e:	0b d0       	rcall	.+22     	; 0xe96 <__udivmodhi4>
 e80:	07 fc       	sbrc	r0, 7
 e82:	05 d0       	rcall	.+10     	; 0xe8e <__divmodhi4_neg2>
 e84:	3e f4       	brtc	.+14     	; 0xe94 <__divmodhi4_exit>

00000e86 <__divmodhi4_neg1>:
 e86:	90 95       	com	r25
 e88:	81 95       	neg	r24
 e8a:	9f 4f       	sbci	r25, 0xFF	; 255
 e8c:	08 95       	ret

00000e8e <__divmodhi4_neg2>:
 e8e:	70 95       	com	r23
 e90:	61 95       	neg	r22
 e92:	7f 4f       	sbci	r23, 0xFF	; 255

00000e94 <__divmodhi4_exit>:
 e94:	08 95       	ret

00000e96 <__udivmodhi4>:
 e96:	aa 1b       	sub	r26, r26
 e98:	bb 1b       	sub	r27, r27
 e9a:	51 e1       	ldi	r21, 0x11	; 17
 e9c:	07 c0       	rjmp	.+14     	; 0xeac <__udivmodhi4_ep>

00000e9e <__udivmodhi4_loop>:
 e9e:	aa 1f       	adc	r26, r26
 ea0:	bb 1f       	adc	r27, r27
 ea2:	a6 17       	cp	r26, r22
 ea4:	b7 07       	cpc	r27, r23
 ea6:	10 f0       	brcs	.+4      	; 0xeac <__udivmodhi4_ep>
 ea8:	a6 1b       	sub	r26, r22
 eaa:	b7 0b       	sbc	r27, r23

00000eac <__udivmodhi4_ep>:
 eac:	88 1f       	adc	r24, r24
 eae:	99 1f       	adc	r25, r25
 eb0:	5a 95       	dec	r21
 eb2:	a9 f7       	brne	.-22     	; 0xe9e <__udivmodhi4_loop>
 eb4:	80 95       	com	r24
 eb6:	90 95       	com	r25
 eb8:	bc 01       	movw	r22, r24
 eba:	cd 01       	movw	r24, r26
 ebc:	08 95       	ret

00000ebe <_exit>:
 ebe:	f8 94       	cli

00000ec0 <__stop_program>:
 ec0:	ff cf       	rjmp	.-2      	; 0xec0 <__stop_program>
