
PSU_quadcopter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e38  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00802000  00000e38  00000ecc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000018a  00802008  00802008  00000ed4  2**0
                  ALLOC
  3 .stab         00003c24  00000000  00000000  00000ed4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001067  00000000  00000000  00004af8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00005b5f  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000380  00000000  00000000  00005b8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005334  00000000  00000000  00005f0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001042  00000000  00000000  0000b242  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002091  00000000  00000000  0000c284  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000904  00000000  00000000  0000e318  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001c39  00000000  00000000  0000ec1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001be9  00000000  00000000  00010855  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000002e0  00000000  00000000  0001243e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	f9 c0       	rjmp	.+498    	; 0x1f4 <__ctors_end>
   2:	00 00       	nop
   4:	1b c1       	rjmp	.+566    	; 0x23c <__bad_interrupt>
   6:	00 00       	nop
   8:	19 c1       	rjmp	.+562    	; 0x23c <__bad_interrupt>
   a:	00 00       	nop
   c:	17 c1       	rjmp	.+558    	; 0x23c <__bad_interrupt>
   e:	00 00       	nop
  10:	15 c1       	rjmp	.+554    	; 0x23c <__bad_interrupt>
  12:	00 00       	nop
  14:	13 c1       	rjmp	.+550    	; 0x23c <__bad_interrupt>
  16:	00 00       	nop
  18:	11 c1       	rjmp	.+546    	; 0x23c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	0f c1       	rjmp	.+542    	; 0x23c <__bad_interrupt>
  1e:	00 00       	nop
  20:	0d c1       	rjmp	.+538    	; 0x23c <__bad_interrupt>
  22:	00 00       	nop
  24:	0b c1       	rjmp	.+534    	; 0x23c <__bad_interrupt>
  26:	00 00       	nop
  28:	09 c1       	rjmp	.+530    	; 0x23c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	07 c1       	rjmp	.+526    	; 0x23c <__bad_interrupt>
  2e:	00 00       	nop
  30:	05 c1       	rjmp	.+522    	; 0x23c <__bad_interrupt>
  32:	00 00       	nop
  34:	03 c1       	rjmp	.+518    	; 0x23c <__bad_interrupt>
  36:	00 00       	nop
  38:	01 c1       	rjmp	.+514    	; 0x23c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	ff c0       	rjmp	.+510    	; 0x23c <__bad_interrupt>
  3e:	00 00       	nop
  40:	fd c0       	rjmp	.+506    	; 0x23c <__bad_interrupt>
  42:	00 00       	nop
  44:	fb c0       	rjmp	.+502    	; 0x23c <__bad_interrupt>
  46:	00 00       	nop
  48:	f9 c0       	rjmp	.+498    	; 0x23c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	f7 c0       	rjmp	.+494    	; 0x23c <__bad_interrupt>
  4e:	00 00       	nop
  50:	f5 c0       	rjmp	.+490    	; 0x23c <__bad_interrupt>
  52:	00 00       	nop
  54:	f3 c0       	rjmp	.+486    	; 0x23c <__bad_interrupt>
  56:	00 00       	nop
  58:	f1 c0       	rjmp	.+482    	; 0x23c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	ef c0       	rjmp	.+478    	; 0x23c <__bad_interrupt>
  5e:	00 00       	nop
  60:	ed c0       	rjmp	.+474    	; 0x23c <__bad_interrupt>
  62:	00 00       	nop
  64:	eb c0       	rjmp	.+470    	; 0x23c <__bad_interrupt>
  66:	00 00       	nop
  68:	e9 c0       	rjmp	.+466    	; 0x23c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	e7 c0       	rjmp	.+462    	; 0x23c <__bad_interrupt>
  6e:	00 00       	nop
  70:	e5 c0       	rjmp	.+458    	; 0x23c <__bad_interrupt>
  72:	00 00       	nop
  74:	e3 c0       	rjmp	.+454    	; 0x23c <__bad_interrupt>
  76:	00 00       	nop
  78:	e1 c0       	rjmp	.+450    	; 0x23c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	df c0       	rjmp	.+446    	; 0x23c <__bad_interrupt>
  7e:	00 00       	nop
  80:	dd c0       	rjmp	.+442    	; 0x23c <__bad_interrupt>
  82:	00 00       	nop
  84:	db c0       	rjmp	.+438    	; 0x23c <__bad_interrupt>
  86:	00 00       	nop
  88:	d9 c0       	rjmp	.+434    	; 0x23c <__bad_interrupt>
  8a:	00 00       	nop
  8c:	d7 c0       	rjmp	.+430    	; 0x23c <__bad_interrupt>
  8e:	00 00       	nop
  90:	d5 c0       	rjmp	.+426    	; 0x23c <__bad_interrupt>
  92:	00 00       	nop
  94:	d3 c0       	rjmp	.+422    	; 0x23c <__bad_interrupt>
  96:	00 00       	nop
  98:	d1 c0       	rjmp	.+418    	; 0x23c <__bad_interrupt>
  9a:	00 00       	nop
  9c:	cf c0       	rjmp	.+414    	; 0x23c <__bad_interrupt>
  9e:	00 00       	nop
  a0:	cd c0       	rjmp	.+410    	; 0x23c <__bad_interrupt>
  a2:	00 00       	nop
  a4:	cb c0       	rjmp	.+406    	; 0x23c <__bad_interrupt>
  a6:	00 00       	nop
  a8:	c9 c0       	rjmp	.+402    	; 0x23c <__bad_interrupt>
  aa:	00 00       	nop
  ac:	c7 c0       	rjmp	.+398    	; 0x23c <__bad_interrupt>
  ae:	00 00       	nop
  b0:	c5 c0       	rjmp	.+394    	; 0x23c <__bad_interrupt>
  b2:	00 00       	nop
  b4:	c3 c0       	rjmp	.+390    	; 0x23c <__bad_interrupt>
  b6:	00 00       	nop
  b8:	c1 c0       	rjmp	.+386    	; 0x23c <__bad_interrupt>
  ba:	00 00       	nop
  bc:	bf c0       	rjmp	.+382    	; 0x23c <__bad_interrupt>
  be:	00 00       	nop
  c0:	bd c0       	rjmp	.+378    	; 0x23c <__bad_interrupt>
  c2:	00 00       	nop
  c4:	bb c0       	rjmp	.+374    	; 0x23c <__bad_interrupt>
  c6:	00 00       	nop
  c8:	b9 c0       	rjmp	.+370    	; 0x23c <__bad_interrupt>
  ca:	00 00       	nop
  cc:	b7 c0       	rjmp	.+366    	; 0x23c <__bad_interrupt>
  ce:	00 00       	nop
  d0:	b5 c0       	rjmp	.+362    	; 0x23c <__bad_interrupt>
  d2:	00 00       	nop
  d4:	b3 c0       	rjmp	.+358    	; 0x23c <__bad_interrupt>
  d6:	00 00       	nop
  d8:	b1 c0       	rjmp	.+354    	; 0x23c <__bad_interrupt>
  da:	00 00       	nop
  dc:	af c0       	rjmp	.+350    	; 0x23c <__bad_interrupt>
  de:	00 00       	nop
  e0:	ad c0       	rjmp	.+346    	; 0x23c <__bad_interrupt>
  e2:	00 00       	nop
  e4:	ab c0       	rjmp	.+342    	; 0x23c <__bad_interrupt>
  e6:	00 00       	nop
  e8:	a9 c0       	rjmp	.+338    	; 0x23c <__bad_interrupt>
  ea:	00 00       	nop
  ec:	a7 c0       	rjmp	.+334    	; 0x23c <__bad_interrupt>
  ee:	00 00       	nop
  f0:	a5 c0       	rjmp	.+330    	; 0x23c <__bad_interrupt>
  f2:	00 00       	nop
  f4:	a3 c0       	rjmp	.+326    	; 0x23c <__bad_interrupt>
  f6:	00 00       	nop
  f8:	a1 c0       	rjmp	.+322    	; 0x23c <__bad_interrupt>
  fa:	00 00       	nop
  fc:	9f c0       	rjmp	.+318    	; 0x23c <__bad_interrupt>
  fe:	00 00       	nop
 100:	9d c0       	rjmp	.+314    	; 0x23c <__bad_interrupt>
 102:	00 00       	nop
 104:	9b c0       	rjmp	.+310    	; 0x23c <__bad_interrupt>
 106:	00 00       	nop
 108:	99 c0       	rjmp	.+306    	; 0x23c <__bad_interrupt>
 10a:	00 00       	nop
 10c:	97 c0       	rjmp	.+302    	; 0x23c <__bad_interrupt>
 10e:	00 00       	nop
 110:	95 c0       	rjmp	.+298    	; 0x23c <__bad_interrupt>
 112:	00 00       	nop
 114:	93 c0       	rjmp	.+294    	; 0x23c <__bad_interrupt>
 116:	00 00       	nop
 118:	91 c0       	rjmp	.+290    	; 0x23c <__bad_interrupt>
 11a:	00 00       	nop
 11c:	8f c0       	rjmp	.+286    	; 0x23c <__bad_interrupt>
 11e:	00 00       	nop
 120:	8d c0       	rjmp	.+282    	; 0x23c <__bad_interrupt>
 122:	00 00       	nop
 124:	8b c0       	rjmp	.+278    	; 0x23c <__bad_interrupt>
 126:	00 00       	nop
 128:	89 c0       	rjmp	.+274    	; 0x23c <__bad_interrupt>
 12a:	00 00       	nop
 12c:	87 c0       	rjmp	.+270    	; 0x23c <__bad_interrupt>
 12e:	00 00       	nop
 130:	85 c0       	rjmp	.+266    	; 0x23c <__bad_interrupt>
 132:	00 00       	nop
 134:	5d c5       	rjmp	.+2746   	; 0xbf0 <__vector_77>
 136:	00 00       	nop
 138:	81 c0       	rjmp	.+258    	; 0x23c <__bad_interrupt>
 13a:	00 00       	nop
 13c:	7f c0       	rjmp	.+254    	; 0x23c <__bad_interrupt>
 13e:	00 00       	nop
 140:	7d c0       	rjmp	.+250    	; 0x23c <__bad_interrupt>
 142:	00 00       	nop
 144:	7b c0       	rjmp	.+246    	; 0x23c <__bad_interrupt>
 146:	00 00       	nop
 148:	79 c0       	rjmp	.+242    	; 0x23c <__bad_interrupt>
 14a:	00 00       	nop
 14c:	77 c0       	rjmp	.+238    	; 0x23c <__bad_interrupt>
 14e:	00 00       	nop
 150:	75 c0       	rjmp	.+234    	; 0x23c <__bad_interrupt>
 152:	00 00       	nop
 154:	73 c0       	rjmp	.+230    	; 0x23c <__bad_interrupt>
 156:	00 00       	nop
 158:	71 c0       	rjmp	.+226    	; 0x23c <__bad_interrupt>
 15a:	00 00       	nop
 15c:	6f c0       	rjmp	.+222    	; 0x23c <__bad_interrupt>
 15e:	00 00       	nop
 160:	6d c0       	rjmp	.+218    	; 0x23c <__bad_interrupt>
 162:	00 00       	nop
 164:	6b c0       	rjmp	.+214    	; 0x23c <__bad_interrupt>
 166:	00 00       	nop
 168:	69 c0       	rjmp	.+210    	; 0x23c <__bad_interrupt>
 16a:	00 00       	nop
 16c:	67 c0       	rjmp	.+206    	; 0x23c <__bad_interrupt>
 16e:	00 00       	nop
 170:	65 c0       	rjmp	.+202    	; 0x23c <__bad_interrupt>
 172:	00 00       	nop
 174:	63 c0       	rjmp	.+198    	; 0x23c <__bad_interrupt>
 176:	00 00       	nop
 178:	61 c0       	rjmp	.+194    	; 0x23c <__bad_interrupt>
 17a:	00 00       	nop
 17c:	5f c0       	rjmp	.+190    	; 0x23c <__bad_interrupt>
 17e:	00 00       	nop
 180:	5d c0       	rjmp	.+186    	; 0x23c <__bad_interrupt>
 182:	00 00       	nop
 184:	5b c0       	rjmp	.+182    	; 0x23c <__bad_interrupt>
 186:	00 00       	nop
 188:	59 c0       	rjmp	.+178    	; 0x23c <__bad_interrupt>
 18a:	00 00       	nop
 18c:	57 c0       	rjmp	.+174    	; 0x23c <__bad_interrupt>
 18e:	00 00       	nop
 190:	55 c0       	rjmp	.+170    	; 0x23c <__bad_interrupt>
 192:	00 00       	nop
 194:	53 c0       	rjmp	.+166    	; 0x23c <__bad_interrupt>
 196:	00 00       	nop
 198:	51 c0       	rjmp	.+162    	; 0x23c <__bad_interrupt>
 19a:	00 00       	nop
 19c:	4f c0       	rjmp	.+158    	; 0x23c <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	4d c0       	rjmp	.+154    	; 0x23c <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	4b c0       	rjmp	.+150    	; 0x23c <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	49 c0       	rjmp	.+146    	; 0x23c <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	47 c0       	rjmp	.+142    	; 0x23c <__bad_interrupt>
 1ae:	00 00       	nop
 1b0:	45 c0       	rjmp	.+138    	; 0x23c <__bad_interrupt>
 1b2:	00 00       	nop
 1b4:	43 c0       	rjmp	.+134    	; 0x23c <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	41 c0       	rjmp	.+130    	; 0x23c <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	3f c0       	rjmp	.+126    	; 0x23c <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	3d c0       	rjmp	.+122    	; 0x23c <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	3b c0       	rjmp	.+118    	; 0x23c <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	39 c0       	rjmp	.+114    	; 0x23c <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	37 c0       	rjmp	.+110    	; 0x23c <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	35 c0       	rjmp	.+106    	; 0x23c <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	33 c0       	rjmp	.+102    	; 0x23c <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	31 c0       	rjmp	.+98     	; 0x23c <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	2f c0       	rjmp	.+94     	; 0x23c <__bad_interrupt>
 1de:	00 00       	nop
 1e0:	2d c0       	rjmp	.+90     	; 0x23c <__bad_interrupt>
 1e2:	00 00       	nop
 1e4:	2b c0       	rjmp	.+86     	; 0x23c <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	29 c0       	rjmp	.+82     	; 0x23c <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	27 c0       	rjmp	.+78     	; 0x23c <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	25 c0       	rjmp	.+74     	; 0x23c <__bad_interrupt>
	...

000001f4 <__ctors_end>:
 1f4:	11 24       	eor	r1, r1
 1f6:	1f be       	out	0x3f, r1	; 63
 1f8:	cf ef       	ldi	r28, 0xFF	; 255
 1fa:	df e3       	ldi	r29, 0x3F	; 63
 1fc:	de bf       	out	0x3e, r29	; 62
 1fe:	cd bf       	out	0x3d, r28	; 61
 200:	00 e0       	ldi	r16, 0x00	; 0
 202:	0c bf       	out	0x3c, r16	; 60
 204:	18 be       	out	0x38, r1	; 56
 206:	19 be       	out	0x39, r1	; 57
 208:	1a be       	out	0x3a, r1	; 58
 20a:	1b be       	out	0x3b, r1	; 59

0000020c <__do_copy_data>:
 20c:	10 e2       	ldi	r17, 0x20	; 32
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	e8 e3       	ldi	r30, 0x38	; 56
 214:	fe e0       	ldi	r31, 0x0E	; 14
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	0b bf       	out	0x3b, r16	; 59
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
 21c:	07 90       	elpm	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	a8 30       	cpi	r26, 0x08	; 8
 222:	b1 07       	cpc	r27, r17
 224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>
 226:	1b be       	out	0x3b, r1	; 59

00000228 <__do_clear_bss>:
 228:	21 e2       	ldi	r18, 0x21	; 33
 22a:	a8 e0       	ldi	r26, 0x08	; 8
 22c:	b0 e2       	ldi	r27, 0x20	; 32
 22e:	01 c0       	rjmp	.+2      	; 0x232 <.do_clear_bss_start>

00000230 <.do_clear_bss_loop>:
 230:	1d 92       	st	X+, r1

00000232 <.do_clear_bss_start>:
 232:	a2 39       	cpi	r26, 0x92	; 146
 234:	b2 07       	cpc	r27, r18
 236:	e1 f7       	brne	.-8      	; 0x230 <.do_clear_bss_loop>
 238:	8e d4       	rcall	.+2332   	; 0xb56 <main>
 23a:	fc c5       	rjmp	.+3064   	; 0xe34 <_exit>

0000023c <__bad_interrupt>:
 23c:	e1 ce       	rjmp	.-574    	; 0x0 <__vectors>

0000023e <P_attitude>:
	pid_data->pid_total =pid_data->p_term_rate + pid_data->i_term_rate;
}


void P_attitude(PID_data *pid_data)
{
 23e:	fc 01       	movw	r30, r24
	// calculate error
	pid_data->pid_total = ((pid_data->attitude_command - pid_data->attitude_feedback)*pid_data->Kp)/20;
 240:	46 a1       	ldd	r20, Z+38	; 0x26
 242:	57 a1       	ldd	r21, Z+39	; 0x27
 244:	86 8d       	ldd	r24, Z+30	; 0x1e
 246:	97 8d       	ldd	r25, Z+31	; 0x1f
 248:	48 1b       	sub	r20, r24
 24a:	59 0b       	sbc	r21, r25
 24c:	26 89       	ldd	r18, Z+22	; 0x16
 24e:	37 89       	ldd	r19, Z+23	; 0x17
 250:	42 9f       	mul	r20, r18
 252:	c0 01       	movw	r24, r0
 254:	43 9f       	mul	r20, r19
 256:	90 0d       	add	r25, r0
 258:	52 9f       	mul	r21, r18
 25a:	90 0d       	add	r25, r0
 25c:	11 24       	eor	r1, r1
 25e:	64 e1       	ldi	r22, 0x14	; 20
 260:	70 e0       	ldi	r23, 0x00	; 0
 262:	c1 d5       	rcall	.+2946   	; 0xde6 <__divmodhi4>
 264:	64 8f       	std	Z+28, r22	; 0x1c
 266:	75 8f       	std	Z+29, r23	; 0x1d
 268:	08 95       	ret

0000026a <PI_attitude_rate>:
INPUT:
OUTPUT:
DISCRIPTION:  nest PI loops, with the rate loop on the inside
*********************************************************************************************************** */
void PI_attitude_rate(PID_data *pid_data)
{
 26a:	fc 01       	movw	r30, r24
	
	////  save the last error calculation so we can calculate the derivative
	pid_data->previousError0 = pid_data->previousError1;
 26c:	82 ad       	ldd	r24, Z+58	; 0x3a
 26e:	93 ad       	ldd	r25, Z+59	; 0x3b
 270:	80 af       	std	Z+56, r24	; 0x38
 272:	91 af       	std	Z+57, r25	; 0x39
	pid_data->previousError1 = pid_data->previousError2;
 274:	84 ad       	ldd	r24, Z+60	; 0x3c
 276:	95 ad       	ldd	r25, Z+61	; 0x3d
 278:	82 af       	std	Z+58, r24	; 0x3a
 27a:	93 af       	std	Z+59, r25	; 0x3b
	pid_data->previousError2 = pid_data->attitude_error;
 27c:	84 a5       	ldd	r24, Z+44	; 0x2c
 27e:	95 a5       	ldd	r25, Z+45	; 0x2d
 280:	84 af       	std	Z+60, r24	; 0x3c
 282:	95 af       	std	Z+61, r25	; 0x3d

	// calculate error
	pid_data->attitude_error = (pid_data->attitude_command - pid_data->attitude_feedback);
 284:	26 a1       	ldd	r18, Z+38	; 0x26
 286:	37 a1       	ldd	r19, Z+39	; 0x27
 288:	46 8d       	ldd	r20, Z+30	; 0x1e
 28a:	57 8d       	ldd	r21, Z+31	; 0x1f
 28c:	24 1b       	sub	r18, r20
 28e:	35 0b       	sbc	r19, r21
 290:	24 a7       	std	Z+44, r18	; 0x2c
 292:	35 a7       	std	Z+45, r19	; 0x2d
	//pid_data->i_term_attitude =(pid_data->attitude_error * pid_data->Ki)/300 + (pid_data->previousError2 * pid_data->Ki)/300 +
	//(pid_data->previousError1 * pid_data->Ki)/300 + (pid_data->previousError0 * pid_data->Ki)/300;
	

	//Tustin approximation
	pid_data->i_term_attitude += (pid_data->Ki*(pid_data->attitude_error + pid_data->previousError2))/600;          
 294:	bc 01       	movw	r22, r24
 296:	62 0f       	add	r22, r18
 298:	73 1f       	adc	r23, r19
 29a:	40 8d       	ldd	r20, Z+24	; 0x18
 29c:	51 8d       	ldd	r21, Z+25	; 0x19
 29e:	64 9f       	mul	r22, r20
 2a0:	c0 01       	movw	r24, r0
 2a2:	65 9f       	mul	r22, r21
 2a4:	90 0d       	add	r25, r0
 2a6:	74 9f       	mul	r23, r20
 2a8:	90 0d       	add	r25, r0
 2aa:	11 24       	eor	r1, r1
 2ac:	68 e5       	ldi	r22, 0x58	; 88
 2ae:	72 e0       	ldi	r23, 0x02	; 2
 2b0:	9a d5       	rcall	.+2868   	; 0xde6 <__divmodhi4>
 2b2:	84 85       	ldd	r24, Z+12	; 0x0c
 2b4:	95 85       	ldd	r25, Z+13	; 0x0d
 2b6:	68 0f       	add	r22, r24
 2b8:	79 1f       	adc	r23, r25
 2ba:	64 87       	std	Z+12, r22	; 0x0c
 2bc:	75 87       	std	Z+13, r23	; 0x0d
	
	
	//pid_data->i_term_attitude = pid_data->i_term_attitude/1000;
	//  limit integral wind up
	if(pid_data->i_term_attitude> i_outMax) pid_data->i_term_attitude= i_outMax;
 2be:	80 91 04 20 	lds	r24, 0x2004
 2c2:	90 91 05 20 	lds	r25, 0x2005
 2c6:	86 17       	cp	r24, r22
 2c8:	97 07       	cpc	r25, r23
 2ca:	1c f4       	brge	.+6      	; 0x2d2 <PI_attitude_rate+0x68>
 2cc:	84 87       	std	Z+12, r24	; 0x0c
 2ce:	95 87       	std	Z+13, r25	; 0x0d
 2d0:	09 c0       	rjmp	.+18     	; 0x2e4 <PI_attitude_rate+0x7a>
	else if(pid_data->i_term_attitude< i_outMin) pid_data->i_term_attitude= i_outMin;
 2d2:	80 91 06 20 	lds	r24, 0x2006
 2d6:	90 91 07 20 	lds	r25, 0x2007
 2da:	68 17       	cp	r22, r24
 2dc:	79 07       	cpc	r23, r25
 2de:	14 f4       	brge	.+4      	; 0x2e4 <PI_attitude_rate+0x7a>
 2e0:	84 87       	std	Z+12, r24	; 0x0c
 2e2:	95 87       	std	Z+13, r25	; 0x0d
	
	//calculate attitude p term
	pid_data->p_term_attitude =(pid_data->attitude_error * pid_data->Kp)/10;
 2e4:	46 89       	ldd	r20, Z+22	; 0x16
 2e6:	57 89       	ldd	r21, Z+23	; 0x17
 2e8:	24 9f       	mul	r18, r20
 2ea:	c0 01       	movw	r24, r0
 2ec:	25 9f       	mul	r18, r21
 2ee:	90 0d       	add	r25, r0
 2f0:	34 9f       	mul	r19, r20
 2f2:	90 0d       	add	r25, r0
 2f4:	11 24       	eor	r1, r1
 2f6:	2a e0       	ldi	r18, 0x0A	; 10
 2f8:	30 e0       	ldi	r19, 0x00	; 0
 2fa:	b9 01       	movw	r22, r18
 2fc:	74 d5       	rcall	.+2792   	; 0xde6 <__divmodhi4>
 2fe:	62 87       	std	Z+10, r22	; 0x0a
 300:	73 87       	std	Z+11, r23	; 0x0b

	//  sum the p and i term for the attitude controller (outer loop)
	pid_data->attitude_loop_out = (pid_data->p_term_attitude);  // + pid_data->i_term_attitude);
 302:	df 01       	movw	r26, r30
 304:	a4 5b       	subi	r26, 0xB4	; 180
 306:	bf 4f       	sbci	r27, 0xFF	; 255
 308:	6d 93       	st	X+, r22
 30a:	7c 93       	st	X, r23

	//  calculate the rate error, the input to the rate loop is the output of the attitude loop
	pid_data->rate_error = (pid_data->attitude_loop_out- pid_data->rate_feedback)/10;
 30c:	42 a1       	ldd	r20, Z+34	; 0x22
 30e:	53 a1       	ldd	r21, Z+35	; 0x23
 310:	cb 01       	movw	r24, r22
 312:	84 1b       	sub	r24, r20
 314:	95 0b       	sbc	r25, r21
 316:	b9 01       	movw	r22, r18
 318:	66 d5       	rcall	.+2764   	; 0xde6 <__divmodhi4>
 31a:	66 a7       	std	Z+46, r22	; 0x2e
 31c:	77 a7       	std	Z+47, r23	; 0x2f

	//  p term for rate loop
	pid_data->p_term_rate = (pid_data->rate_error * pid_data->Kp_rate);
 31e:	20 89       	ldd	r18, Z+16	; 0x10
 320:	31 89       	ldd	r19, Z+17	; 0x11
 322:	62 9f       	mul	r22, r18
 324:	c0 01       	movw	r24, r0
 326:	63 9f       	mul	r22, r19
 328:	90 0d       	add	r25, r0
 32a:	72 9f       	mul	r23, r18
 32c:	90 0d       	add	r25, r0
 32e:	11 24       	eor	r1, r1
 330:	84 83       	std	Z+4, r24	; 0x04
 332:	95 83       	std	Z+5, r25	; 0x05

	pid_data->pid_total =pid_data->p_term_rate;
 334:	84 8f       	std	Z+28, r24	; 0x1c
 336:	95 8f       	std	Z+29, r25	; 0x1d
 338:	08 95       	ret

0000033a <initPWM>:
}

void trim()
{
	rollAxis.trim = rollAxis.attitude_command;
	pitchAxis.trim = pitchAxis.attitude_command;
 33a:	e0 e0       	ldi	r30, 0x00	; 0
 33c:	f8 e0       	ldi	r31, 0x08	; 8
 33e:	83 e0       	ldi	r24, 0x03	; 3
 340:	80 83       	st	Z, r24
 342:	81 83       	std	Z+1, r24	; 0x01
 344:	82 83       	std	Z+2, r24	; 0x02
 346:	83 83       	std	Z+3, r24	; 0x03
 348:	81 81       	ldd	r24, Z+1	; 0x01
 34a:	80 61       	ori	r24, 0x10	; 16
 34c:	81 83       	std	Z+1, r24	; 0x01
 34e:	81 81       	ldd	r24, Z+1	; 0x01
 350:	80 62       	ori	r24, 0x20	; 32
 352:	81 83       	std	Z+1, r24	; 0x01
 354:	81 81       	ldd	r24, Z+1	; 0x01
 356:	80 64       	ori	r24, 0x40	; 64
 358:	81 83       	std	Z+1, r24	; 0x01
 35a:	81 81       	ldd	r24, Z+1	; 0x01
 35c:	80 68       	ori	r24, 0x80	; 128
 35e:	81 83       	std	Z+1, r24	; 0x01
 360:	8f e0       	ldi	r24, 0x0F	; 15
 362:	a0 e4       	ldi	r26, 0x40	; 64
 364:	b6 e0       	ldi	r27, 0x06	; 6
 366:	11 96       	adiw	r26, 0x01	; 1
 368:	8c 93       	st	X, r24
 36a:	10 ae       	std	Z+56, r1	; 0x38
 36c:	11 ae       	std	Z+57, r1	; 0x39
 36e:	12 ae       	std	Z+58, r1	; 0x3a
 370:	13 ae       	std	Z+59, r1	; 0x3b
 372:	14 ae       	std	Z+60, r1	; 0x3c
 374:	15 ae       	std	Z+61, r1	; 0x3d
 376:	10 92 3e 08 	sts	0x083E, r1
 37a:	10 92 3f 08 	sts	0x083F, r1
 37e:	89 e2       	ldi	r24, 0x29	; 41
 380:	98 e6       	ldi	r25, 0x68	; 104
 382:	86 a3       	std	Z+38, r24	; 0x26
 384:	97 a3       	std	Z+39, r25	; 0x27
 386:	63 e0       	ldi	r22, 0x03	; 3
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	98 e0       	ldi	r25, 0x08	; 8
 38c:	f9 c4       	rjmp	.+2546   	; 0xd80 <TC0_ConfigClockSource>

0000038e <doPWM>:
 38e:	e0 e0       	ldi	r30, 0x00	; 0
 390:	f8 e0       	ldi	r31, 0x08	; 8
 392:	e4 85       	ldd	r30, Z+12	; 0x0c
 394:	e0 ff       	sbrs	r30, 0
 396:	0e c0       	rjmp	.+28     	; 0x3b4 <doPWM+0x26>
 398:	e0 e0       	ldi	r30, 0x00	; 0
 39a:	f8 e0       	ldi	r31, 0x08	; 8
 39c:	a1 e0       	ldi	r26, 0x01	; 1
 39e:	a4 87       	std	Z+12, r26	; 0x0c
 3a0:	80 af       	std	Z+56, r24	; 0x38
 3a2:	91 af       	std	Z+57, r25	; 0x39
 3a4:	62 af       	std	Z+58, r22	; 0x3a
 3a6:	73 af       	std	Z+59, r23	; 0x3b
 3a8:	44 af       	std	Z+60, r20	; 0x3c
 3aa:	55 af       	std	Z+61, r21	; 0x3d
 3ac:	20 93 3e 08 	sts	0x083E, r18
 3b0:	30 93 3f 08 	sts	0x083F, r19
 3b4:	08 95       	ret

000003b6 <SetPulseWidths>:
 3b6:	80 91 15 21 	lds	r24, 0x2115
 3ba:	90 91 16 21 	lds	r25, 0x2116
 3be:	9c 01       	movw	r18, r24
 3c0:	21 5d       	subi	r18, 0xD1	; 209
 3c2:	37 40       	sbci	r19, 0x07	; 7
 3c4:	2f 32       	cpi	r18, 0x2F	; 47
 3c6:	38 40       	sbci	r19, 0x08	; 8
 3c8:	18 f5       	brcc	.+70     	; 0x410 <SetPulseWidths+0x5a>
 3ca:	88 0f       	add	r24, r24
 3cc:	99 1f       	adc	r25, r25
 3ce:	88 0f       	add	r24, r24
 3d0:	99 1f       	adc	r25, r25
 3d2:	60 91 8b 20 	lds	r22, 0x208B
 3d6:	70 91 8c 20 	lds	r23, 0x208C
 3da:	e0 91 3f 21 	lds	r30, 0x213F
 3de:	f0 91 40 21 	lds	r31, 0x2140
 3e2:	a0 91 29 20 	lds	r26, 0x2029
 3e6:	b0 91 2a 20 	lds	r27, 0x202A
 3ea:	9c 01       	movw	r18, r24
 3ec:	26 1b       	sub	r18, r22
 3ee:	37 0b       	sbc	r19, r23
 3f0:	2e 0f       	add	r18, r30
 3f2:	3f 1f       	adc	r19, r31
 3f4:	ac 01       	movw	r20, r24
 3f6:	4a 1b       	sub	r20, r26
 3f8:	5b 0b       	sbc	r21, r27
 3fa:	4e 0f       	add	r20, r30
 3fc:	5f 1f       	adc	r21, r31
 3fe:	68 0f       	add	r22, r24
 400:	79 1f       	adc	r23, r25
 402:	6e 1b       	sub	r22, r30
 404:	7f 0b       	sbc	r23, r31
 406:	8a 0f       	add	r24, r26
 408:	9b 1f       	adc	r25, r27
 40a:	8e 1b       	sub	r24, r30
 40c:	9f 0b       	sbc	r25, r31
 40e:	bf df       	rcall	.-130    	; 0x38e <doPWM>
 410:	80 91 15 21 	lds	r24, 0x2115
 414:	90 91 16 21 	lds	r25, 0x2116
 418:	06 97       	sbiw	r24, 0x06	; 6
 41a:	4c f4       	brge	.+18     	; 0x42e <SetPulseWidths+0x78>
 41c:	20 e0       	ldi	r18, 0x00	; 0
 41e:	30 e0       	ldi	r19, 0x00	; 0
 420:	40 e0       	ldi	r20, 0x00	; 0
 422:	50 e0       	ldi	r21, 0x00	; 0
 424:	60 e0       	ldi	r22, 0x00	; 0
 426:	70 e0       	ldi	r23, 0x00	; 0
 428:	80 e0       	ldi	r24, 0x00	; 0
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	b0 cf       	rjmp	.-160    	; 0x38e <doPWM>
 42e:	08 95       	ret

00000430 <intPID_gains>:
 430:	46 e0       	ldi	r20, 0x06	; 6
 432:	50 e0       	ldi	r21, 0x00	; 0
 434:	40 93 85 20 	sts	0x2085, r20
 438:	50 93 86 20 	sts	0x2086, r21
 43c:	21 e0       	ldi	r18, 0x01	; 1
 43e:	30 e0       	ldi	r19, 0x00	; 0
 440:	20 93 87 20 	sts	0x2087, r18
 444:	30 93 88 20 	sts	0x2088, r19
 448:	84 e0       	ldi	r24, 0x04	; 4
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	80 93 7f 20 	sts	0x207F, r24
 450:	90 93 80 20 	sts	0x2080, r25
 454:	10 92 81 20 	sts	0x2081, r1
 458:	10 92 82 20 	sts	0x2082, r1
 45c:	63 e0       	ldi	r22, 0x03	; 3
 45e:	70 e0       	ldi	r23, 0x00	; 0
 460:	60 93 39 21 	sts	0x2139, r22
 464:	70 93 3a 21 	sts	0x213A, r23
 468:	10 92 3b 21 	sts	0x213B, r1
 46c:	10 92 3c 21 	sts	0x213C, r1
 470:	10 92 33 21 	sts	0x2133, r1
 474:	10 92 34 21 	sts	0x2134, r1
 478:	10 92 35 21 	sts	0x2135, r1
 47c:	10 92 36 21 	sts	0x2136, r1
 480:	40 93 23 20 	sts	0x2023, r20
 484:	50 93 24 20 	sts	0x2024, r21
 488:	20 93 25 20 	sts	0x2025, r18
 48c:	30 93 26 20 	sts	0x2026, r19
 490:	80 93 1d 20 	sts	0x201D, r24
 494:	90 93 1e 20 	sts	0x201E, r25
 498:	10 92 1f 20 	sts	0x201F, r1
 49c:	10 92 20 20 	sts	0x2020, r1
 4a0:	88 ec       	ldi	r24, 0xC8	; 200
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	80 93 3f 20 	sts	0x203F, r24
 4a8:	90 93 40 20 	sts	0x2040, r25
 4ac:	80 93 a1 20 	sts	0x20A1, r24
 4b0:	90 93 a2 20 	sts	0x20A2, r25
 4b4:	80 93 55 21 	sts	0x2155, r24
 4b8:	90 93 56 21 	sts	0x2156, r25
 4bc:	08 95       	ret

000004be <sendUM6_Data>:
 4be:	8c ec       	ldi	r24, 0xCC	; 204
 4c0:	9c ec       	ldi	r25, 0xCC	; 204
 4c2:	85 d4       	rcall	.+2314   	; 0xdce <sendData_int16_t>
 4c4:	80 91 33 20 	lds	r24, 0x2033
 4c8:	90 91 34 20 	lds	r25, 0x2034
 4cc:	80 d4       	rcall	.+2304   	; 0xdce <sendData_int16_t>
 4ce:	80 91 2b 20 	lds	r24, 0x202B
 4d2:	90 91 2c 20 	lds	r25, 0x202C
 4d6:	7b c4       	rjmp	.+2294   	; 0xdce <sendData_int16_t>

000004d8 <WriteToPC_SPI>:
 4d8:	af 92       	push	r10
 4da:	bf 92       	push	r11
 4dc:	cf 92       	push	r12
 4de:	df 92       	push	r13
 4e0:	ff 92       	push	r15
 4e2:	0f 93       	push	r16
 4e4:	1f 93       	push	r17
 4e6:	cf 93       	push	r28
 4e8:	df 93       	push	r29
 4ea:	00 e8       	ldi	r16, 0x80	; 128
 4ec:	16 e0       	ldi	r17, 0x06	; 6
 4ee:	68 94       	set
 4f0:	ff 24       	eor	r15, r15
 4f2:	f4 f8       	bld	r15, 4
 4f4:	f8 01       	movw	r30, r16
 4f6:	f6 82       	std	Z+6, r15	; 0x06
 4f8:	80 e0       	ldi	r24, 0x00	; 0
 4fa:	b0 d3       	rcall	.+1888   	; 0xc5c <spiPC_write_read>
 4fc:	d8 2f       	mov	r29, r24
 4fe:	f0 e0       	ldi	r31, 0x00	; 0
 500:	cf 2f       	mov	r28, r31
 502:	0f 2e       	mov	r0, r31
 504:	f5 e1       	ldi	r31, 0x15	; 21
 506:	cf 2e       	mov	r12, r31
 508:	f1 e2       	ldi	r31, 0x21	; 33
 50a:	df 2e       	mov	r13, r31
 50c:	f0 2d       	mov	r31, r0
 50e:	f6 01       	movw	r30, r12
 510:	c0 83       	st	Z, r28
 512:	d1 83       	std	Z+1, r29	; 0x01
 514:	80 91 64 20 	lds	r24, 0x2064
 518:	a1 d3       	rcall	.+1858   	; 0xc5c <spiPC_write_read>
 51a:	c8 0f       	add	r28, r24
 51c:	d1 1d       	adc	r29, r1
 51e:	f6 01       	movw	r30, r12
 520:	c0 83       	st	Z, r28
 522:	d1 83       	std	Z+1, r29	; 0x01
 524:	0f 2e       	mov	r0, r31
 526:	fd e2       	ldi	r31, 0x2D	; 45
 528:	af 2e       	mov	r10, r31
 52a:	f0 e2       	ldi	r31, 0x20	; 32
 52c:	bf 2e       	mov	r11, r31
 52e:	f0 2d       	mov	r31, r0
 530:	f5 01       	movw	r30, r10
 532:	81 81       	ldd	r24, Z+1	; 0x01
 534:	93 d3       	rcall	.+1830   	; 0xc5c <spiPC_write_read>
 536:	d8 2f       	mov	r29, r24
 538:	f0 e0       	ldi	r31, 0x00	; 0
 53a:	cf 2f       	mov	r28, r31
 53c:	0f 2e       	mov	r0, r31
 53e:	f3 e3       	ldi	r31, 0x33	; 51
 540:	cf 2e       	mov	r12, r31
 542:	f0 e2       	ldi	r31, 0x20	; 32
 544:	df 2e       	mov	r13, r31
 546:	f0 2d       	mov	r31, r0
 548:	f6 01       	movw	r30, r12
 54a:	c0 83       	st	Z, r28
 54c:	d1 83       	std	Z+1, r29	; 0x01
 54e:	f5 01       	movw	r30, r10
 550:	80 81       	ld	r24, Z
 552:	84 d3       	rcall	.+1800   	; 0xc5c <spiPC_write_read>
 554:	c8 0f       	add	r28, r24
 556:	d1 1d       	adc	r29, r1
 558:	f6 01       	movw	r30, r12
 55a:	c0 83       	st	Z, r28
 55c:	d1 83       	std	Z+1, r29	; 0x01
 55e:	0f 2e       	mov	r0, r31
 560:	ff e8       	ldi	r31, 0x8F	; 143
 562:	af 2e       	mov	r10, r31
 564:	f0 e2       	ldi	r31, 0x20	; 32
 566:	bf 2e       	mov	r11, r31
 568:	f0 2d       	mov	r31, r0
 56a:	f5 01       	movw	r30, r10
 56c:	81 81       	ldd	r24, Z+1	; 0x01
 56e:	76 d3       	rcall	.+1772   	; 0xc5c <spiPC_write_read>
 570:	d8 2f       	mov	r29, r24
 572:	f0 e0       	ldi	r31, 0x00	; 0
 574:	cf 2f       	mov	r28, r31
 576:	0f 2e       	mov	r0, r31
 578:	f5 e9       	ldi	r31, 0x95	; 149
 57a:	cf 2e       	mov	r12, r31
 57c:	f0 e2       	ldi	r31, 0x20	; 32
 57e:	df 2e       	mov	r13, r31
 580:	f0 2d       	mov	r31, r0
 582:	f6 01       	movw	r30, r12
 584:	c0 83       	st	Z, r28
 586:	d1 83       	std	Z+1, r29	; 0x01
 588:	f5 01       	movw	r30, r10
 58a:	80 81       	ld	r24, Z
 58c:	67 d3       	rcall	.+1742   	; 0xc5c <spiPC_write_read>
 58e:	c8 0f       	add	r28, r24
 590:	d1 1d       	adc	r29, r1
 592:	f6 01       	movw	r30, r12
 594:	c0 83       	st	Z, r28
 596:	d1 83       	std	Z+1, r29	; 0x01
 598:	0f 2e       	mov	r0, r31
 59a:	f3 e4       	ldi	r31, 0x43	; 67
 59c:	af 2e       	mov	r10, r31
 59e:	f1 e2       	ldi	r31, 0x21	; 33
 5a0:	bf 2e       	mov	r11, r31
 5a2:	f0 2d       	mov	r31, r0
 5a4:	f5 01       	movw	r30, r10
 5a6:	81 81       	ldd	r24, Z+1	; 0x01
 5a8:	59 d3       	rcall	.+1714   	; 0xc5c <spiPC_write_read>
 5aa:	d8 2f       	mov	r29, r24
 5ac:	f0 e0       	ldi	r31, 0x00	; 0
 5ae:	cf 2f       	mov	r28, r31
 5b0:	0f 2e       	mov	r0, r31
 5b2:	f9 e4       	ldi	r31, 0x49	; 73
 5b4:	cf 2e       	mov	r12, r31
 5b6:	f1 e2       	ldi	r31, 0x21	; 33
 5b8:	df 2e       	mov	r13, r31
 5ba:	f0 2d       	mov	r31, r0
 5bc:	f6 01       	movw	r30, r12
 5be:	c0 83       	st	Z, r28
 5c0:	d1 83       	std	Z+1, r29	; 0x01
 5c2:	f5 01       	movw	r30, r10
 5c4:	80 81       	ld	r24, Z
 5c6:	4a d3       	rcall	.+1684   	; 0xc5c <spiPC_write_read>
 5c8:	c8 0f       	add	r28, r24
 5ca:	d1 1d       	adc	r29, r1
 5cc:	f6 01       	movw	r30, r12
 5ce:	c0 83       	st	Z, r28
 5d0:	d1 83       	std	Z+1, r29	; 0x01
 5d2:	c1 e3       	ldi	r28, 0x31	; 49
 5d4:	d0 e2       	ldi	r29, 0x20	; 32
 5d6:	89 81       	ldd	r24, Y+1	; 0x01
 5d8:	41 d3       	rcall	.+1666   	; 0xc5c <spiPC_write_read>
 5da:	88 81       	ld	r24, Y
 5dc:	3f d3       	rcall	.+1662   	; 0xc5c <spiPC_write_read>
 5de:	c3 e9       	ldi	r28, 0x93	; 147
 5e0:	d0 e2       	ldi	r29, 0x20	; 32
 5e2:	89 81       	ldd	r24, Y+1	; 0x01
 5e4:	3b d3       	rcall	.+1654   	; 0xc5c <spiPC_write_read>
 5e6:	88 81       	ld	r24, Y
 5e8:	39 d3       	rcall	.+1650   	; 0xc5c <spiPC_write_read>
 5ea:	c7 e4       	ldi	r28, 0x47	; 71
 5ec:	d1 e2       	ldi	r29, 0x21	; 33
 5ee:	89 81       	ldd	r24, Y+1	; 0x01
 5f0:	35 d3       	rcall	.+1642   	; 0xc5c <spiPC_write_read>
 5f2:	88 81       	ld	r24, Y
 5f4:	33 d3       	rcall	.+1638   	; 0xc5c <spiPC_write_read>
 5f6:	89 81       	ldd	r24, Y+1	; 0x01
 5f8:	31 d3       	rcall	.+1634   	; 0xc5c <spiPC_write_read>
 5fa:	10 92 61 20 	sts	0x2061, r1
 5fe:	80 93 62 20 	sts	0x2062, r24
 602:	88 81       	ld	r24, Y
 604:	2b d3       	rcall	.+1622   	; 0xc5c <spiPC_write_read>
 606:	20 91 61 20 	lds	r18, 0x2061
 60a:	30 91 62 20 	lds	r19, 0x2062
 60e:	28 0f       	add	r18, r24
 610:	31 1d       	adc	r19, r1
 612:	20 93 61 20 	sts	0x2061, r18
 616:	30 93 62 20 	sts	0x2062, r19
 61a:	80 e8       	ldi	r24, 0x80	; 128
 61c:	1f d3       	rcall	.+1598   	; 0xc5c <spiPC_write_read>
 61e:	80 93 64 20 	sts	0x2064, r24
 622:	80 e8       	ldi	r24, 0x80	; 128
 624:	1b d3       	rcall	.+1590   	; 0xc5c <spiPC_write_read>
 626:	80 93 64 20 	sts	0x2064, r24
 62a:	f8 01       	movw	r30, r16
 62c:	f5 82       	std	Z+5, r15	; 0x05
 62e:	80 91 61 20 	lds	r24, 0x2061
 632:	90 91 62 20 	lds	r25, 0x2062
 636:	df 91       	pop	r29
 638:	cf 91       	pop	r28
 63a:	1f 91       	pop	r17
 63c:	0f 91       	pop	r16
 63e:	ff 90       	pop	r15
 640:	df 90       	pop	r13
 642:	cf 90       	pop	r12
 644:	bf 90       	pop	r11
 646:	af 90       	pop	r10
 648:	08 95       	ret

0000064a <WriteToPC_SPI_test>:
 64a:	ef 92       	push	r14
 64c:	ff 92       	push	r15
 64e:	0f 93       	push	r16
 650:	1f 93       	push	r17
 652:	cf 93       	push	r28
 654:	df 93       	push	r29
 656:	80 e1       	ldi	r24, 0x10	; 16
 658:	e0 e8       	ldi	r30, 0x80	; 128
 65a:	f6 e0       	ldi	r31, 0x06	; 6
 65c:	86 83       	std	Z+6, r24	; 0x06
 65e:	80 e0       	ldi	r24, 0x00	; 0
 660:	fd d2       	rcall	.+1530   	; 0xc5c <spiPC_write_read>
 662:	d8 2f       	mov	r29, r24
 664:	80 e0       	ldi	r24, 0x00	; 0
 666:	c8 2f       	mov	r28, r24
 668:	05 e1       	ldi	r16, 0x15	; 21
 66a:	11 e2       	ldi	r17, 0x21	; 33
 66c:	f8 01       	movw	r30, r16
 66e:	c0 83       	st	Z, r28
 670:	d1 83       	std	Z+1, r29	; 0x01
 672:	80 91 64 20 	lds	r24, 0x2064
 676:	f2 d2       	rcall	.+1508   	; 0xc5c <spiPC_write_read>
 678:	c8 0f       	add	r28, r24
 67a:	d1 1d       	adc	r29, r1
 67c:	f8 01       	movw	r30, r16
 67e:	c0 83       	st	Z, r28
 680:	d1 83       	std	Z+1, r29	; 0x01
 682:	cd e2       	ldi	r28, 0x2D	; 45
 684:	d0 e2       	ldi	r29, 0x20	; 32
 686:	18 82       	st	Y, r1
 688:	19 82       	std	Y+1, r1	; 0x01
 68a:	80 e0       	ldi	r24, 0x00	; 0
 68c:	e7 d2       	rcall	.+1486   	; 0xc5c <spiPC_write_read>
 68e:	10 92 64 20 	sts	0x2064, r1
 692:	88 81       	ld	r24, Y
 694:	e3 d2       	rcall	.+1478   	; 0xc5c <spiPC_write_read>
 696:	90 91 64 20 	lds	r25, 0x2064
 69a:	89 0f       	add	r24, r25
 69c:	80 93 64 20 	sts	0x2064, r24
 6a0:	ef e3       	ldi	r30, 0x3F	; 63
 6a2:	f1 e2       	ldi	r31, 0x21	; 33
 6a4:	80 81       	ld	r24, Z
 6a6:	91 81       	ldd	r25, Z+1	; 0x01
 6a8:	99 23       	and	r25, r25
 6aa:	0c f4       	brge	.+2      	; 0x6ae <WriteToPC_SPI_test+0x64>
 6ac:	01 96       	adiw	r24, 0x01	; 1
 6ae:	95 95       	asr	r25
 6b0:	87 95       	ror	r24
 6b2:	0f e8       	ldi	r16, 0x8F	; 143
 6b4:	10 e2       	ldi	r17, 0x20	; 32
 6b6:	f8 01       	movw	r30, r16
 6b8:	80 83       	st	Z, r24
 6ba:	91 83       	std	Z+1, r25	; 0x01
 6bc:	89 2f       	mov	r24, r25
 6be:	ce d2       	rcall	.+1436   	; 0xc5c <spiPC_write_read>
 6c0:	d8 2f       	mov	r29, r24
 6c2:	f0 e0       	ldi	r31, 0x00	; 0
 6c4:	cf 2f       	mov	r28, r31
 6c6:	0f 2e       	mov	r0, r31
 6c8:	f5 e9       	ldi	r31, 0x95	; 149
 6ca:	ef 2e       	mov	r14, r31
 6cc:	f0 e2       	ldi	r31, 0x20	; 32
 6ce:	ff 2e       	mov	r15, r31
 6d0:	f0 2d       	mov	r31, r0
 6d2:	f7 01       	movw	r30, r14
 6d4:	c0 83       	st	Z, r28
 6d6:	d1 83       	std	Z+1, r29	; 0x01
 6d8:	f8 01       	movw	r30, r16
 6da:	80 81       	ld	r24, Z
 6dc:	bf d2       	rcall	.+1406   	; 0xc5c <spiPC_write_read>
 6de:	c8 0f       	add	r28, r24
 6e0:	d1 1d       	adc	r29, r1
 6e2:	f7 01       	movw	r30, r14
 6e4:	c0 83       	st	Z, r28
 6e6:	d1 83       	std	Z+1, r29	; 0x01
 6e8:	0f 2e       	mov	r0, r31
 6ea:	f3 e4       	ldi	r31, 0x43	; 67
 6ec:	ef 2e       	mov	r14, r31
 6ee:	f1 e2       	ldi	r31, 0x21	; 33
 6f0:	ff 2e       	mov	r15, r31
 6f2:	f0 2d       	mov	r31, r0
 6f4:	f7 01       	movw	r30, r14
 6f6:	81 81       	ldd	r24, Z+1	; 0x01
 6f8:	b1 d2       	rcall	.+1378   	; 0xc5c <spiPC_write_read>
 6fa:	d8 2f       	mov	r29, r24
 6fc:	f0 e0       	ldi	r31, 0x00	; 0
 6fe:	cf 2f       	mov	r28, r31
 700:	09 e4       	ldi	r16, 0x49	; 73
 702:	11 e2       	ldi	r17, 0x21	; 33
 704:	f8 01       	movw	r30, r16
 706:	c0 83       	st	Z, r28
 708:	d1 83       	std	Z+1, r29	; 0x01
 70a:	f7 01       	movw	r30, r14
 70c:	80 81       	ld	r24, Z
 70e:	a6 d2       	rcall	.+1356   	; 0xc5c <spiPC_write_read>
 710:	c8 0f       	add	r28, r24
 712:	d1 1d       	adc	r29, r1
 714:	f8 01       	movw	r30, r16
 716:	c0 83       	st	Z, r28
 718:	d1 83       	std	Z+1, r29	; 0x01
 71a:	e3 e3       	ldi	r30, 0x33	; 51
 71c:	f0 e2       	ldi	r31, 0x20	; 32
 71e:	80 81       	ld	r24, Z
 720:	91 81       	ldd	r25, Z+1	; 0x01
 722:	99 23       	and	r25, r25
 724:	0c f4       	brge	.+2      	; 0x728 <WriteToPC_SPI_test+0xde>
 726:	01 96       	adiw	r24, 0x01	; 1
 728:	95 95       	asr	r25
 72a:	87 95       	ror	r24
 72c:	01 e3       	ldi	r16, 0x31	; 49
 72e:	10 e2       	ldi	r17, 0x20	; 32
 730:	f8 01       	movw	r30, r16
 732:	80 83       	st	Z, r24
 734:	91 83       	std	Z+1, r25	; 0x01
 736:	89 2f       	mov	r24, r25
 738:	91 d2       	rcall	.+1314   	; 0xc5c <spiPC_write_read>
 73a:	d8 2f       	mov	r29, r24
 73c:	f0 e0       	ldi	r31, 0x00	; 0
 73e:	cf 2f       	mov	r28, r31
 740:	0f 2e       	mov	r0, r31
 742:	f5 e8       	ldi	r31, 0x85	; 133
 744:	ef 2e       	mov	r14, r31
 746:	f0 e2       	ldi	r31, 0x20	; 32
 748:	ff 2e       	mov	r15, r31
 74a:	f0 2d       	mov	r31, r0
 74c:	f7 01       	movw	r30, r14
 74e:	c0 83       	st	Z, r28
 750:	d1 83       	std	Z+1, r29	; 0x01
 752:	f8 01       	movw	r30, r16
 754:	80 81       	ld	r24, Z
 756:	82 d2       	rcall	.+1284   	; 0xc5c <spiPC_write_read>
 758:	c8 0f       	add	r28, r24
 75a:	d1 1d       	adc	r29, r1
 75c:	f7 01       	movw	r30, r14
 75e:	c0 83       	st	Z, r28
 760:	d1 83       	std	Z+1, r29	; 0x01
 762:	e9 e1       	ldi	r30, 0x19	; 25
 764:	f0 e2       	ldi	r31, 0x20	; 32
 766:	80 81       	ld	r24, Z
 768:	91 81       	ldd	r25, Z+1	; 0x01
 76a:	99 23       	and	r25, r25
 76c:	0c f4       	brge	.+2      	; 0x770 <WriteToPC_SPI_test+0x126>
 76e:	01 96       	adiw	r24, 0x01	; 1
 770:	95 95       	asr	r25
 772:	87 95       	ror	r24
 774:	03 e9       	ldi	r16, 0x93	; 147
 776:	10 e2       	ldi	r17, 0x20	; 32
 778:	f8 01       	movw	r30, r16
 77a:	80 83       	st	Z, r24
 77c:	91 83       	std	Z+1, r25	; 0x01
 77e:	89 2f       	mov	r24, r25
 780:	6d d2       	rcall	.+1242   	; 0xc5c <spiPC_write_read>
 782:	d8 2f       	mov	r29, r24
 784:	f0 e0       	ldi	r31, 0x00	; 0
 786:	cf 2f       	mov	r28, r31
 788:	0f 2e       	mov	r0, r31
 78a:	f7 e8       	ldi	r31, 0x87	; 135
 78c:	ef 2e       	mov	r14, r31
 78e:	f0 e2       	ldi	r31, 0x20	; 32
 790:	ff 2e       	mov	r15, r31
 792:	f0 2d       	mov	r31, r0
 794:	f7 01       	movw	r30, r14
 796:	c0 83       	st	Z, r28
 798:	d1 83       	std	Z+1, r29	; 0x01
 79a:	f8 01       	movw	r30, r16
 79c:	80 81       	ld	r24, Z
 79e:	5e d2       	rcall	.+1212   	; 0xc5c <spiPC_write_read>
 7a0:	c8 0f       	add	r28, r24
 7a2:	d1 1d       	adc	r29, r1
 7a4:	f7 01       	movw	r30, r14
 7a6:	c0 83       	st	Z, r28
 7a8:	d1 83       	std	Z+1, r29	; 0x01
 7aa:	e1 e1       	ldi	r30, 0x11	; 17
 7ac:	f0 e2       	ldi	r31, 0x20	; 32
 7ae:	80 81       	ld	r24, Z
 7b0:	91 81       	ldd	r25, Z+1	; 0x01
 7b2:	99 23       	and	r25, r25
 7b4:	0c f4       	brge	.+2      	; 0x7b8 <WriteToPC_SPI_test+0x16e>
 7b6:	01 96       	adiw	r24, 0x01	; 1
 7b8:	95 95       	asr	r25
 7ba:	87 95       	ror	r24
 7bc:	c7 e4       	ldi	r28, 0x47	; 71
 7be:	d1 e2       	ldi	r29, 0x21	; 33
 7c0:	88 83       	st	Y, r24
 7c2:	99 83       	std	Y+1, r25	; 0x01
 7c4:	89 2f       	mov	r24, r25
 7c6:	4a d2       	rcall	.+1172   	; 0xc5c <spiPC_write_read>
 7c8:	18 2f       	mov	r17, r24
 7ca:	00 e0       	ldi	r16, 0x00	; 0
 7cc:	0f 2e       	mov	r0, r31
 7ce:	ff e7       	ldi	r31, 0x7F	; 127
 7d0:	ef 2e       	mov	r14, r31
 7d2:	f0 e2       	ldi	r31, 0x20	; 32
 7d4:	ff 2e       	mov	r15, r31
 7d6:	f0 2d       	mov	r31, r0
 7d8:	f7 01       	movw	r30, r14
 7da:	00 83       	st	Z, r16
 7dc:	11 83       	std	Z+1, r17	; 0x01
 7de:	88 81       	ld	r24, Y
 7e0:	3d d2       	rcall	.+1146   	; 0xc5c <spiPC_write_read>
 7e2:	08 0f       	add	r16, r24
 7e4:	11 1d       	adc	r17, r1
 7e6:	f7 01       	movw	r30, r14
 7e8:	00 83       	st	Z, r16
 7ea:	11 83       	std	Z+1, r17	; 0x01
 7ec:	89 81       	ldd	r24, Y+1	; 0x01
 7ee:	36 d2       	rcall	.+1132   	; 0xc5c <spiPC_write_read>
 7f0:	10 92 61 20 	sts	0x2061, r1
 7f4:	80 93 62 20 	sts	0x2062, r24
 7f8:	88 81       	ld	r24, Y
 7fa:	30 d2       	rcall	.+1120   	; 0xc5c <spiPC_write_read>
 7fc:	20 91 61 20 	lds	r18, 0x2061
 800:	30 91 62 20 	lds	r19, 0x2062
 804:	28 0f       	add	r18, r24
 806:	31 1d       	adc	r19, r1
 808:	20 93 61 20 	sts	0x2061, r18
 80c:	30 93 62 20 	sts	0x2062, r19
 810:	80 e8       	ldi	r24, 0x80	; 128
 812:	24 d2       	rcall	.+1096   	; 0xc5c <spiPC_write_read>
 814:	80 93 64 20 	sts	0x2064, r24
 818:	80 e8       	ldi	r24, 0x80	; 128
 81a:	20 d2       	rcall	.+1088   	; 0xc5c <spiPC_write_read>
 81c:	80 93 64 20 	sts	0x2064, r24
 820:	80 e1       	ldi	r24, 0x10	; 16
 822:	e0 e8       	ldi	r30, 0x80	; 128
 824:	f6 e0       	ldi	r31, 0x06	; 6
 826:	85 83       	std	Z+5, r24	; 0x05
 828:	80 91 61 20 	lds	r24, 0x2061
 82c:	90 91 62 20 	lds	r25, 0x2062
 830:	df 91       	pop	r29
 832:	cf 91       	pop	r28
 834:	1f 91       	pop	r17
 836:	0f 91       	pop	r16
 838:	ff 90       	pop	r15
 83a:	ef 90       	pop	r14
 83c:	08 95       	ret

0000083e <UpdateEulerAngles>:
 83e:	cf 93       	push	r28
 840:	80 e1       	ldi	r24, 0x10	; 16
 842:	e0 ea       	ldi	r30, 0xA0	; 160
 844:	f6 e0       	ldi	r31, 0x06	; 6
 846:	86 83       	std	Z+6, r24	; 0x06
 848:	80 e0       	ldi	r24, 0x00	; 0
 84a:	16 d2       	rcall	.+1068   	; 0xc78 <spiIMU_write_read>
 84c:	82 e6       	ldi	r24, 0x62	; 98
 84e:	14 d2       	rcall	.+1064   	; 0xc78 <spiIMU_write_read>
 850:	80 e0       	ldi	r24, 0x00	; 0
 852:	12 d2       	rcall	.+1060   	; 0xc78 <spiIMU_write_read>
 854:	c8 2f       	mov	r28, r24
 856:	80 e0       	ldi	r24, 0x00	; 0
 858:	0f d2       	rcall	.+1054   	; 0xc78 <spiIMU_write_read>
 85a:	3c 2f       	mov	r19, r28
 85c:	20 e0       	ldi	r18, 0x00	; 0
 85e:	28 2b       	or	r18, r24
 860:	20 93 2b 20 	sts	0x202B, r18
 864:	30 93 2c 20 	sts	0x202C, r19
 868:	c9 01       	movw	r24, r18
 86a:	99 23       	and	r25, r25
 86c:	0c f4       	brge	.+2      	; 0x870 <UpdateEulerAngles+0x32>
 86e:	01 96       	adiw	r24, 0x01	; 1
 870:	95 95       	asr	r25
 872:	87 95       	ror	r24
 874:	80 93 2d 20 	sts	0x202D, r24
 878:	90 93 2e 20 	sts	0x202E, r25
 87c:	80 e0       	ldi	r24, 0x00	; 0
 87e:	fc d1       	rcall	.+1016   	; 0xc78 <spiIMU_write_read>
 880:	c8 2f       	mov	r28, r24
 882:	83 e6       	ldi	r24, 0x63	; 99
 884:	f9 d1       	rcall	.+1010   	; 0xc78 <spiIMU_write_read>
 886:	3c 2f       	mov	r19, r28
 888:	20 e0       	ldi	r18, 0x00	; 0
 88a:	28 2b       	or	r18, r24
 88c:	20 93 8d 20 	sts	0x208D, r18
 890:	30 93 8e 20 	sts	0x208E, r19
 894:	c9 01       	movw	r24, r18
 896:	99 23       	and	r25, r25
 898:	0c f4       	brge	.+2      	; 0x89c <UpdateEulerAngles+0x5e>
 89a:	01 96       	adiw	r24, 0x01	; 1
 89c:	95 95       	asr	r25
 89e:	87 95       	ror	r24
 8a0:	80 93 8f 20 	sts	0x208F, r24
 8a4:	90 93 90 20 	sts	0x2090, r25
 8a8:	80 e0       	ldi	r24, 0x00	; 0
 8aa:	e6 d1       	rcall	.+972    	; 0xc78 <spiIMU_write_read>
 8ac:	c8 2f       	mov	r28, r24
 8ae:	80 e0       	ldi	r24, 0x00	; 0
 8b0:	e3 d1       	rcall	.+966    	; 0xc78 <spiIMU_write_read>
 8b2:	3c 2f       	mov	r19, r28
 8b4:	20 e0       	ldi	r18, 0x00	; 0
 8b6:	28 2b       	or	r18, r24
 8b8:	20 93 41 21 	sts	0x2141, r18
 8bc:	30 93 42 21 	sts	0x2142, r19
 8c0:	c9 01       	movw	r24, r18
 8c2:	99 23       	and	r25, r25
 8c4:	0c f4       	brge	.+2      	; 0x8c8 <UpdateEulerAngles+0x8a>
 8c6:	01 96       	adiw	r24, 0x01	; 1
 8c8:	95 95       	asr	r25
 8ca:	87 95       	ror	r24
 8cc:	80 93 43 21 	sts	0x2143, r24
 8d0:	90 93 44 21 	sts	0x2144, r25
 8d4:	80 e0       	ldi	r24, 0x00	; 0
 8d6:	d0 d1       	rcall	.+928    	; 0xc78 <spiIMU_write_read>
 8d8:	8c e5       	ldi	r24, 0x5C	; 92
 8da:	ce d1       	rcall	.+924    	; 0xc78 <spiIMU_write_read>
 8dc:	80 e0       	ldi	r24, 0x00	; 0
 8de:	cc d1       	rcall	.+920    	; 0xc78 <spiIMU_write_read>
 8e0:	c8 2f       	mov	r28, r24
 8e2:	80 e0       	ldi	r24, 0x00	; 0
 8e4:	c9 d1       	rcall	.+914    	; 0xc78 <spiIMU_write_read>
 8e6:	3c 2f       	mov	r19, r28
 8e8:	20 e0       	ldi	r18, 0x00	; 0
 8ea:	28 2b       	or	r18, r24
 8ec:	20 93 2f 20 	sts	0x202F, r18
 8f0:	30 93 30 20 	sts	0x2030, r19
 8f4:	c9 01       	movw	r24, r18
 8f6:	99 23       	and	r25, r25
 8f8:	0c f4       	brge	.+2      	; 0x8fc <UpdateEulerAngles+0xbe>
 8fa:	01 96       	adiw	r24, 0x01	; 1
 8fc:	95 95       	asr	r25
 8fe:	87 95       	ror	r24
 900:	80 93 31 20 	sts	0x2031, r24
 904:	90 93 32 20 	sts	0x2032, r25
 908:	80 e0       	ldi	r24, 0x00	; 0
 90a:	b6 d1       	rcall	.+876    	; 0xc78 <spiIMU_write_read>
 90c:	c8 2f       	mov	r28, r24
 90e:	8d e5       	ldi	r24, 0x5D	; 93
 910:	b3 d1       	rcall	.+870    	; 0xc78 <spiIMU_write_read>
 912:	3c 2f       	mov	r19, r28
 914:	20 e0       	ldi	r18, 0x00	; 0
 916:	28 2b       	or	r18, r24
 918:	20 93 91 20 	sts	0x2091, r18
 91c:	30 93 92 20 	sts	0x2092, r19
 920:	c9 01       	movw	r24, r18
 922:	99 23       	and	r25, r25
 924:	0c f4       	brge	.+2      	; 0x928 <UpdateEulerAngles+0xea>
 926:	01 96       	adiw	r24, 0x01	; 1
 928:	95 95       	asr	r25
 92a:	87 95       	ror	r24
 92c:	80 93 93 20 	sts	0x2093, r24
 930:	90 93 94 20 	sts	0x2094, r25
 934:	80 e0       	ldi	r24, 0x00	; 0
 936:	a0 d1       	rcall	.+832    	; 0xc78 <spiIMU_write_read>
 938:	c8 2f       	mov	r28, r24
 93a:	80 e0       	ldi	r24, 0x00	; 0
 93c:	9d d1       	rcall	.+826    	; 0xc78 <spiIMU_write_read>
 93e:	3c 2f       	mov	r19, r28
 940:	20 e0       	ldi	r18, 0x00	; 0
 942:	28 2b       	or	r18, r24
 944:	20 93 45 21 	sts	0x2145, r18
 948:	30 93 46 21 	sts	0x2146, r19
 94c:	c9 01       	movw	r24, r18
 94e:	99 23       	and	r25, r25
 950:	0c f4       	brge	.+2      	; 0x954 <UpdateEulerAngles+0x116>
 952:	01 96       	adiw	r24, 0x01	; 1
 954:	95 95       	asr	r25
 956:	87 95       	ror	r24
 958:	80 93 47 21 	sts	0x2147, r24
 95c:	90 93 48 21 	sts	0x2148, r25
 960:	80 e0       	ldi	r24, 0x00	; 0
 962:	8a d1       	rcall	.+788    	; 0xc78 <spiIMU_write_read>
 964:	80 e0       	ldi	r24, 0x00	; 0
 966:	88 d1       	rcall	.+784    	; 0xc78 <spiIMU_write_read>
 968:	80 e1       	ldi	r24, 0x10	; 16
 96a:	e0 ea       	ldi	r30, 0xA0	; 160
 96c:	f6 e0       	ldi	r31, 0x06	; 6
 96e:	85 83       	std	Z+5, r24	; 0x05
 970:	cf 91       	pop	r28
 972:	08 95       	ret

00000974 <ControlLoop>:
 974:	80 91 77 21 	lds	r24, 0x2177
 978:	90 91 78 21 	lds	r25, 0x2178
 97c:	01 96       	adiw	r24, 0x01	; 1
 97e:	80 93 77 21 	sts	0x2177, r24
 982:	90 93 78 21 	sts	0x2178, r25
 986:	5b df       	rcall	.-330    	; 0x83e <UpdateEulerAngles>
 988:	8f e6       	ldi	r24, 0x6F	; 111
 98a:	90 e2       	ldi	r25, 0x20	; 32
 98c:	6e dc       	rcall	.-1828   	; 0x26a <PI_attitude_rate>
 98e:	83 e2       	ldi	r24, 0x23	; 35
 990:	91 e2       	ldi	r25, 0x21	; 33
 992:	55 dc       	rcall	.-1878   	; 0x23e <P_attitude>
 994:	8d e0       	ldi	r24, 0x0D	; 13
 996:	90 e2       	ldi	r25, 0x20	; 32
 998:	68 dc       	rcall	.-1840   	; 0x26a <PI_attitude_rate>
 99a:	0d dd       	rcall	.-1510   	; 0x3b6 <SetPulseWidths>
 99c:	90 dd       	rcall	.-1248   	; 0x4be <sendUM6_Data>
 99e:	80 91 77 21 	lds	r24, 0x2177
 9a2:	90 91 78 21 	lds	r25, 0x2178
 9a6:	4f 97       	sbiw	r24, 0x1f	; 31
 9a8:	d0 f0       	brcs	.+52     	; 0x9de <ControlLoop+0x6a>
 9aa:	80 91 08 20 	lds	r24, 0x2008
 9ae:	81 11       	cpse	r24, r1
 9b0:	09 c0       	rjmp	.+18     	; 0x9c4 <ControlLoop+0x50>
 9b2:	92 dd       	rcall	.-1244   	; 0x4d8 <WriteToPC_SPI>
 9b4:	80 93 6d 20 	sts	0x206D, r24
 9b8:	90 93 6e 20 	sts	0x206E, r25
 9bc:	10 92 77 21 	sts	0x2177, r1
 9c0:	10 92 78 21 	sts	0x2178, r1
 9c4:	80 91 08 20 	lds	r24, 0x2008
 9c8:	81 30       	cpi	r24, 0x01	; 1
 9ca:	49 f4       	brne	.+18     	; 0x9de <ControlLoop+0x6a>
 9cc:	3e de       	rcall	.-900    	; 0x64a <WriteToPC_SPI_test>
 9ce:	80 93 6d 20 	sts	0x206D, r24
 9d2:	90 93 6e 20 	sts	0x206E, r25
 9d6:	10 92 77 21 	sts	0x2177, r1
 9da:	10 92 78 21 	sts	0x2178, r1
 9de:	08 95       	ret

000009e0 <init32MHzClock>:
*********************************************************************************************************** */
void init32MHzClock(void)
{

	//	Enable the 32 MHz internal RC oscillator.
	OSC.CTRL|=OSC_RC32MEN_bm;
 9e0:	e0 e5       	ldi	r30, 0x50	; 80
 9e2:	f0 e0       	ldi	r31, 0x00	; 0
 9e4:	80 81       	ld	r24, Z
 9e6:	82 60       	ori	r24, 0x02	; 2
 9e8:	80 83       	st	Z, r24
	//	The R32MRFY flag is set when the 32 MHz internal RC oscillator is stable
	//	and ready to be used as the System Clock source.
	while(!(OSC.STATUS &OSC_RC32MRDY_bm ));
 9ea:	81 81       	ldd	r24, Z+1	; 0x01
 9ec:	81 ff       	sbrs	r24, 1
 9ee:	fd cf       	rjmp	.-6      	; 0x9ea <init32MHzClock+0xa>
	CCP=CCP_IOREG_gc;
 9f0:	88 ed       	ldi	r24, 0xD8	; 216
 9f2:	84 bf       	out	0x34, r24	; 52
	//	Select the 32MHz RC oscillator for the system clock
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
 9f4:	81 e0       	ldi	r24, 0x01	; 1
 9f6:	80 93 40 00 	sts	0x0040, r24
 9fa:	08 95       	ret

000009fc <intiLoopTimer>:
void intiLoopTimer()
{
	

	// Set the timer prescale.
	TCD0.CTRLA = TC_CLKSEL_DIV4_gc;
 9fc:	e0 e0       	ldi	r30, 0x00	; 0
 9fe:	f9 e0       	ldi	r31, 0x09	; 9
 a00:	83 e0       	ldi	r24, 0x03	; 3
 a02:	80 83       	st	Z, r24

	/* Configure the timer for normal counting. */
	TCD0.CTRLB = TC_WGMODE_NORMAL_gc;
 a04:	11 82       	std	Z+1, r1	; 0x01
	
	//  32MHz / TC_CLKSEL_DIV4_gc
	TCD0.PER = 26666;  //  Need the time to overflow at 300Hz
 a06:	8a e2       	ldi	r24, 0x2A	; 42
 a08:	98 e6       	ldi	r25, 0x68	; 104
 a0a:	86 a3       	std	Z+38, r24	; 0x26
 a0c:	97 a3       	std	Z+39, r25	; 0x27
	
	//TCD0.PER = 60000;
	//Configure timer to generate an interrupt on overflow. */
	TCD0.INTCTRLA = TC_OVFINTLVL_LO_gc;
 a0e:	81 e0       	ldi	r24, 0x01	; 1
 a10:	86 83       	std	Z+6, r24	; 0x06

	/* Enable this interrupt level. */
	PMIC.CTRL |= PMIC_LOLVLEN_bm;
 a12:	e0 ea       	ldi	r30, 0xA0	; 160
 a14:	f0 e0       	ldi	r31, 0x00	; 0
 a16:	82 81       	ldd	r24, Z+2	; 0x02
 a18:	81 60       	ori	r24, 0x01	; 1
 a1a:	82 83       	std	Z+2, r24	; 0x02
 a1c:	08 95       	ret

00000a1e <zeroSensor>:

}


uint8_t zeroSensor()
{
 a1e:	1f 93       	push	r17
 a20:	cf 93       	push	r28
 a22:	df 93       	push	r29
	
	PORTF.OUTCLR = PIN4_bm;
 a24:	c0 ea       	ldi	r28, 0xA0	; 160
 a26:	d6 e0       	ldi	r29, 0x06	; 6
 a28:	10 e1       	ldi	r17, 0x10	; 16
 a2a:	1e 83       	std	Y+6, r17	; 0x06
	//zero mad 0xB0
	
	//uint8_t dummy_read = 0x00;
	//psi = yaw  phi = roll    theta = pitch
	//0x01 0xAC 0x00 0x00 0x00 0x00
	dummy_read = spiIMU_write_read(WRITE_COMMAND);
 a2c:	81 e0       	ldi	r24, 0x01	; 1
 a2e:	24 d1       	rcall	.+584    	; 0xc78 <spiIMU_write_read>
 a30:	80 93 64 20 	sts	0x2064, r24
	dummy_read = spiIMU_write_read(ZERO_GYROS);
 a34:	8c ea       	ldi	r24, 0xAC	; 172
 a36:	20 d1       	rcall	.+576    	; 0xc78 <spiIMU_write_read>
 a38:	80 93 64 20 	sts	0x2064, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 a3c:	80 e0       	ldi	r24, 0x00	; 0
 a3e:	1c d1       	rcall	.+568    	; 0xc78 <spiIMU_write_read>
 a40:	80 93 64 20 	sts	0x2064, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 a44:	80 e0       	ldi	r24, 0x00	; 0
 a46:	18 d1       	rcall	.+560    	; 0xc78 <spiIMU_write_read>
 a48:	80 93 64 20 	sts	0x2064, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 a4c:	80 e0       	ldi	r24, 0x00	; 0
 a4e:	14 d1       	rcall	.+552    	; 0xc78 <spiIMU_write_read>
 a50:	80 93 64 20 	sts	0x2064, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 a54:	80 e0       	ldi	r24, 0x00	; 0
 a56:	10 d1       	rcall	.+544    	; 0xc78 <spiIMU_write_read>
 a58:	80 93 64 20 	sts	0x2064, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 a5c:	8f e8       	ldi	r24, 0x8F	; 143
 a5e:	91 e0       	ldi	r25, 0x01	; 1
 a60:	01 97       	sbiw	r24, 0x01	; 1
 a62:	f1 f7       	brne	.-4      	; 0xa60 <zeroSensor+0x42>
 a64:	00 c0       	rjmp	.+0      	; 0xa66 <zeroSensor+0x48>
 a66:	00 00       	nop
	
	_delay_us(50);
	dummy_read = spiIMU_write_read(WRITE_COMMAND);
 a68:	81 e0       	ldi	r24, 0x01	; 1
 a6a:	06 d1       	rcall	.+524    	; 0xc78 <spiIMU_write_read>
 a6c:	80 93 64 20 	sts	0x2064, r24
	dummy_read = spiIMU_write_read(SET_ACCEL_REF);
 a70:	8f ea       	ldi	r24, 0xAF	; 175
 a72:	02 d1       	rcall	.+516    	; 0xc78 <spiIMU_write_read>
 a74:	80 93 64 20 	sts	0x2064, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 a78:	80 e0       	ldi	r24, 0x00	; 0
 a7a:	fe d0       	rcall	.+508    	; 0xc78 <spiIMU_write_read>
 a7c:	80 93 64 20 	sts	0x2064, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 a80:	80 e0       	ldi	r24, 0x00	; 0
 a82:	fa d0       	rcall	.+500    	; 0xc78 <spiIMU_write_read>
 a84:	80 93 64 20 	sts	0x2064, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 a88:	80 e0       	ldi	r24, 0x00	; 0
 a8a:	f6 d0       	rcall	.+492    	; 0xc78 <spiIMU_write_read>
 a8c:	80 93 64 20 	sts	0x2064, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 a90:	80 e0       	ldi	r24, 0x00	; 0
 a92:	f2 d0       	rcall	.+484    	; 0xc78 <spiIMU_write_read>
 a94:	80 93 64 20 	sts	0x2064, r24
 a98:	8f e8       	ldi	r24, 0x8F	; 143
 a9a:	91 e0       	ldi	r25, 0x01	; 1
 a9c:	01 97       	sbiw	r24, 0x01	; 1
 a9e:	f1 f7       	brne	.-4      	; 0xa9c <zeroSensor+0x7e>
 aa0:	00 c0       	rjmp	.+0      	; 0xaa2 <zeroSensor+0x84>
 aa2:	00 00       	nop
	

	_delay_us(50);
	dummy_read = spiIMU_write_read(WRITE_COMMAND);
 aa4:	81 e0       	ldi	r24, 0x01	; 1
 aa6:	e8 d0       	rcall	.+464    	; 0xc78 <spiIMU_write_read>
 aa8:	80 93 64 20 	sts	0x2064, r24
	dummy_read = spiIMU_write_read(SET_MAG_REF);
 aac:	80 eb       	ldi	r24, 0xB0	; 176
 aae:	e4 d0       	rcall	.+456    	; 0xc78 <spiIMU_write_read>
 ab0:	80 93 64 20 	sts	0x2064, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 ab4:	80 e0       	ldi	r24, 0x00	; 0
 ab6:	e0 d0       	rcall	.+448    	; 0xc78 <spiIMU_write_read>
 ab8:	80 93 64 20 	sts	0x2064, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 abc:	80 e0       	ldi	r24, 0x00	; 0
 abe:	dc d0       	rcall	.+440    	; 0xc78 <spiIMU_write_read>
 ac0:	80 93 64 20 	sts	0x2064, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 ac4:	80 e0       	ldi	r24, 0x00	; 0
 ac6:	d8 d0       	rcall	.+432    	; 0xc78 <spiIMU_write_read>
 ac8:	80 93 64 20 	sts	0x2064, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 acc:	80 e0       	ldi	r24, 0x00	; 0
 ace:	d4 d0       	rcall	.+424    	; 0xc78 <spiIMU_write_read>
 ad0:	80 93 64 20 	sts	0x2064, r24
 ad4:	8f e8       	ldi	r24, 0x8F	; 143
 ad6:	91 e0       	ldi	r25, 0x01	; 1
 ad8:	01 97       	sbiw	r24, 0x01	; 1
 ada:	f1 f7       	brne	.-4      	; 0xad8 <zeroSensor+0xba>
 adc:	00 c0       	rjmp	.+0      	; 0xade <zeroSensor+0xc0>
 ade:	00 00       	nop
	
	_delay_us(50);
	dummy_read = spiIMU_write_read(WRITE_COMMAND);
 ae0:	81 e0       	ldi	r24, 0x01	; 1
 ae2:	ca d0       	rcall	.+404    	; 0xc78 <spiIMU_write_read>
 ae4:	80 93 64 20 	sts	0x2064, r24
	dummy_read = spiIMU_write_read(UM6_RESET_EKF);
 ae8:	8d ea       	ldi	r24, 0xAD	; 173
 aea:	c6 d0       	rcall	.+396    	; 0xc78 <spiIMU_write_read>
 aec:	80 93 64 20 	sts	0x2064, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 af0:	80 e0       	ldi	r24, 0x00	; 0
 af2:	c2 d0       	rcall	.+388    	; 0xc78 <spiIMU_write_read>
 af4:	80 93 64 20 	sts	0x2064, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 af8:	80 e0       	ldi	r24, 0x00	; 0
 afa:	be d0       	rcall	.+380    	; 0xc78 <spiIMU_write_read>
 afc:	80 93 64 20 	sts	0x2064, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 b00:	80 e0       	ldi	r24, 0x00	; 0
 b02:	ba d0       	rcall	.+372    	; 0xc78 <spiIMU_write_read>
 b04:	80 93 64 20 	sts	0x2064, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 b08:	80 e0       	ldi	r24, 0x00	; 0
 b0a:	b6 d0       	rcall	.+364    	; 0xc78 <spiIMU_write_read>
 b0c:	80 93 64 20 	sts	0x2064, r24
	

	PORTF.OUTSET = PIN4_bm;
 b10:	1d 83       	std	Y+5, r17	; 0x05
	
	return 1;
	
}
 b12:	81 e0       	ldi	r24, 0x01	; 1
 b14:	df 91       	pop	r29
 b16:	cf 91       	pop	r28
 b18:	1f 91       	pop	r17
 b1a:	08 95       	ret

00000b1c <initSystem>:
  DISCRIPTION:  Do all the pre control loop set up tasks
*********************************************************************************************************** */
uint8_t initSystem()
{

	sei();
 b1c:	78 94       	sei
	initUART();
 b1e:	36 d1       	rcall	.+620    	; 0xd8c <initUART>
	spi_set_up();
 b20:	b8 d0       	rcall	.+368    	; 0xc92 <spi_set_up>
	intPID_gains();
 b22:	86 dc       	rcall	.-1780   	; 0x430 <intPID_gains>
	zeroSensor();
 b24:	7c df       	rcall	.-264    	; 0xa1e <zeroSensor>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 b26:	2f ef       	ldi	r18, 0xFF	; 255
 b28:	8f e4       	ldi	r24, 0x4F	; 79
 b2a:	93 ec       	ldi	r25, 0xC3	; 195
 b2c:	21 50       	subi	r18, 0x01	; 1
 b2e:	80 40       	sbci	r24, 0x00	; 0
 b30:	90 40       	sbci	r25, 0x00	; 0
 b32:	e1 f7       	brne	.-8      	; 0xb2c <initSystem+0x10>
 b34:	00 c0       	rjmp	.+0      	; 0xb36 <initSystem+0x1a>
 b36:	00 00       	nop
	_delay_ms(2000);
	zeroSensor();
 b38:	72 df       	rcall	.-284    	; 0xa1e <zeroSensor>
	yawAxis.trim = 0;
 b3a:	10 92 75 21 	sts	0x2175, r1
 b3e:	10 92 76 21 	sts	0x2176, r1
	rollAxis.trim = 0;
 b42:	10 92 5f 20 	sts	0x205F, r1
 b46:	10 92 60 20 	sts	0x2060, r1
	pitchAxis.trim = 0;
 b4a:	10 92 c1 20 	sts	0x20C1, r1
 b4e:	10 92 c2 20 	sts	0x20C2, r1
	return 1;

}
 b52:	81 e0       	ldi	r24, 0x01	; 1
 b54:	08 95       	ret

00000b56 <main>:
OUTPUT:
DISCRIPTION: Main is used for set up and then just an infinite loop
*********************************************************************************************************** */
int main()
{
	PORTA.DIRSET = 0x0F;
 b56:	8f e0       	ldi	r24, 0x0F	; 15
 b58:	e0 e0       	ldi	r30, 0x00	; 0
 b5a:	f6 e0       	ldi	r31, 0x06	; 6
 b5c:	81 83       	std	Z+1, r24	; 0x01
	systemState = SYSTEM_STATE_STARTUP;
 b5e:	8a ea       	ldi	r24, 0xAA	; 170
 b60:	80 93 63 20 	sts	0x2063, r24
	init32MHzClock();
 b64:	3d df       	rcall	.-390    	; 0x9e0 <init32MHzClock>
	initSystem();
 b66:	da df       	rcall	.-76     	; 0xb1c <initSystem>
	intiLoopTimer();
 b68:	49 df       	rcall	.-366    	; 0x9fc <intiLoopTimer>

	
	while(1)
	{
		nop();
 b6a:	00 00       	nop
 b6c:	fe cf       	rjmp	.-4      	; 0xb6a <main+0x14>

00000b6e <State>:
DISCRIPTION:   Determine what to do based on systemState.  Used to initializes and arm the quad.
*********************************************************************************************************** */
void State()
{
	
	LEDPORT.OUTTGL = PIN0_bm;
 b6e:	81 e0       	ldi	r24, 0x01	; 1
 b70:	e0 e0       	ldi	r30, 0x00	; 0
 b72:	f6 e0       	ldi	r31, 0x06	; 6
 b74:	87 83       	std	Z+7, r24	; 0x07
	

	switch(systemState)
 b76:	80 91 63 20 	lds	r24, 0x2063
 b7a:	82 30       	cpi	r24, 0x02	; 2
 b7c:	71 f1       	breq	.+92     	; 0xbda <State+0x6c>
 b7e:	18 f4       	brcc	.+6      	; 0xb86 <State+0x18>
 b80:	81 30       	cpi	r24, 0x01	; 1
 b82:	a9 f5       	brne	.+106    	; 0xbee <State+0x80>
 b84:	0a c0       	rjmp	.+20     	; 0xb9a <State+0x2c>
 b86:	84 30       	cpi	r24, 0x04	; 4
 b88:	69 f1       	breq	.+90     	; 0xbe4 <State+0x76>
 b8a:	8a 3a       	cpi	r24, 0xAA	; 170
 b8c:	81 f5       	brne	.+96     	; 0xbee <State+0x80>
	{
		case SYSTEM_STATE_STARTUP:
			
			
			if (initSystem() ==  1)
 b8e:	c6 df       	rcall	.-116    	; 0xb1c <initSystem>
 b90:	81 30       	cpi	r24, 0x01	; 1
 b92:	69 f5       	brne	.+90     	; 0xbee <State+0x80>
			{
				systemState = SYSTEM_ZERO;
 b94:	80 93 63 20 	sts	0x2063, r24
 b98:	08 95       	ret
 b9a:	2f ef       	ldi	r18, 0xFF	; 255
 b9c:	83 ec       	ldi	r24, 0xC3	; 195
 b9e:	99 e0       	ldi	r25, 0x09	; 9
 ba0:	21 50       	subi	r18, 0x01	; 1
 ba2:	80 40       	sbci	r24, 0x00	; 0
 ba4:	90 40       	sbci	r25, 0x00	; 0
 ba6:	e1 f7       	brne	.-8      	; 0xba0 <State+0x32>
 ba8:	00 c0       	rjmp	.+0      	; 0xbaa <State+0x3c>
 baa:	00 00       	nop

			//LEDPORT.OUTTGL = PIN1_bm;
			// read commands from the PC and zero the system as necessary
			// PC transaction, read in command and send out sensor data
			_delay_ms(100);
			UpdateEulerAngles();
 bac:	48 de       	rcall	.-880    	; 0x83e <UpdateEulerAngles>
			
			LEDPORT.OUTSET = PIN1_bm;
 bae:	82 e0       	ldi	r24, 0x02	; 2
 bb0:	e0 e0       	ldi	r30, 0x00	; 0
 bb2:	f6 e0       	ldi	r31, 0x06	; 6
 bb4:	85 83       	std	Z+5, r24	; 0x05
			//  get the last command sent form the PC, either zero the IMU or get ready to arm the system
			if ((cmdBytes = WriteToPC_SPI()) == SYSTEM_ZERO)
 bb6:	90 dc       	rcall	.-1760   	; 0x4d8 <WriteToPC_SPI>
 bb8:	80 93 6d 20 	sts	0x206D, r24
 bbc:	90 93 6e 20 	sts	0x206E, r25
 bc0:	01 97       	sbiw	r24, 0x01	; 1
 bc2:	09 f4       	brne	.+2      	; 0xbc6 <State+0x58>
			{
				
	
				zeroSensor();
 bc4:	2c df       	rcall	.-424    	; 0xa1e <zeroSensor>
				//LEDPORT.OUTCLR = PIN1_bm;
			}

			if (cmdBytes == SYSTEM_ARM)
 bc6:	80 91 6d 20 	lds	r24, 0x206D
 bca:	90 91 6e 20 	lds	r25, 0x206E
 bce:	02 97       	sbiw	r24, 0x02	; 2
 bd0:	71 f4       	brne	.+28     	; 0xbee <State+0x80>
			{
				systemState = SYSTEM_ARM;
 bd2:	82 e0       	ldi	r24, 0x02	; 2
 bd4:	80 93 63 20 	sts	0x2063, r24
 bd8:	08 95       	ret
			}

		break;

		case SYSTEM_ARM:
			initPWM();
 bda:	af db       	rcall	.-2210   	; 0x33a <initPWM>
			systemState = SYSTEM_STATE_FLY;
 bdc:	84 e0       	ldi	r24, 0x04	; 4
 bde:	80 93 63 20 	sts	0x2063, r24
			

		break;
 be2:	08 95       	ret

		case SYSTEM_STATE_FLY:
			// run the control loop
			LEDPORT.OUTTGL = PIN1_bm;
 be4:	82 e0       	ldi	r24, 0x02	; 2
 be6:	e0 e0       	ldi	r30, 0x00	; 0
 be8:	f6 e0       	ldi	r31, 0x06	; 6
 bea:	87 83       	std	Z+7, r24	; 0x07
		
			ControlLoop();
 bec:	c3 ce       	rjmp	.-634    	; 0x974 <ControlLoop>
 bee:	08 95       	ret

00000bf0 <__vector_77>:
  INPUT:
  OUTPUT:
  DISCRIPTION:   Interrupt vector
*********************************************************************************************************** */
ISR(TCD0_OVF_vect)
{
 bf0:	1f 92       	push	r1
 bf2:	0f 92       	push	r0
 bf4:	0f b6       	in	r0, 0x3f	; 63
 bf6:	0f 92       	push	r0
 bf8:	11 24       	eor	r1, r1
 bfa:	08 b6       	in	r0, 0x38	; 56
 bfc:	0f 92       	push	r0
 bfe:	18 be       	out	0x38, r1	; 56
 c00:	09 b6       	in	r0, 0x39	; 57
 c02:	0f 92       	push	r0
 c04:	19 be       	out	0x39, r1	; 57
 c06:	0b b6       	in	r0, 0x3b	; 59
 c08:	0f 92       	push	r0
 c0a:	1b be       	out	0x3b, r1	; 59
 c0c:	2f 93       	push	r18
 c0e:	3f 93       	push	r19
 c10:	4f 93       	push	r20
 c12:	5f 93       	push	r21
 c14:	6f 93       	push	r22
 c16:	7f 93       	push	r23
 c18:	8f 93       	push	r24
 c1a:	9f 93       	push	r25
 c1c:	af 93       	push	r26
 c1e:	bf 93       	push	r27
 c20:	ef 93       	push	r30
 c22:	ff 93       	push	r31
	//LEDPORT.OUTTGL = PIN0_bm;
	TCD0.CNT = 0;
 c24:	e0 e0       	ldi	r30, 0x00	; 0
 c26:	f9 e0       	ldi	r31, 0x09	; 9
 c28:	10 a2       	std	Z+32, r1	; 0x20
 c2a:	11 a2       	std	Z+33, r1	; 0x21
	State();
 c2c:	a0 df       	rcall	.-192    	; 0xb6e <State>

}
 c2e:	ff 91       	pop	r31
 c30:	ef 91       	pop	r30
 c32:	bf 91       	pop	r27
 c34:	af 91       	pop	r26
 c36:	9f 91       	pop	r25
 c38:	8f 91       	pop	r24
 c3a:	7f 91       	pop	r23
 c3c:	6f 91       	pop	r22
 c3e:	5f 91       	pop	r21
 c40:	4f 91       	pop	r20
 c42:	3f 91       	pop	r19
 c44:	2f 91       	pop	r18
 c46:	0f 90       	pop	r0
 c48:	0b be       	out	0x3b, r0	; 59
 c4a:	0f 90       	pop	r0
 c4c:	09 be       	out	0x39, r0	; 57
 c4e:	0f 90       	pop	r0
 c50:	08 be       	out	0x38, r0	; 56
 c52:	0f 90       	pop	r0
 c54:	0f be       	out	0x3f, r0	; 63
 c56:	0f 90       	pop	r0
 c58:	1f 90       	pop	r1
 c5a:	18 95       	reti

00000c5c <spiPC_write_read>:
	SPIC.DATA = spi_data;
	while(!(SPIC.STATUS & SPI_IF_bm)); // Wait until the data transfer is complete
	_delay_us(6);
	return SPIC.DATA;

}
 c5c:	e0 ec       	ldi	r30, 0xC0	; 192
 c5e:	fa e0       	ldi	r31, 0x0A	; 10
 c60:	83 83       	std	Z+3, r24	; 0x03
 c62:	82 81       	ldd	r24, Z+2	; 0x02
 c64:	88 23       	and	r24, r24
 c66:	ec f7       	brge	.-6      	; 0xc62 <spiPC_write_read+0x6>
 c68:	8a e2       	ldi	r24, 0x2A	; 42
 c6a:	8a 95       	dec	r24
 c6c:	f1 f7       	brne	.-4      	; 0xc6a <spiPC_write_read+0xe>
 c6e:	00 c0       	rjmp	.+0      	; 0xc70 <spiPC_write_read+0x14>
 c70:	e0 ec       	ldi	r30, 0xC0	; 192
 c72:	fa e0       	ldi	r31, 0x0A	; 10
 c74:	83 81       	ldd	r24, Z+3	; 0x03
 c76:	08 95       	ret

00000c78 <spiIMU_write_read>:
 c78:	e0 ec       	ldi	r30, 0xC0	; 192
 c7a:	fb e0       	ldi	r31, 0x0B	; 11
 c7c:	83 83       	std	Z+3, r24	; 0x03
 c7e:	82 81       	ldd	r24, Z+2	; 0x02
 c80:	88 23       	and	r24, r24
 c82:	ec f7       	brge	.-6      	; 0xc7e <spiIMU_write_read+0x6>
 c84:	80 e2       	ldi	r24, 0x20	; 32
 c86:	8a 95       	dec	r24
 c88:	f1 f7       	brne	.-4      	; 0xc86 <spiIMU_write_read+0xe>
 c8a:	e0 ec       	ldi	r30, 0xC0	; 192
 c8c:	fb e0       	ldi	r31, 0x0B	; 11
 c8e:	83 81       	ldd	r24, Z+3	; 0x03
 c90:	08 95       	ret

00000c92 <spi_set_up>:
DISCRIPTION:    Initialize SPI master on port F for the IMU communication.
			    Initialize SPI master on port F for the PC communication
*********************************************************************************************************** */
	
void spi_set_up()
{
 c92:	af 92       	push	r10
 c94:	cf 92       	push	r12
 c96:	ef 92       	push	r14
 c98:	0f 93       	push	r16
 c9a:	cf 93       	push	r28
 c9c:	df 93       	push	r29
	///* Initialize SPI master on port F for the IMU communication. */
	///* Init SS pin as output with wired AND and pull-up. */
	////*************************************************************
	PORTF.DIRSET = PIN4_bm;
 c9e:	e0 ea       	ldi	r30, 0xA0	; 160
 ca0:	f6 e0       	ldi	r31, 0x06	; 6
 ca2:	c0 e1       	ldi	r28, 0x10	; 16
 ca4:	c1 83       	std	Z+1, r28	; 0x01
	PORTF.PIN4CTRL = PORT_OPC_WIREDANDPULL_gc;
 ca6:	d8 e3       	ldi	r29, 0x38	; 56
 ca8:	d4 8b       	std	Z+20, r29	; 0x14

	/* Set SS output to high. (No slave addressed). */
	PORTF.OUTSET = PIN4_bm;
 caa:	c5 83       	std	Z+5, r28	; 0x05

	/* Initialize SPI master on port F for the IMU communication. */
	SPI_MasterInit(&spiMasterF,
 cac:	0f 2e       	mov	r0, r31
 cae:	f3 e0       	ldi	r31, 0x03	; 3
 cb0:	af 2e       	mov	r10, r31
 cb2:	f0 2d       	mov	r31, r0
 cb4:	c1 2c       	mov	r12, r1
 cb6:	e1 2c       	mov	r14, r1
 cb8:	00 e0       	ldi	r16, 0x00	; 0
 cba:	20 e0       	ldi	r18, 0x00	; 0
 cbc:	40 ea       	ldi	r20, 0xA0	; 160
 cbe:	56 e0       	ldi	r21, 0x06	; 6
 cc0:	60 ec       	ldi	r22, 0xC0	; 192
 cc2:	7b e0       	ldi	r23, 0x0B	; 11
 cc4:	8d e7       	ldi	r24, 0x7D	; 125
 cc6:	91 e2       	ldi	r25, 0x21	; 33
 cc8:	31 d0       	rcall	.+98     	; 0xd2c <SPI_MasterInit>
		SPI_MODE_0_gc,							//The UM6 SPI clock (SCK) is active high, with data clocked in on the first rising edge1
		SPI_INTLVL_OFF_gc,
		false,									// false to double clock mode
		SPI_PRESCALER_DIV128_gc);					//32MHz /128 = 250kHz  MAX rate is 400kHz but there is not prescaler

		SPIF.DATA = 0x00;						// init SPI data register
 cca:	e0 ec       	ldi	r30, 0xC0	; 192
 ccc:	fb e0       	ldi	r31, 0x0B	; 11
 cce:	13 82       	std	Z+3, r1	; 0x03
		
		
			///* Initialize SPI master on port F for the IMU communication. */
	///* Init SS pin as output with wired AND and pull-up. */
	////*************************************************************
	PORTC.DIRSET = PIN4_bm;
 cd0:	e0 e4       	ldi	r30, 0x40	; 64
 cd2:	f6 e0       	ldi	r31, 0x06	; 6
 cd4:	c1 83       	std	Z+1, r28	; 0x01
	PORTC.PIN4CTRL = PORT_OPC_WIREDANDPULL_gc;
 cd6:	d4 8b       	std	Z+20, r29	; 0x14

	/* Set SS output to high. (No slave addressed). */
	PORTC.OUTSET = PIN4_bm;
 cd8:	c5 83       	std	Z+5, r28	; 0x05

	/* Initialize SPI master on port F for the IMU communication. */
	SPI_MasterInit(&spiMasterC,
 cda:	68 94       	set
 cdc:	aa 24       	eor	r10, r10
 cde:	a1 f8       	bld	r10, 1
 ce0:	20 e0       	ldi	r18, 0x00	; 0
 ce2:	40 e4       	ldi	r20, 0x40	; 64
 ce4:	56 e0       	ldi	r21, 0x06	; 6
 ce6:	60 ec       	ldi	r22, 0xC0	; 192
 ce8:	78 e0       	ldi	r23, 0x08	; 8
 cea:	84 e8       	ldi	r24, 0x84	; 132
 cec:	91 e2       	ldi	r25, 0x21	; 33
 cee:	1e d0       	rcall	.+60     	; 0xd2c <SPI_MasterInit>
		SPI_MODE_0_gc,							//The UM6 SPI clock (SCK) is active high, with data clocked in on the first rising edge1
		SPI_INTLVL_OFF_gc,
		false,									// false to double clock mode
		SPI_PRESCALER_DIV64_gc);				//32MHz /128 = 250kHz  MAX rate is 400kHz but there is not prescaler

		SPIC.DATA = 0x00;						// init SPI data register
 cf0:	e0 ec       	ldi	r30, 0xC0	; 192
 cf2:	f8 e0       	ldi	r31, 0x08	; 8
 cf4:	13 82       	std	Z+3, r1	; 0x03
	
		
		/* Initialize SPI master on port F for the PC communication */
		//*************************************************************
		/* Init SS pin as output with wired AND and pull-up. */
		PORTE.DIRSET = PIN4_bm;
 cf6:	e0 e8       	ldi	r30, 0x80	; 128
 cf8:	f6 e0       	ldi	r31, 0x06	; 6
 cfa:	c1 83       	std	Z+1, r28	; 0x01
		PORTE.PIN4CTRL = PORT_OPC_WIREDANDPULL_gc;
 cfc:	d4 8b       	std	Z+20, r29	; 0x14

		/* Set SS output to high. (No slave addressed). */
		PORTE.OUTSET = PIN4_bm;
 cfe:	c5 83       	std	Z+5, r28	; 0x05

		SPI_MasterInit(&spiMasterE,
 d00:	0f 2e       	mov	r0, r31
 d02:	f3 e0       	ldi	r31, 0x03	; 3
 d04:	af 2e       	mov	r10, r31
 d06:	f0 2d       	mov	r31, r0
 d08:	20 e0       	ldi	r18, 0x00	; 0
 d0a:	40 e8       	ldi	r20, 0x80	; 128
 d0c:	56 e0       	ldi	r21, 0x06	; 6
 d0e:	60 ec       	ldi	r22, 0xC0	; 192
 d10:	7a e0       	ldi	r23, 0x0A	; 10
 d12:	8b e8       	ldi	r24, 0x8B	; 139
 d14:	91 e2       	ldi	r25, 0x21	; 33
 d16:	0a d0       	rcall	.+20     	; 0xd2c <SPI_MasterInit>
		false,
		SPI_MODE_0_gc,							//The UM6 SPI clock (SCK) is active high, with data clocked in on the first rising edge1
		SPI_INTLVL_OFF_gc,
		false,									// false to double clock mode
		SPI_PRESCALER_DIV128_gc);				//32MHz /64 = 500,000 bps
		SPIE.DATA = 0x00;						// init SPI data register
 d18:	e0 ec       	ldi	r30, 0xC0	; 192
 d1a:	fa e0       	ldi	r31, 0x0A	; 10
 d1c:	13 82       	std	Z+3, r1	; 0x03

}
 d1e:	df 91       	pop	r29
 d20:	cf 91       	pop	r28
 d22:	0f 91       	pop	r16
 d24:	ef 90       	pop	r14
 d26:	cf 90       	pop	r12
 d28:	af 90       	pop	r10
 d2a:	08 95       	ret

00000d2c <SPI_MasterInit>:
                    bool lsbFirst,
                    SPI_MODE_t mode,
                    SPI_INTLVL_t intLevel,
                    bool clk2x,
                    SPI_PRESCALER_t clockDivision)
{
 d2c:	af 92       	push	r10
 d2e:	cf 92       	push	r12
 d30:	ef 92       	push	r14
 d32:	0f 93       	push	r16
 d34:	fc 01       	movw	r30, r24
	spi->module         = module;
 d36:	60 83       	st	Z, r22
 d38:	71 83       	std	Z+1, r23	; 0x01
	spi->port           = port;
 d3a:	42 83       	std	Z+2, r20	; 0x02
 d3c:	53 83       	std	Z+3, r21	; 0x03
	spi->interrupted    = false;
 d3e:	14 82       	std	Z+4, r1	; 0x04

	spi->module->CTRL   = clockDivision |                  /* SPI prescaler. */
 d40:	cc 20       	and	r12, r12
 d42:	11 f0       	breq	.+4      	; 0xd48 <SPI_MasterInit+0x1c>
 d44:	90 e8       	ldi	r25, 0x80	; 128
 d46:	01 c0       	rjmp	.+2      	; 0xd4a <SPI_MasterInit+0x1e>
 d48:	90 e0       	ldi	r25, 0x00	; 0
 d4a:	22 23       	and	r18, r18
 d4c:	11 f0       	breq	.+4      	; 0xd52 <SPI_MasterInit+0x26>
 d4e:	80 e2       	ldi	r24, 0x20	; 32
 d50:	01 c0       	rjmp	.+2      	; 0xd54 <SPI_MasterInit+0x28>
 d52:	80 e0       	ldi	r24, 0x00	; 0
 d54:	00 65       	ori	r16, 0x50	; 80
 d56:	0a 29       	or	r16, r10
 d58:	09 2b       	or	r16, r25
 d5a:	08 2b       	or	r16, r24
 d5c:	db 01       	movw	r26, r22
 d5e:	0c 93       	st	X, r16
	                      (lsbFirst ? SPI_DORD_bm  : 0) |  /* Data order. */
	                      SPI_MASTER_bm |                  /* SPI master. */
	                      mode;                            /* SPI mode. */

	/* Interrupt level. */
	spi->module->INTCTRL = intLevel;
 d60:	a0 81       	ld	r26, Z
 d62:	b1 81       	ldd	r27, Z+1	; 0x01
 d64:	11 96       	adiw	r26, 0x01	; 1
 d66:	ec 92       	st	X, r14

	/* No assigned data packet. */
	spi->dataPacket = NULL;
 d68:	15 82       	std	Z+5, r1	; 0x05
 d6a:	16 82       	std	Z+6, r1	; 0x06

 	/* MOSI and SCK as output. */
	spi->port->DIRSET  = SPI_MOSI_bm | SPI_SCK_bm;
 d6c:	02 80       	ldd	r0, Z+2	; 0x02
 d6e:	f3 81       	ldd	r31, Z+3	; 0x03
 d70:	e0 2d       	mov	r30, r0
 d72:	80 ea       	ldi	r24, 0xA0	; 160
 d74:	81 83       	std	Z+1, r24	; 0x01
}
 d76:	0f 91       	pop	r16
 d78:	ef 90       	pop	r14
 d7a:	cf 90       	pop	r12
 d7c:	af 90       	pop	r10
 d7e:	08 95       	ret

00000d80 <TC0_ConfigClockSource>:
 *  \param tc              Timer/Counter module instance.
 *  \param clockSelection  Timer/Counter clock source setting.
 */
void TC0_ConfigClockSource( volatile TC0_t * tc, TC_CLKSEL_t clockSelection )
{
	tc->CTRLA = ( tc->CTRLA & ~TC0_CLKSEL_gm ) | clockSelection;
 d80:	fc 01       	movw	r30, r24
 d82:	20 81       	ld	r18, Z
 d84:	20 7f       	andi	r18, 0xF0	; 240
 d86:	62 2b       	or	r22, r18
 d88:	60 83       	st	Z, r22
 d8a:	08 95       	ret

00000d8c <initUART>:
void initUART()
{
	
	//  XBEE on USARTD1
	/* PD6 (RXD1) input*/
	PORTD.DIRCLR = PIN6_bm;
 d8c:	e0 e6       	ldi	r30, 0x60	; 96
 d8e:	f6 e0       	ldi	r31, 0x06	; 6
 d90:	90 e4       	ldi	r25, 0x40	; 64
 d92:	92 83       	std	Z+2, r25	; 0x02
	/* PD7 (TXD1) as output. */
	PORTD.DIRSET = PIN7_bm;
 d94:	80 e8       	ldi	r24, 0x80	; 128
 d96:	81 83       	std	Z+1, r24	; 0x01
	
	
	//  IMU on USARTC1
	/* PC6 (RXD1) input*/
	PORTC.DIRCLR = PIN6_bm;
 d98:	e0 e4       	ldi	r30, 0x40	; 64
 d9a:	f6 e0       	ldi	r31, 0x06	; 6
 d9c:	92 83       	std	Z+2, r25	; 0x02
	/* PD7 (TXD1) as output. */
	PORTC.DIRSET = PIN7_bm;
 d9e:	81 83       	std	Z+1, r24	; 0x01
	
	USART_Format_Set(&XBEE_USART, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, true);
 da0:	e0 eb       	ldi	r30, 0xB0	; 176
 da2:	f9 e0       	ldi	r31, 0x09	; 9
 da4:	8b e0       	ldi	r24, 0x0B	; 11
 da6:	85 83       	std	Z+5, r24	; 0x05
	USART_Baudrate_Set(&XBEE_USART, 1047 , -6);			// set for 32MHZ and 115200
 da8:	87 e1       	ldi	r24, 0x17	; 23
 daa:	86 83       	std	Z+6, r24	; 0x06
 dac:	84 ea       	ldi	r24, 0xA4	; 164
 dae:	87 83       	std	Z+7, r24	; 0x07
	
	/* Enable both RX and TX. */
	USART_Rx_Enable(&XBEE_USART);
 db0:	84 81       	ldd	r24, Z+4	; 0x04
 db2:	80 61       	ori	r24, 0x10	; 16
 db4:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(&XBEE_USART);
 db6:	84 81       	ldd	r24, Z+4	; 0x04
 db8:	88 60       	ori	r24, 0x08	; 8
 dba:	84 83       	std	Z+4, r24	; 0x04
 dbc:	08 95       	ret

00000dbe <put_USART_PC_char>:
void put_USART_PC_char(uint8_t sendThis)
{

	do{

	}while(!USART_IsTXDataRegisterEmpty(&XBEE_USART));
 dbe:	e0 eb       	ldi	r30, 0xB0	; 176
 dc0:	f9 e0       	ldi	r31, 0x09	; 9
 dc2:	91 81       	ldd	r25, Z+1	; 0x01
 dc4:	95 ff       	sbrs	r25, 5
 dc6:	fd cf       	rjmp	.-6      	; 0xdc2 <put_USART_PC_char+0x4>
	USART_PutChar(&XBEE_USART, sendThis);
 dc8:	80 93 b0 09 	sts	0x09B0, r24
 dcc:	08 95       	ret

00000dce <sendData_int16_t>:
}


//send 16 bit data on USART, 2 bytes
void sendData_int16_t(int16_t sendthis)
{
 dce:	cf 93       	push	r28
 dd0:	df 93       	push	r29
 dd2:	ec 01       	movw	r28, r24
	put_USART_PC_char( MASK_TOP_BYTE & (sendthis >> 8));
 dd4:	8d 2f       	mov	r24, r29
 dd6:	90 e0       	ldi	r25, 0x00	; 0
 dd8:	f2 df       	rcall	.-28     	; 0xdbe <put_USART_PC_char>
	put_USART_PC_char (MASK_TOP_BYTE & sendthis);
 dda:	ce 01       	movw	r24, r28
 ddc:	99 27       	eor	r25, r25
 dde:	ef df       	rcall	.-34     	; 0xdbe <put_USART_PC_char>
}
 de0:	df 91       	pop	r29
 de2:	cf 91       	pop	r28
 de4:	08 95       	ret

00000de6 <__divmodhi4>:
 de6:	97 fb       	bst	r25, 7
 de8:	07 2e       	mov	r0, r23
 dea:	16 f4       	brtc	.+4      	; 0xdf0 <__divmodhi4+0xa>
 dec:	00 94       	com	r0
 dee:	06 d0       	rcall	.+12     	; 0xdfc <__divmodhi4_neg1>
 df0:	77 fd       	sbrc	r23, 7
 df2:	08 d0       	rcall	.+16     	; 0xe04 <__divmodhi4_neg2>
 df4:	0b d0       	rcall	.+22     	; 0xe0c <__udivmodhi4>
 df6:	07 fc       	sbrc	r0, 7
 df8:	05 d0       	rcall	.+10     	; 0xe04 <__divmodhi4_neg2>
 dfa:	3e f4       	brtc	.+14     	; 0xe0a <__divmodhi4_exit>

00000dfc <__divmodhi4_neg1>:
 dfc:	90 95       	com	r25
 dfe:	81 95       	neg	r24
 e00:	9f 4f       	sbci	r25, 0xFF	; 255
 e02:	08 95       	ret

00000e04 <__divmodhi4_neg2>:
 e04:	70 95       	com	r23
 e06:	61 95       	neg	r22
 e08:	7f 4f       	sbci	r23, 0xFF	; 255

00000e0a <__divmodhi4_exit>:
 e0a:	08 95       	ret

00000e0c <__udivmodhi4>:
 e0c:	aa 1b       	sub	r26, r26
 e0e:	bb 1b       	sub	r27, r27
 e10:	51 e1       	ldi	r21, 0x11	; 17
 e12:	07 c0       	rjmp	.+14     	; 0xe22 <__udivmodhi4_ep>

00000e14 <__udivmodhi4_loop>:
 e14:	aa 1f       	adc	r26, r26
 e16:	bb 1f       	adc	r27, r27
 e18:	a6 17       	cp	r26, r22
 e1a:	b7 07       	cpc	r27, r23
 e1c:	10 f0       	brcs	.+4      	; 0xe22 <__udivmodhi4_ep>
 e1e:	a6 1b       	sub	r26, r22
 e20:	b7 0b       	sbc	r27, r23

00000e22 <__udivmodhi4_ep>:
 e22:	88 1f       	adc	r24, r24
 e24:	99 1f       	adc	r25, r25
 e26:	5a 95       	dec	r21
 e28:	a9 f7       	brne	.-22     	; 0xe14 <__udivmodhi4_loop>
 e2a:	80 95       	com	r24
 e2c:	90 95       	com	r25
 e2e:	bc 01       	movw	r22, r24
 e30:	cd 01       	movw	r24, r26
 e32:	08 95       	ret

00000e34 <_exit>:
 e34:	f8 94       	cli

00000e36 <__stop_program>:
 e36:	ff cf       	rjmp	.-2      	; 0xe36 <__stop_program>
