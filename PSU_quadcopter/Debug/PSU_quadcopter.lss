
PSU_quadcopter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c86  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00000c86  00000d1a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000013c  00802000  00802000  00000d1a  2**0
                  ALLOC
  3 .stab         00001698  00000000  00000000  00000d1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000592  00000000  00000000  000023b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00002946  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000002f0  00000000  00000000  00002975  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004894  00000000  00000000  00002c65  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000d5b  00000000  00000000  000074f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001ba7  00000000  00000000  00008254  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000784  00000000  00000000  00009dfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000019c3  00000000  00000000  0000a580  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000017d6  00000000  00000000  0000bf43  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000270  00000000  00000000  0000d719  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	f9 c0       	rjmp	.+498    	; 0x1f4 <__ctors_end>
   2:	00 00       	nop
   4:	1b c1       	rjmp	.+566    	; 0x23c <__bad_interrupt>
   6:	00 00       	nop
   8:	19 c1       	rjmp	.+562    	; 0x23c <__bad_interrupt>
   a:	00 00       	nop
   c:	17 c1       	rjmp	.+558    	; 0x23c <__bad_interrupt>
   e:	00 00       	nop
  10:	15 c1       	rjmp	.+554    	; 0x23c <__bad_interrupt>
  12:	00 00       	nop
  14:	13 c1       	rjmp	.+550    	; 0x23c <__bad_interrupt>
  16:	00 00       	nop
  18:	11 c1       	rjmp	.+546    	; 0x23c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	0f c1       	rjmp	.+542    	; 0x23c <__bad_interrupt>
  1e:	00 00       	nop
  20:	0d c1       	rjmp	.+538    	; 0x23c <__bad_interrupt>
  22:	00 00       	nop
  24:	0b c1       	rjmp	.+534    	; 0x23c <__bad_interrupt>
  26:	00 00       	nop
  28:	09 c1       	rjmp	.+530    	; 0x23c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	07 c1       	rjmp	.+526    	; 0x23c <__bad_interrupt>
  2e:	00 00       	nop
  30:	05 c1       	rjmp	.+522    	; 0x23c <__bad_interrupt>
  32:	00 00       	nop
  34:	03 c1       	rjmp	.+518    	; 0x23c <__bad_interrupt>
  36:	00 00       	nop
  38:	01 c1       	rjmp	.+514    	; 0x23c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	ff c0       	rjmp	.+510    	; 0x23c <__bad_interrupt>
  3e:	00 00       	nop
  40:	fd c0       	rjmp	.+506    	; 0x23c <__bad_interrupt>
  42:	00 00       	nop
  44:	fb c0       	rjmp	.+502    	; 0x23c <__bad_interrupt>
  46:	00 00       	nop
  48:	f9 c0       	rjmp	.+498    	; 0x23c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	f7 c0       	rjmp	.+494    	; 0x23c <__bad_interrupt>
  4e:	00 00       	nop
  50:	f5 c0       	rjmp	.+490    	; 0x23c <__bad_interrupt>
  52:	00 00       	nop
  54:	f3 c0       	rjmp	.+486    	; 0x23c <__bad_interrupt>
  56:	00 00       	nop
  58:	f1 c0       	rjmp	.+482    	; 0x23c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	ef c0       	rjmp	.+478    	; 0x23c <__bad_interrupt>
  5e:	00 00       	nop
  60:	ed c0       	rjmp	.+474    	; 0x23c <__bad_interrupt>
  62:	00 00       	nop
  64:	eb c0       	rjmp	.+470    	; 0x23c <__bad_interrupt>
  66:	00 00       	nop
  68:	e9 c0       	rjmp	.+466    	; 0x23c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	e7 c0       	rjmp	.+462    	; 0x23c <__bad_interrupt>
  6e:	00 00       	nop
  70:	e5 c0       	rjmp	.+458    	; 0x23c <__bad_interrupt>
  72:	00 00       	nop
  74:	e3 c0       	rjmp	.+454    	; 0x23c <__bad_interrupt>
  76:	00 00       	nop
  78:	e1 c0       	rjmp	.+450    	; 0x23c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	df c0       	rjmp	.+446    	; 0x23c <__bad_interrupt>
  7e:	00 00       	nop
  80:	dd c0       	rjmp	.+442    	; 0x23c <__bad_interrupt>
  82:	00 00       	nop
  84:	db c0       	rjmp	.+438    	; 0x23c <__bad_interrupt>
  86:	00 00       	nop
  88:	d9 c0       	rjmp	.+434    	; 0x23c <__bad_interrupt>
  8a:	00 00       	nop
  8c:	d7 c0       	rjmp	.+430    	; 0x23c <__bad_interrupt>
  8e:	00 00       	nop
  90:	d5 c0       	rjmp	.+426    	; 0x23c <__bad_interrupt>
  92:	00 00       	nop
  94:	d3 c0       	rjmp	.+422    	; 0x23c <__bad_interrupt>
  96:	00 00       	nop
  98:	d1 c0       	rjmp	.+418    	; 0x23c <__bad_interrupt>
  9a:	00 00       	nop
  9c:	cf c0       	rjmp	.+414    	; 0x23c <__bad_interrupt>
  9e:	00 00       	nop
  a0:	cd c0       	rjmp	.+410    	; 0x23c <__bad_interrupt>
  a2:	00 00       	nop
  a4:	cb c0       	rjmp	.+406    	; 0x23c <__bad_interrupt>
  a6:	00 00       	nop
  a8:	c9 c0       	rjmp	.+402    	; 0x23c <__bad_interrupt>
  aa:	00 00       	nop
  ac:	c7 c0       	rjmp	.+398    	; 0x23c <__bad_interrupt>
  ae:	00 00       	nop
  b0:	c5 c0       	rjmp	.+394    	; 0x23c <__bad_interrupt>
  b2:	00 00       	nop
  b4:	c3 c0       	rjmp	.+390    	; 0x23c <__bad_interrupt>
  b6:	00 00       	nop
  b8:	c1 c0       	rjmp	.+386    	; 0x23c <__bad_interrupt>
  ba:	00 00       	nop
  bc:	bf c0       	rjmp	.+382    	; 0x23c <__bad_interrupt>
  be:	00 00       	nop
  c0:	bd c0       	rjmp	.+378    	; 0x23c <__bad_interrupt>
  c2:	00 00       	nop
  c4:	bb c0       	rjmp	.+374    	; 0x23c <__bad_interrupt>
  c6:	00 00       	nop
  c8:	b9 c0       	rjmp	.+370    	; 0x23c <__bad_interrupt>
  ca:	00 00       	nop
  cc:	b7 c0       	rjmp	.+366    	; 0x23c <__bad_interrupt>
  ce:	00 00       	nop
  d0:	b5 c0       	rjmp	.+362    	; 0x23c <__bad_interrupt>
  d2:	00 00       	nop
  d4:	b3 c0       	rjmp	.+358    	; 0x23c <__bad_interrupt>
  d6:	00 00       	nop
  d8:	b1 c0       	rjmp	.+354    	; 0x23c <__bad_interrupt>
  da:	00 00       	nop
  dc:	af c0       	rjmp	.+350    	; 0x23c <__bad_interrupt>
  de:	00 00       	nop
  e0:	ad c0       	rjmp	.+346    	; 0x23c <__bad_interrupt>
  e2:	00 00       	nop
  e4:	ab c0       	rjmp	.+342    	; 0x23c <__bad_interrupt>
  e6:	00 00       	nop
  e8:	a9 c0       	rjmp	.+338    	; 0x23c <__bad_interrupt>
  ea:	00 00       	nop
  ec:	a7 c0       	rjmp	.+334    	; 0x23c <__bad_interrupt>
  ee:	00 00       	nop
  f0:	a5 c0       	rjmp	.+330    	; 0x23c <__bad_interrupt>
  f2:	00 00       	nop
  f4:	a3 c0       	rjmp	.+326    	; 0x23c <__bad_interrupt>
  f6:	00 00       	nop
  f8:	a1 c0       	rjmp	.+322    	; 0x23c <__bad_interrupt>
  fa:	00 00       	nop
  fc:	9f c0       	rjmp	.+318    	; 0x23c <__bad_interrupt>
  fe:	00 00       	nop
 100:	9d c0       	rjmp	.+314    	; 0x23c <__bad_interrupt>
 102:	00 00       	nop
 104:	9b c0       	rjmp	.+310    	; 0x23c <__bad_interrupt>
 106:	00 00       	nop
 108:	99 c0       	rjmp	.+306    	; 0x23c <__bad_interrupt>
 10a:	00 00       	nop
 10c:	97 c0       	rjmp	.+302    	; 0x23c <__bad_interrupt>
 10e:	00 00       	nop
 110:	95 c0       	rjmp	.+298    	; 0x23c <__bad_interrupt>
 112:	00 00       	nop
 114:	93 c0       	rjmp	.+294    	; 0x23c <__bad_interrupt>
 116:	00 00       	nop
 118:	91 c0       	rjmp	.+290    	; 0x23c <__bad_interrupt>
 11a:	00 00       	nop
 11c:	8f c0       	rjmp	.+286    	; 0x23c <__bad_interrupt>
 11e:	00 00       	nop
 120:	8d c0       	rjmp	.+282    	; 0x23c <__bad_interrupt>
 122:	00 00       	nop
 124:	8b c0       	rjmp	.+278    	; 0x23c <__bad_interrupt>
 126:	00 00       	nop
 128:	89 c0       	rjmp	.+274    	; 0x23c <__bad_interrupt>
 12a:	00 00       	nop
 12c:	87 c0       	rjmp	.+270    	; 0x23c <__bad_interrupt>
 12e:	00 00       	nop
 130:	85 c0       	rjmp	.+266    	; 0x23c <__bad_interrupt>
 132:	00 00       	nop
 134:	ad c4       	rjmp	.+2394   	; 0xa90 <__vector_77>
 136:	00 00       	nop
 138:	81 c0       	rjmp	.+258    	; 0x23c <__bad_interrupt>
 13a:	00 00       	nop
 13c:	7f c0       	rjmp	.+254    	; 0x23c <__bad_interrupt>
 13e:	00 00       	nop
 140:	7d c0       	rjmp	.+250    	; 0x23c <__bad_interrupt>
 142:	00 00       	nop
 144:	7b c0       	rjmp	.+246    	; 0x23c <__bad_interrupt>
 146:	00 00       	nop
 148:	79 c0       	rjmp	.+242    	; 0x23c <__bad_interrupt>
 14a:	00 00       	nop
 14c:	77 c0       	rjmp	.+238    	; 0x23c <__bad_interrupt>
 14e:	00 00       	nop
 150:	75 c0       	rjmp	.+234    	; 0x23c <__bad_interrupt>
 152:	00 00       	nop
 154:	73 c0       	rjmp	.+230    	; 0x23c <__bad_interrupt>
 156:	00 00       	nop
 158:	71 c0       	rjmp	.+226    	; 0x23c <__bad_interrupt>
 15a:	00 00       	nop
 15c:	6f c0       	rjmp	.+222    	; 0x23c <__bad_interrupt>
 15e:	00 00       	nop
 160:	6d c0       	rjmp	.+218    	; 0x23c <__bad_interrupt>
 162:	00 00       	nop
 164:	6b c0       	rjmp	.+214    	; 0x23c <__bad_interrupt>
 166:	00 00       	nop
 168:	69 c0       	rjmp	.+210    	; 0x23c <__bad_interrupt>
 16a:	00 00       	nop
 16c:	67 c0       	rjmp	.+206    	; 0x23c <__bad_interrupt>
 16e:	00 00       	nop
 170:	65 c0       	rjmp	.+202    	; 0x23c <__bad_interrupt>
 172:	00 00       	nop
 174:	63 c0       	rjmp	.+198    	; 0x23c <__bad_interrupt>
 176:	00 00       	nop
 178:	61 c0       	rjmp	.+194    	; 0x23c <__bad_interrupt>
 17a:	00 00       	nop
 17c:	5f c0       	rjmp	.+190    	; 0x23c <__bad_interrupt>
 17e:	00 00       	nop
 180:	5d c0       	rjmp	.+186    	; 0x23c <__bad_interrupt>
 182:	00 00       	nop
 184:	5b c0       	rjmp	.+182    	; 0x23c <__bad_interrupt>
 186:	00 00       	nop
 188:	59 c0       	rjmp	.+178    	; 0x23c <__bad_interrupt>
 18a:	00 00       	nop
 18c:	57 c0       	rjmp	.+174    	; 0x23c <__bad_interrupt>
 18e:	00 00       	nop
 190:	55 c0       	rjmp	.+170    	; 0x23c <__bad_interrupt>
 192:	00 00       	nop
 194:	53 c0       	rjmp	.+166    	; 0x23c <__bad_interrupt>
 196:	00 00       	nop
 198:	51 c0       	rjmp	.+162    	; 0x23c <__bad_interrupt>
 19a:	00 00       	nop
 19c:	4f c0       	rjmp	.+158    	; 0x23c <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	4d c0       	rjmp	.+154    	; 0x23c <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	4b c0       	rjmp	.+150    	; 0x23c <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	49 c0       	rjmp	.+146    	; 0x23c <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	47 c0       	rjmp	.+142    	; 0x23c <__bad_interrupt>
 1ae:	00 00       	nop
 1b0:	45 c0       	rjmp	.+138    	; 0x23c <__bad_interrupt>
 1b2:	00 00       	nop
 1b4:	43 c0       	rjmp	.+134    	; 0x23c <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	41 c0       	rjmp	.+130    	; 0x23c <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	3f c0       	rjmp	.+126    	; 0x23c <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	3d c0       	rjmp	.+122    	; 0x23c <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	3b c0       	rjmp	.+118    	; 0x23c <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	39 c0       	rjmp	.+114    	; 0x23c <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	37 c0       	rjmp	.+110    	; 0x23c <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	35 c0       	rjmp	.+106    	; 0x23c <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	33 c0       	rjmp	.+102    	; 0x23c <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	31 c0       	rjmp	.+98     	; 0x23c <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	2f c0       	rjmp	.+94     	; 0x23c <__bad_interrupt>
 1de:	00 00       	nop
 1e0:	2d c0       	rjmp	.+90     	; 0x23c <__bad_interrupt>
 1e2:	00 00       	nop
 1e4:	2b c0       	rjmp	.+86     	; 0x23c <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	29 c0       	rjmp	.+82     	; 0x23c <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	27 c0       	rjmp	.+78     	; 0x23c <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	25 c0       	rjmp	.+74     	; 0x23c <__bad_interrupt>
	...

000001f4 <__ctors_end>:
 1f4:	11 24       	eor	r1, r1
 1f6:	1f be       	out	0x3f, r1	; 63
 1f8:	cf ef       	ldi	r28, 0xFF	; 255
 1fa:	df e3       	ldi	r29, 0x3F	; 63
 1fc:	de bf       	out	0x3e, r29	; 62
 1fe:	cd bf       	out	0x3d, r28	; 61
 200:	00 e0       	ldi	r16, 0x00	; 0
 202:	0c bf       	out	0x3c, r16	; 60
 204:	18 be       	out	0x38, r1	; 56
 206:	19 be       	out	0x39, r1	; 57
 208:	1a be       	out	0x3a, r1	; 58
 20a:	1b be       	out	0x3b, r1	; 59

0000020c <__do_copy_data>:
 20c:	10 e2       	ldi	r17, 0x20	; 32
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	e6 e8       	ldi	r30, 0x86	; 134
 214:	fc e0       	ldi	r31, 0x0C	; 12
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	0b bf       	out	0x3b, r16	; 59
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
 21c:	07 90       	elpm	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	a0 30       	cpi	r26, 0x00	; 0
 222:	b1 07       	cpc	r27, r17
 224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>
 226:	1b be       	out	0x3b, r1	; 59

00000228 <__do_clear_bss>:
 228:	21 e2       	ldi	r18, 0x21	; 33
 22a:	a0 e0       	ldi	r26, 0x00	; 0
 22c:	b0 e2       	ldi	r27, 0x20	; 32
 22e:	01 c0       	rjmp	.+2      	; 0x232 <.do_clear_bss_start>

00000230 <.do_clear_bss_loop>:
 230:	1d 92       	st	X+, r1

00000232 <.do_clear_bss_start>:
 232:	ac 33       	cpi	r26, 0x3C	; 60
 234:	b2 07       	cpc	r27, r18
 236:	e1 f7       	brne	.-8      	; 0x230 <.do_clear_bss_loop>
 238:	94 d3       	rcall	.+1832   	; 0x962 <main>
 23a:	23 c5       	rjmp	.+2630   	; 0xc82 <_exit>

0000023c <__bad_interrupt>:
 23c:	e1 ce       	rjmp	.-574    	; 0x0 <__vectors>

0000023e <pid_attitude_rate>:
		
}

//  pid  position control loop
void pid_attitude_rate(PID_data * pid_data)
{
 23e:	af 92       	push	r10
 240:	bf 92       	push	r11
 242:	cf 92       	push	r12
 244:	df 92       	push	r13
 246:	ef 92       	push	r14
 248:	ff 92       	push	r15
 24a:	0f 93       	push	r16
 24c:	1f 93       	push	r17
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	fc 01       	movw	r30, r24
	
	int16_t attitude_loop_out;
	////  save the last error calculation so we can calculate the derivative
	pid_data->previousError0 = pid_data->previousError1;
 254:	80 ad       	ldd	r24, Z+56	; 0x38
 256:	91 ad       	ldd	r25, Z+57	; 0x39
 258:	86 ab       	std	Z+54, r24	; 0x36
 25a:	97 ab       	std	Z+55, r25	; 0x37
	pid_data->previousError1 = pid_data->previousError2;
 25c:	c2 ac       	ldd	r12, Z+58	; 0x3a
 25e:	d3 ac       	ldd	r13, Z+59	; 0x3b
 260:	c0 ae       	std	Z+56, r12	; 0x38
 262:	d1 ae       	std	Z+57, r13	; 0x39
	pid_data->previousError2 = pid_data->attitude_error;
 264:	e2 a4       	ldd	r14, Z+42	; 0x2a
 266:	f3 a4       	ldd	r15, Z+43	; 0x2b
 268:	e2 ae       	std	Z+58, r14	; 0x3a
 26a:	f3 ae       	std	Z+59, r15	; 0x3b
	//pid_data->previousError0 = pid_data->error;
	////  calculate the new error
	////10 - 23 = -13
	
	pid_data->attitude_error = (pid_data->attitude_command - pid_data->attitude_feedback);
 26c:	c2 a1       	ldd	r28, Z+34	; 0x22
 26e:	d3 a1       	ldd	r29, Z+35	; 0x23
 270:	26 8d       	ldd	r18, Z+30	; 0x1e
 272:	37 8d       	ldd	r19, Z+31	; 0x1f
 274:	c2 1b       	sub	r28, r18
 276:	d3 0b       	sbc	r29, r19
 278:	c2 a7       	std	Z+42, r28	; 0x2a
 27a:	d3 a7       	std	Z+43, r29	; 0x2b
	//  calculate the slope (dt = 1)
	//pid_data->attitude_slope = (pid_data->attitude_error - pid_data->previousError2)  + (pid_data->previousError2 - pid_data->previousError1)
	//+ (pid_data->previousError1 - pid_data->previousError0);
	
	//sum the error for the current and last sample (dt = 1)
	pid_data->attitude_total_error = (pid_data->previousError0/5 + pid_data->previousError1/5 + pid_data->previousError2/5 + pid_data->attitude_error/5);
 27c:	25 e0       	ldi	r18, 0x05	; 5
 27e:	30 e0       	ldi	r19, 0x00	; 0
 280:	b9 01       	movw	r22, r18
 282:	d8 d4       	rcall	.+2480   	; 0xc34 <__divmodhi4>
 284:	8b 01       	movw	r16, r22
 286:	c6 01       	movw	r24, r12
 288:	b9 01       	movw	r22, r18
 28a:	d4 d4       	rcall	.+2472   	; 0xc34 <__divmodhi4>
 28c:	06 0f       	add	r16, r22
 28e:	17 1f       	adc	r17, r23
 290:	c7 01       	movw	r24, r14
 292:	b9 01       	movw	r22, r18
 294:	cf d4       	rcall	.+2462   	; 0xc34 <__divmodhi4>
 296:	06 0f       	add	r16, r22
 298:	17 1f       	adc	r17, r23
 29a:	ce 01       	movw	r24, r28
 29c:	b9 01       	movw	r22, r18
 29e:	ca d4       	rcall	.+2452   	; 0xc34 <__divmodhi4>
 2a0:	06 0f       	add	r16, r22
 2a2:	17 1f       	adc	r17, r23
 2a4:	02 ab       	std	Z+50, r16	; 0x32
 2a6:	13 ab       	std	Z+51, r17	; 0x33
	//pid_data->total_error = Limit_value_signed(pid_data->total_error);

	//p_term = Limit_value_signed(((pid_data->error  *  pid_data->Kp)/100), pid_data->error);
	pid_data->p_term_attitude = (pid_data->attitude_error  *  pid_data->Kp)/100;
 2a8:	26 89       	ldd	r18, Z+22	; 0x16
 2aa:	37 89       	ldd	r19, Z+23	; 0x17
 2ac:	c2 9f       	mul	r28, r18
 2ae:	c0 01       	movw	r24, r0
 2b0:	c3 9f       	mul	r28, r19
 2b2:	90 0d       	add	r25, r0
 2b4:	d2 9f       	mul	r29, r18
 2b6:	90 0d       	add	r25, r0
 2b8:	11 24       	eor	r1, r1
 2ba:	c4 e6       	ldi	r28, 0x64	; 100
 2bc:	d0 e0       	ldi	r29, 0x00	; 0
 2be:	be 01       	movw	r22, r28
 2c0:	b9 d4       	rcall	.+2418   	; 0xc34 <__divmodhi4>
 2c2:	9b 01       	movw	r18, r22
 2c4:	62 87       	std	Z+10, r22	; 0x0a
 2c6:	73 87       	std	Z+11, r23	; 0x0b
	
	//calculate integral term
	pid_data->i_term_attitude =(pid_data->attitude_total_error  * pid_data->Ki)/100;
 2c8:	40 8d       	ldd	r20, Z+24	; 0x18
 2ca:	51 8d       	ldd	r21, Z+25	; 0x19
 2cc:	04 9f       	mul	r16, r20
 2ce:	c0 01       	movw	r24, r0
 2d0:	05 9f       	mul	r16, r21
 2d2:	90 0d       	add	r25, r0
 2d4:	14 9f       	mul	r17, r20
 2d6:	90 0d       	add	r25, r0
 2d8:	11 24       	eor	r1, r1
 2da:	be 01       	movw	r22, r28
 2dc:	ab d4       	rcall	.+2390   	; 0xc34 <__divmodhi4>
 2de:	64 87       	std	Z+12, r22	; 0x0c
 2e0:	75 87       	std	Z+13, r23	; 0x0d
	
	if (pid_data->i_term_attitude >= pid_data->windupGuard)
 2e2:	c0 a9       	ldd	r28, Z+48	; 0x30
 2e4:	d1 a9       	ldd	r29, Z+49	; 0x31
 2e6:	6c 17       	cp	r22, r28
 2e8:	7d 07       	cpc	r23, r29
 2ea:	14 f0       	brlt	.+4      	; 0x2f0 <pid_attitude_rate+0xb2>
	{
		pid_data->i_term_attitude = pid_data->windupGuard;
 2ec:	c4 87       	std	Z+12, r28	; 0x0c
 2ee:	d5 87       	std	Z+13, r29	; 0x0d
	}
	//calculate derivative  term
	//pid_data->d_term_attitude = (pid_data->rate_feedback * pid_data->Kd)/1000;
	
	// calculate the pid output
	attitude_loop_out = pid_data->p_term_attitude + pid_data->i_term_attitude;
 2f0:	04 85       	ldd	r16, Z+12	; 0x0c
 2f2:	15 85       	ldd	r17, Z+13	; 0x0d
 2f4:	02 0f       	add	r16, r18
 2f6:	13 1f       	adc	r17, r19
	
	
	
	
	//  rate calculations start here
	pid_data->previousRateError0 = pid_data->previousRateError1;
 2f8:	86 ad       	ldd	r24, Z+62	; 0x3e
 2fa:	97 ad       	ldd	r25, Z+63	; 0x3f
 2fc:	84 af       	std	Z+60, r24	; 0x3c
 2fe:	95 af       	std	Z+61, r25	; 0x3d
	pid_data->previousRateError1 = pid_data->previousRateError2;
 300:	df 01       	movw	r26, r30
 302:	a0 5c       	subi	r26, 0xC0	; 192
 304:	bf 4f       	sbci	r27, 0xFF	; 255
 306:	ad 90       	ld	r10, X+
 308:	bc 90       	ld	r11, X
 30a:	11 97       	sbiw	r26, 0x01	; 1
 30c:	a6 ae       	std	Z+62, r10	; 0x3e
 30e:	b7 ae       	std	Z+63, r11	; 0x3f
	pid_data->previousRateError2 = pid_data->rate_error;
 310:	c4 a4       	ldd	r12, Z+44	; 0x2c
 312:	d5 a4       	ldd	r13, Z+45	; 0x2d
 314:	cd 92       	st	X+, r12
 316:	dc 92       	st	X, r13
	
	pid_data->rate_error = (attitude_loop_out - pid_data->rate_feedback);
 318:	40 a1       	ldd	r20, Z+32	; 0x20
 31a:	51 a1       	ldd	r21, Z+33	; 0x21
 31c:	04 1b       	sub	r16, r20
 31e:	15 0b       	sbc	r17, r21
 320:	04 a7       	std	Z+44, r16	; 0x2c
 322:	15 a7       	std	Z+45, r17	; 0x2d
	
	//  calculate the integral of the rate,  this is just position so we should really use the IMU data, duh
	pid_data->rate_total_error = pid_data->previousRateError0/10 + pid_data->previousRateError1/10 + pid_data->previousRateError2/10 +
 324:	2a e0       	ldi	r18, 0x0A	; 10
 326:	30 e0       	ldi	r19, 0x00	; 0
 328:	b9 01       	movw	r22, r18
 32a:	84 d4       	rcall	.+2312   	; 0xc34 <__divmodhi4>
 32c:	7b 01       	movw	r14, r22
 32e:	c5 01       	movw	r24, r10
 330:	b9 01       	movw	r22, r18
 332:	80 d4       	rcall	.+2304   	; 0xc34 <__divmodhi4>
 334:	e6 0e       	add	r14, r22
 336:	f7 1e       	adc	r15, r23
 338:	c6 01       	movw	r24, r12
 33a:	b9 01       	movw	r22, r18
 33c:	7b d4       	rcall	.+2294   	; 0xc34 <__divmodhi4>
 33e:	e6 0e       	add	r14, r22
 340:	f7 1e       	adc	r15, r23
	pid_data->rate_error/10;
 342:	c8 01       	movw	r24, r16
 344:	b9 01       	movw	r22, r18
 346:	76 d4       	rcall	.+2284   	; 0xc34 <__divmodhi4>
	pid_data->previousRateError2 = pid_data->rate_error;
	
	pid_data->rate_error = (attitude_loop_out - pid_data->rate_feedback);
	
	//  calculate the integral of the rate,  this is just position so we should really use the IMU data, duh
	pid_data->rate_total_error = pid_data->previousRateError0/10 + pid_data->previousRateError1/10 + pid_data->previousRateError2/10 +
 348:	e6 0e       	add	r14, r22
 34a:	f7 1e       	adc	r15, r23
 34c:	e4 aa       	std	Z+52, r14	; 0x34
 34e:	f5 aa       	std	Z+53, r15	; 0x35
	pid_data->rate_error/10;
	
	pid_data->p_term_rate = (pid_data->rate_error * pid_data->Kp_rate)/100;
 350:	20 89       	ldd	r18, Z+16	; 0x10
 352:	31 89       	ldd	r19, Z+17	; 0x11
 354:	02 9f       	mul	r16, r18
 356:	c0 01       	movw	r24, r0
 358:	03 9f       	mul	r16, r19
 35a:	90 0d       	add	r25, r0
 35c:	12 9f       	mul	r17, r18
 35e:	90 0d       	add	r25, r0
 360:	11 24       	eor	r1, r1
 362:	04 e6       	ldi	r16, 0x64	; 100
 364:	10 e0       	ldi	r17, 0x00	; 0
 366:	b8 01       	movw	r22, r16
 368:	65 d4       	rcall	.+2250   	; 0xc34 <__divmodhi4>
 36a:	9b 01       	movw	r18, r22
 36c:	64 83       	std	Z+4, r22	; 0x04
 36e:	75 83       	std	Z+5, r23	; 0x05
	
	pid_data->i_term_rate = (pid_data->rate_total_error  * pid_data->Ki_rate)/100;
 370:	42 89       	ldd	r20, Z+18	; 0x12
 372:	53 89       	ldd	r21, Z+19	; 0x13
 374:	e4 9e       	mul	r14, r20
 376:	c0 01       	movw	r24, r0
 378:	e5 9e       	mul	r14, r21
 37a:	90 0d       	add	r25, r0
 37c:	f4 9e       	mul	r15, r20
 37e:	90 0d       	add	r25, r0
 380:	11 24       	eor	r1, r1
 382:	b8 01       	movw	r22, r16
 384:	57 d4       	rcall	.+2222   	; 0xc34 <__divmodhi4>
	
	if (pid_data->i_term_rate >= pid_data->windupGuard)
 386:	6c 17       	cp	r22, r28
 388:	7d 07       	cpc	r23, r29
 38a:	1c f4       	brge	.+6      	; 0x392 <pid_attitude_rate+0x154>
	pid_data->rate_total_error = pid_data->previousRateError0/10 + pid_data->previousRateError1/10 + pid_data->previousRateError2/10 +
	pid_data->rate_error/10;
	
	pid_data->p_term_rate = (pid_data->rate_error * pid_data->Kp_rate)/100;
	
	pid_data->i_term_rate = (pid_data->rate_total_error  * pid_data->Ki_rate)/100;
 38c:	66 83       	std	Z+6, r22	; 0x06
 38e:	77 83       	std	Z+7, r23	; 0x07
 390:	02 c0       	rjmp	.+4      	; 0x396 <pid_attitude_rate+0x158>
	
	if (pid_data->i_term_rate >= pid_data->windupGuard)
	{
		pid_data->i_term_rate = pid_data->windupGuard;
 392:	c6 83       	std	Z+6, r28	; 0x06
 394:	d7 83       	std	Z+7, r29	; 0x07
	}
	
	//pid_data->d_term_rate = (pid_data->rate_feedback * pid_data->Kd)/100;
	
	pid_data->pid_total = (int16_t)(pid_data->p_term_rate + pid_data->i_term_rate);
 396:	86 81       	ldd	r24, Z+6	; 0x06
 398:	97 81       	ldd	r25, Z+7	; 0x07
 39a:	28 0f       	add	r18, r24
 39c:	39 1f       	adc	r19, r25
 39e:	24 8f       	std	Z+28, r18	; 0x1c
 3a0:	35 8f       	std	Z+29, r19	; 0x1d
	//}
	//pid_data->pid_total = pid_data->p_term_rate;
	
	
	
}
 3a2:	df 91       	pop	r29
 3a4:	cf 91       	pop	r28
 3a6:	1f 91       	pop	r17
 3a8:	0f 91       	pop	r16
 3aa:	ff 90       	pop	r15
 3ac:	ef 90       	pop	r14
 3ae:	df 90       	pop	r13
 3b0:	cf 90       	pop	r12
 3b2:	bf 90       	pop	r11
 3b4:	af 90       	pop	r10
 3b6:	08 95       	ret

000003b8 <initPWM>:
*********************************************************************************************************** */
void sendUM6_Data()
{

		sendData_int16_t(0xCCCC);					//0xCCCC is the heade
		sendData_int16_t(command);
 3b8:	e0 e0       	ldi	r30, 0x00	; 0
 3ba:	f8 e0       	ldi	r31, 0x08	; 8
 3bc:	83 e0       	ldi	r24, 0x03	; 3
 3be:	80 83       	st	Z, r24
 3c0:	81 83       	std	Z+1, r24	; 0x01
 3c2:	82 83       	std	Z+2, r24	; 0x02
 3c4:	83 83       	std	Z+3, r24	; 0x03
 3c6:	81 81       	ldd	r24, Z+1	; 0x01
 3c8:	80 61       	ori	r24, 0x10	; 16
 3ca:	81 83       	std	Z+1, r24	; 0x01
 3cc:	81 81       	ldd	r24, Z+1	; 0x01
 3ce:	80 62       	ori	r24, 0x20	; 32
 3d0:	81 83       	std	Z+1, r24	; 0x01
 3d2:	81 81       	ldd	r24, Z+1	; 0x01
 3d4:	80 64       	ori	r24, 0x40	; 64
 3d6:	81 83       	std	Z+1, r24	; 0x01
 3d8:	81 81       	ldd	r24, Z+1	; 0x01
 3da:	80 68       	ori	r24, 0x80	; 128
 3dc:	81 83       	std	Z+1, r24	; 0x01
 3de:	8f e0       	ldi	r24, 0x0F	; 15
 3e0:	a0 e4       	ldi	r26, 0x40	; 64
 3e2:	b6 e0       	ldi	r27, 0x06	; 6
 3e4:	11 96       	adiw	r26, 0x01	; 1
 3e6:	8c 93       	st	X, r24
 3e8:	10 ae       	std	Z+56, r1	; 0x38
 3ea:	11 ae       	std	Z+57, r1	; 0x39
 3ec:	12 ae       	std	Z+58, r1	; 0x3a
 3ee:	13 ae       	std	Z+59, r1	; 0x3b
 3f0:	14 ae       	std	Z+60, r1	; 0x3c
 3f2:	15 ae       	std	Z+61, r1	; 0x3d
 3f4:	10 92 3e 08 	sts	0x083E, r1
 3f8:	10 92 3f 08 	sts	0x083F, r1
 3fc:	89 e2       	ldi	r24, 0x29	; 41
 3fe:	98 e6       	ldi	r25, 0x68	; 104
 400:	86 a3       	std	Z+38, r24	; 0x26
 402:	97 a3       	std	Z+39, r25	; 0x27
 404:	63 e0       	ldi	r22, 0x03	; 3
 406:	80 e0       	ldi	r24, 0x00	; 0
 408:	98 e0       	ldi	r25, 0x08	; 8
 40a:	f5 c3       	rjmp	.+2026   	; 0xbf6 <TC0_ConfigClockSource>

0000040c <DisablePWM>:
 40c:	e0 e0       	ldi	r30, 0x00	; 0
 40e:	f8 e0       	ldi	r31, 0x08	; 8
 410:	81 81       	ldd	r24, Z+1	; 0x01
 412:	81 83       	std	Z+1, r24	; 0x01
 414:	81 81       	ldd	r24, Z+1	; 0x01
 416:	81 83       	std	Z+1, r24	; 0x01
 418:	81 81       	ldd	r24, Z+1	; 0x01
 41a:	81 83       	std	Z+1, r24	; 0x01
 41c:	81 81       	ldd	r24, Z+1	; 0x01
 41e:	81 83       	std	Z+1, r24	; 0x01
 420:	08 95       	ret

00000422 <doPWM>:
 422:	e0 e0       	ldi	r30, 0x00	; 0
 424:	f8 e0       	ldi	r31, 0x08	; 8
 426:	e4 85       	ldd	r30, Z+12	; 0x0c
 428:	e0 ff       	sbrs	r30, 0
 42a:	0e c0       	rjmp	.+28     	; 0x448 <doPWM+0x26>
 42c:	e0 e0       	ldi	r30, 0x00	; 0
 42e:	f8 e0       	ldi	r31, 0x08	; 8
 430:	a1 e0       	ldi	r26, 0x01	; 1
 432:	a4 87       	std	Z+12, r26	; 0x0c
 434:	80 af       	std	Z+56, r24	; 0x38
 436:	91 af       	std	Z+57, r25	; 0x39
 438:	62 af       	std	Z+58, r22	; 0x3a
 43a:	73 af       	std	Z+59, r23	; 0x3b
 43c:	44 af       	std	Z+60, r20	; 0x3c
 43e:	55 af       	std	Z+61, r21	; 0x3d
 440:	20 93 3e 08 	sts	0x083E, r18
 444:	30 93 3f 08 	sts	0x083F, r19
 448:	08 95       	ret

0000044a <SetPulseWidths>:
 44a:	80 91 e0 20 	lds	r24, 0x20E0
 44e:	90 91 e1 20 	lds	r25, 0x20E1
 452:	9c 01       	movw	r18, r24
 454:	21 5d       	subi	r18, 0xD1	; 209
 456:	37 40       	sbci	r19, 0x07	; 7
 458:	2f 32       	cpi	r18, 0x2F	; 47
 45a:	38 40       	sbci	r19, 0x08	; 8
 45c:	c8 f4       	brcc	.+50     	; 0x490 <SetPulseWidths+0x46>
 45e:	88 0f       	add	r24, r24
 460:	99 1f       	adc	r25, r25
 462:	88 0f       	add	r24, r24
 464:	99 1f       	adc	r25, r25
 466:	60 91 6a 20 	lds	r22, 0x206A
 46a:	70 91 6b 20 	lds	r23, 0x206B
 46e:	e0 91 1d 20 	lds	r30, 0x201D
 472:	f0 91 1e 20 	lds	r31, 0x201E
 476:	9c 01       	movw	r18, r24
 478:	26 0f       	add	r18, r22
 47a:	37 1f       	adc	r19, r23
 47c:	ac 01       	movw	r20, r24
 47e:	4e 0f       	add	r20, r30
 480:	5f 1f       	adc	r21, r31
 482:	dc 01       	movw	r26, r24
 484:	a6 1b       	sub	r26, r22
 486:	b7 0b       	sbc	r27, r23
 488:	bd 01       	movw	r22, r26
 48a:	8e 1b       	sub	r24, r30
 48c:	9f 0b       	sbc	r25, r31
 48e:	c9 cf       	rjmp	.-110    	; 0x422 <doPWM>
 490:	20 e0       	ldi	r18, 0x00	; 0
 492:	30 e0       	ldi	r19, 0x00	; 0
 494:	40 e0       	ldi	r20, 0x00	; 0
 496:	50 e0       	ldi	r21, 0x00	; 0
 498:	60 e0       	ldi	r22, 0x00	; 0
 49a:	70 e0       	ldi	r23, 0x00	; 0
 49c:	80 e0       	ldi	r24, 0x00	; 0
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	c0 cf       	rjmp	.-128    	; 0x422 <doPWM>

000004a2 <intPID_gains>:
 4a2:	85 e0       	ldi	r24, 0x05	; 5
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	80 93 11 20 	sts	0x2011, r24
 4aa:	90 93 12 20 	sts	0x2012, r25
 4ae:	10 92 13 20 	sts	0x2013, r1
 4b2:	10 92 14 20 	sts	0x2014, r1
 4b6:	80 93 15 20 	sts	0x2015, r24
 4ba:	90 93 16 20 	sts	0x2016, r25
 4be:	8b e4       	ldi	r24, 0x4B	; 75
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	80 93 5e 20 	sts	0x205E, r24
 4c6:	90 93 5f 20 	sts	0x205F, r25
 4ca:	8e e1       	ldi	r24, 0x1E	; 30
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	80 93 60 20 	sts	0x2060, r24
 4d2:	90 93 61 20 	sts	0x2061, r25
 4d6:	10 92 62 20 	sts	0x2062, r1
 4da:	10 92 63 20 	sts	0x2063, r1
 4de:	88 ec       	ldi	r24, 0xC8	; 200
 4e0:	90 e0       	ldi	r25, 0x00	; 0
 4e2:	80 93 31 20 	sts	0x2031, r24
 4e6:	90 93 32 20 	sts	0x2032, r25
 4ea:	80 93 7e 20 	sts	0x207E, r24
 4ee:	90 93 7f 20 	sts	0x207F, r25
 4f2:	80 93 12 21 	sts	0x2112, r24
 4f6:	90 93 13 21 	sts	0x2113, r25
 4fa:	08 95       	ret

000004fc <WriteToPC_SPI>:
  OUTPUT:
  DISCRIPTION:  Write data packet to the SPI bus connected to the ATmega, 
  the ATmega should be set up to parse this data.
*********************************************************************************************************** */
int16_t WriteToPC_SPI()
{
 4fc:	7f 92       	push	r7
 4fe:	8f 92       	push	r8
 500:	9f 92       	push	r9
 502:	af 92       	push	r10
 504:	bf 92       	push	r11
 506:	cf 92       	push	r12
 508:	df 92       	push	r13
 50a:	ef 92       	push	r14
 50c:	ff 92       	push	r15
 50e:	0f 93       	push	r16
 510:	1f 93       	push	r17
 512:	cf 93       	push	r28
 514:	df 93       	push	r29
	PORTE.OUTCLR = PIN4_bm;
 516:	0f 2e       	mov	r0, r31
 518:	f0 e8       	ldi	r31, 0x80	; 128
 51a:	af 2e       	mov	r10, r31
 51c:	f6 e0       	ldi	r31, 0x06	; 6
 51e:	bf 2e       	mov	r11, r31
 520:	f0 2d       	mov	r31, r0
 522:	68 94       	set
 524:	77 24       	eor	r7, r7
 526:	74 f8       	bld	r7, 4
 528:	f5 01       	movw	r30, r10
 52a:	76 82       	std	Z+6, r7	; 0x06
	
	throttleAxis.thrust = spiPC_write_read(upperByte16(throttleAxis.thrust )) << 8;						
 52c:	00 ee       	ldi	r16, 0xE0	; 224
 52e:	10 e2       	ldi	r17, 0x20	; 32
 530:	f8 01       	movw	r30, r16
 532:	81 81       	ldd	r24, Z+1	; 0x01
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	e2 d2       	rcall	.+1476   	; 0xafc <spiPC_write_read>
 538:	d8 2f       	mov	r29, r24
 53a:	f0 e0       	ldi	r31, 0x00	; 0
 53c:	cf 2f       	mov	r28, r31
 53e:	f8 01       	movw	r30, r16
 540:	c0 83       	st	Z, r28
 542:	d1 83       	std	Z+1, r29	; 0x01
	throttleAxis.thrust += spiPC_write_read(lowerByte16(throttleAxis.thrust ));							
 544:	80 e0       	ldi	r24, 0x00	; 0
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	d9 d2       	rcall	.+1458   	; 0xafc <spiPC_write_read>
 54a:	8c 0f       	add	r24, r28
 54c:	9d 1f       	adc	r25, r29
 54e:	f8 01       	movw	r30, r16
 550:	80 83       	st	Z, r24
 552:	91 83       	std	Z+1, r25	; 0x01
	
	rollAxis.attitude_command = spiPC_write_read(upperByte16(pitchAxis.attitude_feedback)) << 8;
 554:	0f 2e       	mov	r0, r31
 556:	fc e6       	ldi	r31, 0x6C	; 108
 558:	ef 2e       	mov	r14, r31
 55a:	f0 e2       	ldi	r31, 0x20	; 32
 55c:	ff 2e       	mov	r15, r31
 55e:	f0 2d       	mov	r31, r0
 560:	f7 01       	movw	r30, r14
 562:	81 81       	ldd	r24, Z+1	; 0x01
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	ca d2       	rcall	.+1428   	; 0xafc <spiPC_write_read>
 568:	d8 2f       	mov	r29, r24
 56a:	f0 e0       	ldi	r31, 0x00	; 0
 56c:	cf 2f       	mov	r28, r31
 56e:	03 e2       	ldi	r16, 0x23	; 35
 570:	10 e2       	ldi	r17, 0x20	; 32
 572:	f8 01       	movw	r30, r16
 574:	c0 83       	st	Z, r28
 576:	d1 83       	std	Z+1, r29	; 0x01
	rollAxis.attitude_command  += spiPC_write_read(lowerByte16(pitchAxis.attitude_feedback));
 578:	f7 01       	movw	r30, r14
 57a:	80 81       	ld	r24, Z
 57c:	91 81       	ldd	r25, Z+1	; 0x01
 57e:	99 27       	eor	r25, r25
 580:	bd d2       	rcall	.+1402   	; 0xafc <spiPC_write_read>
 582:	8c 0f       	add	r24, r28
 584:	9d 1f       	adc	r25, r29
 586:	f8 01       	movw	r30, r16
 588:	80 83       	st	Z, r24
 58a:	91 83       	std	Z+1, r25	; 0x01
	
	pitchAxis.attitude_command = spiPC_write_read(upperByte16(rollAxis.attitude_feedback)) << 8;
 58c:	0f 2e       	mov	r0, r31
 58e:	ff e1       	ldi	r31, 0x1F	; 31
 590:	cf 2e       	mov	r12, r31
 592:	f0 e2       	ldi	r31, 0x20	; 32
 594:	df 2e       	mov	r13, r31
 596:	f0 2d       	mov	r31, r0
 598:	f6 01       	movw	r30, r12
 59a:	81 81       	ldd	r24, Z+1	; 0x01
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	ae d2       	rcall	.+1372   	; 0xafc <spiPC_write_read>
 5a0:	d8 2f       	mov	r29, r24
 5a2:	f0 e0       	ldi	r31, 0x00	; 0
 5a4:	cf 2f       	mov	r28, r31
 5a6:	0f 2e       	mov	r0, r31
 5a8:	f0 e7       	ldi	r31, 0x70	; 112
 5aa:	ef 2e       	mov	r14, r31
 5ac:	f0 e2       	ldi	r31, 0x20	; 32
 5ae:	ff 2e       	mov	r15, r31
 5b0:	f0 2d       	mov	r31, r0
 5b2:	f7 01       	movw	r30, r14
 5b4:	c0 83       	st	Z, r28
 5b6:	d1 83       	std	Z+1, r29	; 0x01
	pitchAxis.attitude_command += spiPC_write_read(lowerByte16(rollAxis.attitude_feedback));
 5b8:	f6 01       	movw	r30, r12
 5ba:	80 81       	ld	r24, Z
 5bc:	91 81       	ldd	r25, Z+1	; 0x01
 5be:	99 27       	eor	r25, r25
 5c0:	9d d2       	rcall	.+1338   	; 0xafc <spiPC_write_read>
 5c2:	8c 0f       	add	r24, r28
 5c4:	9d 1f       	adc	r25, r29
 5c6:	f7 01       	movw	r30, r14
 5c8:	80 83       	st	Z, r24
 5ca:	91 83       	std	Z+1, r25	; 0x01

	yawAxis.attitude_command = spiPC_write_read(upperByte16(yawAxis.attitude_feedback)) << 8;
 5cc:	0f 2e       	mov	r0, r31
 5ce:	f0 e0       	ldi	r31, 0x00	; 0
 5d0:	8f 2e       	mov	r8, r31
 5d2:	f1 e2       	ldi	r31, 0x21	; 33
 5d4:	9f 2e       	mov	r9, r31
 5d6:	f0 2d       	mov	r31, r0
 5d8:	f4 01       	movw	r30, r8
 5da:	81 81       	ldd	r24, Z+1	; 0x01
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	8e d2       	rcall	.+1308   	; 0xafc <spiPC_write_read>
 5e0:	d8 2e       	mov	r13, r24
 5e2:	c1 2c       	mov	r12, r1
 5e4:	c4 e0       	ldi	r28, 0x04	; 4
 5e6:	d1 e2       	ldi	r29, 0x21	; 33
 5e8:	c8 82       	st	Y, r12
 5ea:	d9 82       	std	Y+1, r13	; 0x01
	yawAxis.attitude_command += spiPC_write_read(lowerByte16(yawAxis.attitude_feedback));
 5ec:	f4 01       	movw	r30, r8
 5ee:	80 81       	ld	r24, Z
 5f0:	91 81       	ldd	r25, Z+1	; 0x01
 5f2:	99 27       	eor	r25, r25
 5f4:	83 d2       	rcall	.+1286   	; 0xafc <spiPC_write_read>
 5f6:	8c 0d       	add	r24, r12
 5f8:	9d 1d       	adc	r25, r13
 5fa:	88 83       	st	Y, r24
 5fc:	99 83       	std	Y+1, r25	; 0x01
		
	pitchAxis.Kp = (spiPC_write_read(upperByte16(pitchAxis.attitude_command ))) << 8;					
 5fe:	f7 01       	movw	r30, r14
 600:	81 81       	ldd	r24, Z+1	; 0x01
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	7b d2       	rcall	.+1270   	; 0xafc <spiPC_write_read>
 606:	d8 2e       	mov	r13, r24
 608:	c1 2c       	mov	r12, r1
 60a:	0f 2e       	mov	r0, r31
 60c:	f4 e6       	ldi	r31, 0x64	; 100
 60e:	8f 2e       	mov	r8, r31
 610:	f0 e2       	ldi	r31, 0x20	; 32
 612:	9f 2e       	mov	r9, r31
 614:	f0 2d       	mov	r31, r0
 616:	f4 01       	movw	r30, r8
 618:	c0 82       	st	Z, r12
 61a:	d1 82       	std	Z+1, r13	; 0x01
	pitchAxis.Kp += spiPC_write_read(lowerByte16(pitchAxis.attitude_command ));							
 61c:	f7 01       	movw	r30, r14
 61e:	80 81       	ld	r24, Z
 620:	91 81       	ldd	r25, Z+1	; 0x01
 622:	99 27       	eor	r25, r25
 624:	6b d2       	rcall	.+1238   	; 0xafc <spiPC_write_read>
 626:	8c 0d       	add	r24, r12
 628:	9d 1d       	adc	r25, r13
 62a:	f4 01       	movw	r30, r8
 62c:	80 83       	st	Z, r24
 62e:	91 83       	std	Z+1, r25	; 0x01
	
	pitchAxis.Ki = (spiPC_write_read(upperByte16(rollAxis.attitude_command ))) << 8;					
 630:	f8 01       	movw	r30, r16
 632:	81 81       	ldd	r24, Z+1	; 0x01
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	62 d2       	rcall	.+1220   	; 0xafc <spiPC_write_read>
 638:	f8 2e       	mov	r15, r24
 63a:	e1 2c       	mov	r14, r1
 63c:	0f 2e       	mov	r0, r31
 63e:	f6 e6       	ldi	r31, 0x66	; 102
 640:	cf 2e       	mov	r12, r31
 642:	f0 e2       	ldi	r31, 0x20	; 32
 644:	df 2e       	mov	r13, r31
 646:	f0 2d       	mov	r31, r0
 648:	f6 01       	movw	r30, r12
 64a:	e0 82       	st	Z, r14
 64c:	f1 82       	std	Z+1, r15	; 0x01
	pitchAxis.Ki += spiPC_write_read(lowerByte16(rollAxis.attitude_command));							
 64e:	f8 01       	movw	r30, r16
 650:	80 81       	ld	r24, Z
 652:	91 81       	ldd	r25, Z+1	; 0x01
 654:	99 27       	eor	r25, r25
 656:	52 d2       	rcall	.+1188   	; 0xafc <spiPC_write_read>
 658:	8e 0d       	add	r24, r14
 65a:	9f 1d       	adc	r25, r15
 65c:	f6 01       	movw	r30, r12
 65e:	80 83       	st	Z, r24
 660:	91 83       	std	Z+1, r25	; 0x01
		
	pitchAxis.Kd= (spiPC_write_read(upperByte16(yawAxis.attitude_command))) << 8;					
 662:	89 81       	ldd	r24, Y+1	; 0x01
 664:	90 e0       	ldi	r25, 0x00	; 0
 666:	4a d2       	rcall	.+1172   	; 0xafc <spiPC_write_read>
 668:	18 2f       	mov	r17, r24
 66a:	00 e0       	ldi	r16, 0x00	; 0
 66c:	0f 2e       	mov	r0, r31
 66e:	f8 e6       	ldi	r31, 0x68	; 104
 670:	ef 2e       	mov	r14, r31
 672:	f0 e2       	ldi	r31, 0x20	; 32
 674:	ff 2e       	mov	r15, r31
 676:	f0 2d       	mov	r31, r0
 678:	f7 01       	movw	r30, r14
 67a:	00 83       	st	Z, r16
 67c:	11 83       	std	Z+1, r17	; 0x01
	pitchAxis.Kd+= spiPC_write_read(lowerByte16(yawAxis.attitude_command));			
 67e:	88 81       	ld	r24, Y
 680:	99 81       	ldd	r25, Y+1	; 0x01
 682:	99 27       	eor	r25, r25
 684:	3b d2       	rcall	.+1142   	; 0xafc <spiPC_write_read>
 686:	80 0f       	add	r24, r16
 688:	91 1f       	adc	r25, r17
 68a:	f7 01       	movw	r30, r14
 68c:	80 83       	st	Z, r24
 68e:	91 83       	std	Z+1, r25	; 0x01
	
	command= (spiPC_write_read(upperByte16(yawAxis.rate_feedback))) << 8;
 690:	c2 e0       	ldi	r28, 0x02	; 2
 692:	d1 e2       	ldi	r29, 0x21	; 33
 694:	89 81       	ldd	r24, Y+1	; 0x01
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	31 d2       	rcall	.+1122   	; 0xafc <spiPC_write_read>
 69a:	10 92 4b 20 	sts	0x204B, r1
 69e:	80 93 4c 20 	sts	0x204C, r24
	command+= spiPC_write_read(lowerByte16(yawAxis.rate_feedback));			
 6a2:	88 81       	ld	r24, Y
 6a4:	99 81       	ldd	r25, Y+1	; 0x01
 6a6:	99 27       	eor	r25, r25
 6a8:	29 d2       	rcall	.+1106   	; 0xafc <spiPC_write_read>
 6aa:	20 91 4b 20 	lds	r18, 0x204B
 6ae:	30 91 4c 20 	lds	r19, 0x204C
 6b2:	82 0f       	add	r24, r18
 6b4:	93 1f       	adc	r25, r19
 6b6:	80 93 4b 20 	sts	0x204B, r24
 6ba:	90 93 4c 20 	sts	0x204C, r25
	
	dummy_read = spiPC_write_read(END_PACKET_CHAR);													
 6be:	8c ec       	ldi	r24, 0xCC	; 204
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	1c d2       	rcall	.+1080   	; 0xafc <spiPC_write_read>
 6c4:	80 93 4d 20 	sts	0x204D, r24
	dummy_read = spiPC_write_read(END_PACKET_CHAR);			
 6c8:	8c ec       	ldi	r24, 0xCC	; 204
 6ca:	90 e0       	ldi	r25, 0x00	; 0
 6cc:	17 d2       	rcall	.+1070   	; 0xafc <spiPC_write_read>
 6ce:	80 93 4d 20 	sts	0x204D, r24
	//rollAxis.Kp = pitchAxis.Kp;
	//rollAxis.Ki = rollAxis.Ki;
	//rollAxis.Kd_rate = rollAxis.Kd_rate;										
	
	
	PORTE.OUTSET = PIN4_bm;
 6d2:	f5 01       	movw	r30, r10
 6d4:	75 82       	std	Z+5, r7	; 0x05
	
	return command;
	
}
 6d6:	80 91 4b 20 	lds	r24, 0x204B
 6da:	90 91 4c 20 	lds	r25, 0x204C
 6de:	df 91       	pop	r29
 6e0:	cf 91       	pop	r28
 6e2:	1f 91       	pop	r17
 6e4:	0f 91       	pop	r16
 6e6:	ff 90       	pop	r15
 6e8:	ef 90       	pop	r14
 6ea:	df 90       	pop	r13
 6ec:	cf 90       	pop	r12
 6ee:	bf 90       	pop	r11
 6f0:	af 90       	pop	r10
 6f2:	9f 90       	pop	r9
 6f4:	8f 90       	pop	r8
 6f6:	7f 90       	pop	r7
 6f8:	08 95       	ret

000006fa <UpdateEulerAngles>:
OUTPUT:
DISCRIPTION:   Read in data from the IMU.  Most of the IMU data are 16 bits sorted in 32 bit registers, see
data sheet for read commands
*********************************************************************************************************** */
void UpdateEulerAngles()
{
 6fa:	0f 93       	push	r16
 6fc:	1f 93       	push	r17
 6fe:	cf 93       	push	r28
 700:	df 93       	push	r29

	PORTF.OUTCLR = PIN4_bm;
 702:	c0 ea       	ldi	r28, 0xA0	; 160
 704:	d6 e0       	ldi	r29, 0x06	; 6
 706:	10 e1       	ldi	r17, 0x10	; 16
 708:	1e 83       	std	Y+6, r17	; 0x06

	uint8_t dummy_read = 0x00;
	//psi = yaw  phi = roll    theta = pitch
	dummy_read = spiIMU_write_read(READ_COMMAND);
 70a:	80 e0       	ldi	r24, 0x00	; 0
 70c:	90 e0       	ldi	r25, 0x00	; 0
 70e:	03 d2       	rcall	.+1030   	; 0xb16 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(UM6_EULER_PHI_THETA);
 710:	82 e6       	ldi	r24, 0x62	; 98
 712:	90 e0       	ldi	r25, 0x00	; 0
 714:	00 d2       	rcall	.+1024   	; 0xb16 <spiIMU_write_read>
	
	//MSB first
	rollAxis.attitude_feedback = (spiIMU_write_read(DUMMY_READ)<< 8) | spiIMU_write_read(DUMMY_READ);
 716:	80 e0       	ldi	r24, 0x00	; 0
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	fd d1       	rcall	.+1018   	; 0xb16 <spiIMU_write_read>
 71c:	08 2f       	mov	r16, r24
 71e:	80 e0       	ldi	r24, 0x00	; 0
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	f9 d1       	rcall	.+1010   	; 0xb16 <spiIMU_write_read>
 724:	30 2f       	mov	r19, r16
 726:	20 e0       	ldi	r18, 0x00	; 0
 728:	82 2b       	or	r24, r18
 72a:	93 2b       	or	r25, r19
 72c:	80 93 1f 20 	sts	0x201F, r24
 730:	90 93 20 20 	sts	0x2020, r25

	pitchAxis.attitude_feedback = (spiIMU_write_read(DUMMY_READ)<< 8) | spiIMU_write_read(UM6_EULER_PSI);
 734:	80 e0       	ldi	r24, 0x00	; 0
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	ee d1       	rcall	.+988    	; 0xb16 <spiIMU_write_read>
 73a:	08 2f       	mov	r16, r24
 73c:	83 e6       	ldi	r24, 0x63	; 99
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	ea d1       	rcall	.+980    	; 0xb16 <spiIMU_write_read>
 742:	30 2f       	mov	r19, r16
 744:	20 e0       	ldi	r18, 0x00	; 0
 746:	82 2b       	or	r24, r18
 748:	93 2b       	or	r25, r19
 74a:	80 93 6c 20 	sts	0x206C, r24
 74e:	90 93 6d 20 	sts	0x206D, r25
	
	yawAxis.attitude_feedback = (spiIMU_write_read(DUMMY_READ)<< 8) | spiIMU_write_read(DUMMY_READ);
 752:	80 e0       	ldi	r24, 0x00	; 0
 754:	90 e0       	ldi	r25, 0x00	; 0
 756:	df d1       	rcall	.+958    	; 0xb16 <spiIMU_write_read>
 758:	08 2f       	mov	r16, r24
 75a:	80 e0       	ldi	r24, 0x00	; 0
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	db d1       	rcall	.+950    	; 0xb16 <spiIMU_write_read>
 760:	30 2f       	mov	r19, r16
 762:	20 e0       	ldi	r18, 0x00	; 0
 764:	82 2b       	or	r24, r18
 766:	93 2b       	or	r25, r19
 768:	80 93 00 21 	sts	0x2100, r24
 76c:	90 93 01 21 	sts	0x2101, r25

	dummy_read = spiIMU_write_read(DUMMY_READ);     dummy_read =  spiIMU_write_read(UM6_GYRO_PROC_XY);			// reserved bytes
 770:	80 e0       	ldi	r24, 0x00	; 0
 772:	90 e0       	ldi	r25, 0x00	; 0
 774:	d0 d1       	rcall	.+928    	; 0xb16 <spiIMU_write_read>
 776:	8c e5       	ldi	r24, 0x5C	; 92
 778:	90 e0       	ldi	r25, 0x00	; 0
 77a:	cd d1       	rcall	.+922    	; 0xb16 <spiIMU_write_read>
	
	pitchAxis.rate_feedback  = (spiIMU_write_read(DUMMY_READ)<< 8) | spiIMU_write_read(DUMMY_READ);
 77c:	80 e0       	ldi	r24, 0x00	; 0
 77e:	90 e0       	ldi	r25, 0x00	; 0
 780:	ca d1       	rcall	.+916    	; 0xb16 <spiIMU_write_read>
 782:	08 2f       	mov	r16, r24
 784:	80 e0       	ldi	r24, 0x00	; 0
 786:	90 e0       	ldi	r25, 0x00	; 0
 788:	c6 d1       	rcall	.+908    	; 0xb16 <spiIMU_write_read>
 78a:	30 2f       	mov	r19, r16
 78c:	20 e0       	ldi	r18, 0x00	; 0
 78e:	82 2b       	or	r24, r18
 790:	93 2b       	or	r25, r19
 792:	80 93 6e 20 	sts	0x206E, r24
 796:	90 93 6f 20 	sts	0x206F, r25

	rollAxis.rate_feedback = (spiIMU_write_read(DUMMY_READ)<< 8) | spiIMU_write_read(UM6_GYRO_PROC_Z);
 79a:	80 e0       	ldi	r24, 0x00	; 0
 79c:	90 e0       	ldi	r25, 0x00	; 0
 79e:	bb d1       	rcall	.+886    	; 0xb16 <spiIMU_write_read>
 7a0:	08 2f       	mov	r16, r24
 7a2:	8d e5       	ldi	r24, 0x5D	; 93
 7a4:	90 e0       	ldi	r25, 0x00	; 0
 7a6:	b7 d1       	rcall	.+878    	; 0xb16 <spiIMU_write_read>
 7a8:	30 2f       	mov	r19, r16
 7aa:	20 e0       	ldi	r18, 0x00	; 0
 7ac:	82 2b       	or	r24, r18
 7ae:	93 2b       	or	r25, r19
 7b0:	80 93 21 20 	sts	0x2021, r24
 7b4:	90 93 22 20 	sts	0x2022, r25
	
	yawAxis.rate_feedback = (spiIMU_write_read(DUMMY_READ)<< 8) | spiIMU_write_read(DUMMY_READ);
 7b8:	80 e0       	ldi	r24, 0x00	; 0
 7ba:	90 e0       	ldi	r25, 0x00	; 0
 7bc:	ac d1       	rcall	.+856    	; 0xb16 <spiIMU_write_read>
 7be:	08 2f       	mov	r16, r24
 7c0:	80 e0       	ldi	r24, 0x00	; 0
 7c2:	90 e0       	ldi	r25, 0x00	; 0
 7c4:	a8 d1       	rcall	.+848    	; 0xb16 <spiIMU_write_read>
 7c6:	30 2f       	mov	r19, r16
 7c8:	20 e0       	ldi	r18, 0x00	; 0
 7ca:	82 2b       	or	r24, r18
 7cc:	93 2b       	or	r25, r19
 7ce:	80 93 02 21 	sts	0x2102, r24
 7d2:	90 93 03 21 	sts	0x2103, r25

	dummy_read = spiIMU_write_read(DUMMY_READ);     dummy_read =  spiIMU_write_read(DUMMY_READ);			// reserved bytes
 7d6:	80 e0       	ldi	r24, 0x00	; 0
 7d8:	90 e0       	ldi	r25, 0x00	; 0
 7da:	9d d1       	rcall	.+826    	; 0xb16 <spiIMU_write_read>
 7dc:	80 e0       	ldi	r24, 0x00	; 0
 7de:	90 e0       	ldi	r25, 0x00	; 0
 7e0:	9a d1       	rcall	.+820    	; 0xb16 <spiIMU_write_read>
	


	PORTF.OUTSET = PIN4_bm;
 7e2:	1d 83       	std	Y+5, r17	; 0x05
	//
	//rollAxis.attitude_feedback /= CONVERT_EULER_TO_DEG;
	//pitchAxis.attitude_feedback /= CONVERT_EULER_TO_DEG;
	//yawAxis.attitude_feedback /= CONVERT_EULER_TO_DEG;
	
}
 7e4:	df 91       	pop	r29
 7e6:	cf 91       	pop	r28
 7e8:	1f 91       	pop	r17
 7ea:	0f 91       	pop	r16
 7ec:	08 95       	ret

000007ee <ControlLoop>:
*********************************************************************************************************** */
void ControlLoop()
{
	

	int16counter++;
 7ee:	80 91 2c 21 	lds	r24, 0x212C
 7f2:	90 91 2d 21 	lds	r25, 0x212D
 7f6:	01 96       	adiw	r24, 0x01	; 1
 7f8:	80 93 2c 21 	sts	0x212C, r24
 7fc:	90 93 2d 21 	sts	0x212D, r25
	UpdateEulerAngles();
 800:	7c df       	rcall	.-264    	; 0x6fa <UpdateEulerAngles>
	SetPulseWidths();
 802:	23 de       	rcall	.-954    	; 0x44a <SetPulseWidths>
	//PI_attitude_rate(&pitchAxis);
	pid_attitude_rate(&pitchAxis);
 804:	8e e4       	ldi	r24, 0x4E	; 78
 806:	90 e2       	ldi	r25, 0x20	; 32
 808:	1a dd       	rcall	.-1484   	; 0x23e <pid_attitude_rate>
	//PI_rate(&pitchAxis);

	if (int16counter >= 31)
 80a:	80 91 2c 21 	lds	r24, 0x212C
 80e:	90 91 2d 21 	lds	r25, 0x212D
 812:	4f 97       	sbiw	r24, 0x1f	; 31
 814:	28 f0       	brcs	.+10     	; 0x820 <ControlLoop+0x32>

	{

		WriteToPC_SPI();	// 400uSec	
 816:	72 de       	rcall	.-796    	; 0x4fc <WriteToPC_SPI>
		int16counter = 0;
 818:	10 92 2c 21 	sts	0x212C, r1
 81c:	10 92 2d 21 	sts	0x212D, r1
 820:	08 95       	ret

00000822 <init32MHzClock>:
*********************************************************************************************************** */
void init32MHzClock(void)
{

	//	Enable the 32 MHz internal RC oscillator.
	OSC.CTRL|=OSC_RC32MEN_bm;
 822:	e0 e5       	ldi	r30, 0x50	; 80
 824:	f0 e0       	ldi	r31, 0x00	; 0
 826:	80 81       	ld	r24, Z
 828:	82 60       	ori	r24, 0x02	; 2
 82a:	80 83       	st	Z, r24
	//	The R32MRFY flag is set when the 32 MHz internal RC oscillator is stable
	//	and ready to be used as the System Clock source.
	while(!(OSC.STATUS &OSC_RC32MRDY_bm ));
 82c:	81 81       	ldd	r24, Z+1	; 0x01
 82e:	81 ff       	sbrs	r24, 1
 830:	fd cf       	rjmp	.-6      	; 0x82c <init32MHzClock+0xa>
	CCP=CCP_IOREG_gc;
 832:	88 ed       	ldi	r24, 0xD8	; 216
 834:	84 bf       	out	0x34, r24	; 52
	//	Select the 32MHz RC oscillator for the system clock
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
 836:	81 e0       	ldi	r24, 0x01	; 1
 838:	80 93 40 00 	sts	0x0040, r24
 83c:	08 95       	ret

0000083e <intiLoopTimer>:
void intiLoopTimer()
{
	

	// Set the timer prescale.
	TCD0.CTRLA = TC_CLKSEL_DIV4_gc;
 83e:	e0 e0       	ldi	r30, 0x00	; 0
 840:	f9 e0       	ldi	r31, 0x09	; 9
 842:	83 e0       	ldi	r24, 0x03	; 3
 844:	80 83       	st	Z, r24

	/* Configure the timer for normal counting. */
	TCD0.CTRLB = TC_WGMODE_NORMAL_gc;
 846:	11 82       	std	Z+1, r1	; 0x01

	
	// 21000 counts set f = 305HZ by trial and error
	// frequency depends on IMU SPI clock pre scaler?
	// TCD0.PER = 18000;
	TCD0.PER = 21000;
 848:	88 e0       	ldi	r24, 0x08	; 8
 84a:	92 e5       	ldi	r25, 0x52	; 82
 84c:	86 a3       	std	Z+38, r24	; 0x26
 84e:	97 a3       	std	Z+39, r25	; 0x27

	//Configure timer to generate an interrupt on overflow. */
	TCD0.INTCTRLA = TC_OVFINTLVL_LO_gc;
 850:	81 e0       	ldi	r24, 0x01	; 1
 852:	86 83       	std	Z+6, r24	; 0x06

	/* Enable this interrupt level. */
	PMIC.CTRL |= PMIC_LOLVLEN_bm;
 854:	e0 ea       	ldi	r30, 0xA0	; 160
 856:	f0 e0       	ldi	r31, 0x00	; 0
 858:	82 81       	ldd	r24, Z+2	; 0x02
 85a:	81 60       	ori	r24, 0x01	; 1
 85c:	82 83       	std	Z+2, r24	; 0x02
 85e:	08 95       	ret

00000860 <zeroSensor>:




uint8_t zeroSensor()
{
 860:	1f 93       	push	r17
 862:	cf 93       	push	r28
 864:	df 93       	push	r29
	
	PORTF.OUTCLR = PIN4_bm;
 866:	c0 ea       	ldi	r28, 0xA0	; 160
 868:	d6 e0       	ldi	r29, 0x06	; 6
 86a:	10 e1       	ldi	r17, 0x10	; 16
 86c:	1e 83       	std	Y+6, r17	; 0x06
	//zero mad 0xB0
	
	uint8_t dummy_read = 0x00;
	//psi = yaw  phi = roll    theta = pitch
	//0x01 0xAC 0x00 0x00 0x00 0x00
	dummy_read = spiIMU_write_read(WRITE_COMMAND);
 86e:	81 e0       	ldi	r24, 0x01	; 1
 870:	90 e0       	ldi	r25, 0x00	; 0
 872:	51 d1       	rcall	.+674    	; 0xb16 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(ZERO_GYROS);
 874:	8c ea       	ldi	r24, 0xAC	; 172
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	4e d1       	rcall	.+668    	; 0xb16 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(DUMMY_READ);
 87a:	80 e0       	ldi	r24, 0x00	; 0
 87c:	90 e0       	ldi	r25, 0x00	; 0
 87e:	4b d1       	rcall	.+662    	; 0xb16 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(DUMMY_READ);
 880:	80 e0       	ldi	r24, 0x00	; 0
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	48 d1       	rcall	.+656    	; 0xb16 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(DUMMY_READ);
 886:	80 e0       	ldi	r24, 0x00	; 0
 888:	90 e0       	ldi	r25, 0x00	; 0
 88a:	45 d1       	rcall	.+650    	; 0xb16 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(DUMMY_READ);
 88c:	80 e0       	ldi	r24, 0x00	; 0
 88e:	90 e0       	ldi	r25, 0x00	; 0
 890:	42 d1       	rcall	.+644    	; 0xb16 <spiIMU_write_read>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 892:	8f e8       	ldi	r24, 0x8F	; 143
 894:	91 e0       	ldi	r25, 0x01	; 1
 896:	01 97       	sbiw	r24, 0x01	; 1
 898:	f1 f7       	brne	.-4      	; 0x896 <zeroSensor+0x36>
 89a:	00 c0       	rjmp	.+0      	; 0x89c <zeroSensor+0x3c>
 89c:	00 00       	nop
	
	_delay_us(50);
	dummy_read = spiIMU_write_read(WRITE_COMMAND);
 89e:	81 e0       	ldi	r24, 0x01	; 1
 8a0:	90 e0       	ldi	r25, 0x00	; 0
 8a2:	39 d1       	rcall	.+626    	; 0xb16 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(SET_ACCEL_REF);
 8a4:	8f ea       	ldi	r24, 0xAF	; 175
 8a6:	90 e0       	ldi	r25, 0x00	; 0
 8a8:	36 d1       	rcall	.+620    	; 0xb16 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(DUMMY_READ);
 8aa:	80 e0       	ldi	r24, 0x00	; 0
 8ac:	90 e0       	ldi	r25, 0x00	; 0
 8ae:	33 d1       	rcall	.+614    	; 0xb16 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(DUMMY_READ);
 8b0:	80 e0       	ldi	r24, 0x00	; 0
 8b2:	90 e0       	ldi	r25, 0x00	; 0
 8b4:	30 d1       	rcall	.+608    	; 0xb16 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(DUMMY_READ);
 8b6:	80 e0       	ldi	r24, 0x00	; 0
 8b8:	90 e0       	ldi	r25, 0x00	; 0
 8ba:	2d d1       	rcall	.+602    	; 0xb16 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(DUMMY_READ);
 8bc:	80 e0       	ldi	r24, 0x00	; 0
 8be:	90 e0       	ldi	r25, 0x00	; 0
 8c0:	2a d1       	rcall	.+596    	; 0xb16 <spiIMU_write_read>
 8c2:	8f e8       	ldi	r24, 0x8F	; 143
 8c4:	91 e0       	ldi	r25, 0x01	; 1
 8c6:	01 97       	sbiw	r24, 0x01	; 1
 8c8:	f1 f7       	brne	.-4      	; 0x8c6 <zeroSensor+0x66>
 8ca:	00 c0       	rjmp	.+0      	; 0x8cc <zeroSensor+0x6c>
 8cc:	00 00       	nop
	

	_delay_us(50);
	dummy_read = spiIMU_write_read(WRITE_COMMAND);
 8ce:	81 e0       	ldi	r24, 0x01	; 1
 8d0:	90 e0       	ldi	r25, 0x00	; 0
 8d2:	21 d1       	rcall	.+578    	; 0xb16 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(SET_MAG_REF);
 8d4:	80 eb       	ldi	r24, 0xB0	; 176
 8d6:	90 e0       	ldi	r25, 0x00	; 0
 8d8:	1e d1       	rcall	.+572    	; 0xb16 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(DUMMY_READ);
 8da:	80 e0       	ldi	r24, 0x00	; 0
 8dc:	90 e0       	ldi	r25, 0x00	; 0
 8de:	1b d1       	rcall	.+566    	; 0xb16 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(DUMMY_READ);
 8e0:	80 e0       	ldi	r24, 0x00	; 0
 8e2:	90 e0       	ldi	r25, 0x00	; 0
 8e4:	18 d1       	rcall	.+560    	; 0xb16 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(DUMMY_READ);
 8e6:	80 e0       	ldi	r24, 0x00	; 0
 8e8:	90 e0       	ldi	r25, 0x00	; 0
 8ea:	15 d1       	rcall	.+554    	; 0xb16 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(DUMMY_READ);
 8ec:	80 e0       	ldi	r24, 0x00	; 0
 8ee:	90 e0       	ldi	r25, 0x00	; 0
 8f0:	12 d1       	rcall	.+548    	; 0xb16 <spiIMU_write_read>
 8f2:	8f e8       	ldi	r24, 0x8F	; 143
 8f4:	91 e0       	ldi	r25, 0x01	; 1
 8f6:	01 97       	sbiw	r24, 0x01	; 1
 8f8:	f1 f7       	brne	.-4      	; 0x8f6 <zeroSensor+0x96>
 8fa:	00 c0       	rjmp	.+0      	; 0x8fc <zeroSensor+0x9c>
 8fc:	00 00       	nop
	
	_delay_us(50);
	dummy_read = spiIMU_write_read(WRITE_COMMAND);
 8fe:	81 e0       	ldi	r24, 0x01	; 1
 900:	90 e0       	ldi	r25, 0x00	; 0
 902:	09 d1       	rcall	.+530    	; 0xb16 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(UM6_RESET_EKF);
 904:	8d ea       	ldi	r24, 0xAD	; 173
 906:	90 e0       	ldi	r25, 0x00	; 0
 908:	06 d1       	rcall	.+524    	; 0xb16 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(DUMMY_READ);
 90a:	80 e0       	ldi	r24, 0x00	; 0
 90c:	90 e0       	ldi	r25, 0x00	; 0
 90e:	03 d1       	rcall	.+518    	; 0xb16 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(DUMMY_READ);
 910:	80 e0       	ldi	r24, 0x00	; 0
 912:	90 e0       	ldi	r25, 0x00	; 0
 914:	00 d1       	rcall	.+512    	; 0xb16 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(DUMMY_READ);
 916:	80 e0       	ldi	r24, 0x00	; 0
 918:	90 e0       	ldi	r25, 0x00	; 0
 91a:	fd d0       	rcall	.+506    	; 0xb16 <spiIMU_write_read>
	dummy_read = spiIMU_write_read(DUMMY_READ);
 91c:	80 e0       	ldi	r24, 0x00	; 0
 91e:	90 e0       	ldi	r25, 0x00	; 0
 920:	fa d0       	rcall	.+500    	; 0xb16 <spiIMU_write_read>
	

	PORTF.OUTSET = PIN4_bm;
 922:	1d 83       	std	Y+5, r17	; 0x05
	
	return 1;
	
}
 924:	81 e0       	ldi	r24, 0x01	; 1
 926:	df 91       	pop	r29
 928:	cf 91       	pop	r28
 92a:	1f 91       	pop	r17
 92c:	08 95       	ret

0000092e <initSystem>:
  INPUT:
  OUTPUT:
  DISCRIPTION:  Do all the pre control loop set up tasks
*********************************************************************************************************** */
uint8_t initSystem()
{
 92e:	cf 93       	push	r28
 930:	df 93       	push	r29
	PORTA.DIRSET = 0xFF;			//  LEDS
 932:	c0 e0       	ldi	r28, 0x00	; 0
 934:	d6 e0       	ldi	r29, 0x06	; 6
 936:	8f ef       	ldi	r24, 0xFF	; 255
 938:	89 83       	std	Y+1, r24	; 0x01
	sei();
 93a:	78 94       	sei
	initUART();
 93c:	62 d1       	rcall	.+708    	; 0xc02 <initUART>
	spi_set_up();
 93e:	f8 d0       	rcall	.+496    	; 0xb30 <spi_set_up>
	intPID_gains();
 940:	b0 dd       	rcall	.-1184   	; 0x4a2 <intPID_gains>
	zeroSensor();
 942:	8e df       	rcall	.-228    	; 0x860 <zeroSensor>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 944:	2f ef       	ldi	r18, 0xFF	; 255
 946:	8f e4       	ldi	r24, 0x4F	; 79
 948:	93 ec       	ldi	r25, 0xC3	; 195
 94a:	21 50       	subi	r18, 0x01	; 1
 94c:	80 40       	sbci	r24, 0x00	; 0
 94e:	90 40       	sbci	r25, 0x00	; 0
 950:	e1 f7       	brne	.-8      	; 0x94a <initSystem+0x1c>
 952:	00 c0       	rjmp	.+0      	; 0x954 <initSystem+0x26>
 954:	00 00       	nop
	_delay_ms(2000);
	zeroSensor();
 956:	84 df       	rcall	.-248    	; 0x860 <zeroSensor>
	PORTA.DIRSET = 0x00;			//  LEDS
 958:	19 82       	std	Y+1, r1	; 0x01
	return 1;

}
 95a:	81 e0       	ldi	r24, 0x01	; 1
 95c:	df 91       	pop	r29
 95e:	cf 91       	pop	r28
 960:	08 95       	ret

00000962 <main>:
OUTPUT:
DISCRIPTION: Main is used for set up and then just an infinite loop
*********************************************************************************************************** */
int main()
{
		PORTA.OUTTGL = 0x0F;
 962:	8f e0       	ldi	r24, 0x0F	; 15
 964:	e0 e0       	ldi	r30, 0x00	; 0
 966:	f6 e0       	ldi	r31, 0x06	; 6
 968:	87 83       	std	Z+7, r24	; 0x07
		systemState = SYSTEM_STATE_STARTUP;
 96a:	10 92 00 20 	sts	0x2000, r1
		init32MHzClock();
 96e:	59 df       	rcall	.-334    	; 0x822 <init32MHzClock>
		intiLoopTimer();
 970:	66 df       	rcall	.-308    	; 0x83e <intiLoopTimer>
		initSystem();
 972:	dd df       	rcall	.-70     	; 0x92e <initSystem>

		while(1)
		{
			nop();
 974:	00 00       	nop
 976:	fe cf       	rjmp	.-4      	; 0x974 <main+0x12>

00000978 <State>:
INPUT:
OUTPUT:
DISCRIPTION:   Determine what to do based on systemState.  Used to initializes and arm the quad.
*********************************************************************************************************** */
void State()
{
 978:	1f 93       	push	r17
 97a:	cf 93       	push	r28
 97c:	df 93       	push	r29
	
	//sendUM6_Data();
	switch(systemState)
 97e:	80 91 00 20 	lds	r24, 0x2000
 982:	82 30       	cpi	r24, 0x02	; 2
 984:	69 f1       	breq	.+90     	; 0x9e0 <State+0x68>
 986:	30 f4       	brcc	.+12     	; 0x994 <State+0x1c>
 988:	88 23       	and	r24, r24
 98a:	59 f0       	breq	.+22     	; 0x9a2 <State+0x2a>
 98c:	81 30       	cpi	r24, 0x01	; 1
 98e:	09 f0       	breq	.+2      	; 0x992 <State+0x1a>
 990:	7b c0       	rjmp	.+246    	; 0xa88 <State+0x110>
 992:	15 c0       	rjmp	.+42     	; 0x9be <State+0x46>
 994:	84 30       	cpi	r24, 0x04	; 4
 996:	09 f4       	brne	.+2      	; 0x99a <State+0x22>
 998:	41 c0       	rjmp	.+130    	; 0xa1c <State+0xa4>
 99a:	85 30       	cpi	r24, 0x05	; 5
 99c:	09 f0       	breq	.+2      	; 0x9a0 <State+0x28>
 99e:	74 c0       	rjmp	.+232    	; 0xa88 <State+0x110>
 9a0:	44 c0       	rjmp	.+136    	; 0xa2a <State+0xb2>
	{
		case SYSTEM_STATE_STARTUP:
			PORTA.OUTTGL = 0x00;
 9a2:	e0 e0       	ldi	r30, 0x00	; 0
 9a4:	f6 e0       	ldi	r31, 0x06	; 6
 9a6:	17 82       	std	Z+7, r1	; 0x07
			PORTA.OUTTGL = PIN2_bm;
 9a8:	84 e0       	ldi	r24, 0x04	; 4
 9aa:	87 83       	std	Z+7, r24	; 0x07
			if (initSystem() ==  1)
 9ac:	c0 df       	rcall	.-128    	; 0x92e <initSystem>
 9ae:	81 30       	cpi	r24, 0x01	; 1
 9b0:	11 f4       	brne	.+4      	; 0x9b6 <State+0x3e>
			{
				systemState = SYSTEM_ZERO;
 9b2:	80 93 00 20 	sts	0x2000, r24
			}
			PORTA.OUTSET = 0x00;
 9b6:	e0 e0       	ldi	r30, 0x00	; 0
 9b8:	f6 e0       	ldi	r31, 0x06	; 6
 9ba:	15 82       	std	Z+5, r1	; 0x05
			break;
 9bc:	65 c0       	rjmp	.+202    	; 0xa88 <State+0x110>
		
		case SYSTEM_ZERO:
			// read commands from the PC and zero the system as necessary
			// PC transaction, read in command and send out sensor data
			UpdateEulerAngles();
 9be:	9d de       	rcall	.-710    	; 0x6fa <UpdateEulerAngles>
		
			PORTA.OUTTGL = PIN3_bm;
 9c0:	88 e0       	ldi	r24, 0x08	; 8
 9c2:	e0 e0       	ldi	r30, 0x00	; 0
 9c4:	f6 e0       	ldi	r31, 0x06	; 6
 9c6:	87 83       	std	Z+7, r24	; 0x07
			//  get the last command sent form the PC, either zero the IMU or get ready to arm the system
			if (WriteToPC_SPI() == SYSTEM_ZERO)
 9c8:	99 dd       	rcall	.-1230   	; 0x4fc <WriteToPC_SPI>
 9ca:	01 97       	sbiw	r24, 0x01	; 1
 9cc:	09 f4       	brne	.+2      	; 0x9d0 <State+0x58>
			{
				zeroSensor();
 9ce:	48 df       	rcall	.-368    	; 0x860 <zeroSensor>
			}
			
			if (WriteToPC_SPI() == SYSTEM_ARM)
 9d0:	95 dd       	rcall	.-1238   	; 0x4fc <WriteToPC_SPI>
 9d2:	02 97       	sbiw	r24, 0x02	; 2
 9d4:	09 f0       	breq	.+2      	; 0x9d8 <State+0x60>
 9d6:	58 c0       	rjmp	.+176    	; 0xa88 <State+0x110>
			{
				systemState = SYSTEM_ARM;
 9d8:	82 e0       	ldi	r24, 0x02	; 2
 9da:	80 93 00 20 	sts	0x2000, r24
 9de:	54 c0       	rjmp	.+168    	; 0xa88 <State+0x110>
		
			break;
		
		case SYSTEM_ARM:
			//Arm the system by enabling the PWM
			PORTA.OUTTGL = 0x00;
 9e0:	c0 e0       	ldi	r28, 0x00	; 0
 9e2:	d6 e0       	ldi	r29, 0x06	; 6
 9e4:	1f 82       	std	Y+7, r1	; 0x07
			PORTA.OUTTGL = PIN2_bm;
 9e6:	14 e0       	ldi	r17, 0x04	; 4
 9e8:	1f 83       	std	Y+7, r17	; 0x07
			initPWM();
 9ea:	e6 dc       	rcall	.-1588   	; 0x3b8 <initPWM>
			systemState = SYSTEM_STATE_FLY;
 9ec:	10 93 00 20 	sts	0x2000, r17
			PORTA.OUTTGL = PIN2_bm;
 9f0:	1f 83       	std	Y+7, r17	; 0x07
 9f2:	2f ef       	ldi	r18, 0xFF	; 255
 9f4:	37 ea       	ldi	r19, 0xA7	; 167
 9f6:	81 e6       	ldi	r24, 0x61	; 97
 9f8:	21 50       	subi	r18, 0x01	; 1
 9fa:	30 40       	sbci	r19, 0x00	; 0
 9fc:	80 40       	sbci	r24, 0x00	; 0
 9fe:	e1 f7       	brne	.-8      	; 0x9f8 <State+0x80>
 a00:	00 c0       	rjmp	.+0      	; 0xa02 <State+0x8a>
 a02:	00 00       	nop
			_delay_ms(1000);
			PORTA.OUTTGL = PIN2_bm;
 a04:	1f 83       	std	Y+7, r17	; 0x07
 a06:	9f ef       	ldi	r25, 0xFF	; 255
 a08:	27 ea       	ldi	r18, 0xA7	; 167
 a0a:	31 e6       	ldi	r19, 0x61	; 97
 a0c:	91 50       	subi	r25, 0x01	; 1
 a0e:	20 40       	sbci	r18, 0x00	; 0
 a10:	30 40       	sbci	r19, 0x00	; 0
 a12:	e1 f7       	brne	.-8      	; 0xa0c <State+0x94>
 a14:	00 c0       	rjmp	.+0      	; 0xa16 <State+0x9e>
 a16:	00 00       	nop
			_delay_ms(1000);
			PORTA.OUTTGL = PIN2_bm;
 a18:	1f 83       	std	Y+7, r17	; 0x07
			break;
 a1a:	36 c0       	rjmp	.+108    	; 0xa88 <State+0x110>
		
		case SYSTEM_STATE_FLY:
			// run the control loop
			PORTA.OUTCLR = 0x00;
 a1c:	e0 e0       	ldi	r30, 0x00	; 0
 a1e:	f6 e0       	ldi	r31, 0x06	; 6
 a20:	16 82       	std	Z+6, r1	; 0x06
			PORTA.OUTTGL = PIN3_bm;
 a22:	88 e0       	ldi	r24, 0x08	; 8
 a24:	87 83       	std	Z+7, r24	; 0x07
			ControlLoop();
 a26:	e3 de       	rcall	.-570    	; 0x7ee <ControlLoop>
			break;
 a28:	2f c0       	rjmp	.+94     	; 0xa88 <State+0x110>
			
			case SYSTEM_DISARM:
			
			DisablePWM();
 a2a:	f0 dc       	rcall	.-1568   	; 0x40c <DisablePWM>
			PORTA.OUTTGL = PIN2_bm;
 a2c:	e0 e0       	ldi	r30, 0x00	; 0
 a2e:	f6 e0       	ldi	r31, 0x06	; 6
 a30:	84 e0       	ldi	r24, 0x04	; 4
 a32:	87 83       	std	Z+7, r24	; 0x07
 a34:	9f ef       	ldi	r25, 0xFF	; 255
 a36:	27 ea       	ldi	r18, 0xA7	; 167
 a38:	31 e6       	ldi	r19, 0x61	; 97
 a3a:	91 50       	subi	r25, 0x01	; 1
 a3c:	20 40       	sbci	r18, 0x00	; 0
 a3e:	30 40       	sbci	r19, 0x00	; 0
 a40:	e1 f7       	brne	.-8      	; 0xa3a <State+0xc2>
 a42:	00 c0       	rjmp	.+0      	; 0xa44 <State+0xcc>
 a44:	00 00       	nop
			_delay_ms(1000);
			PORTA.OUTTGL = PIN2_bm;
 a46:	87 83       	std	Z+7, r24	; 0x07
 a48:	9f ef       	ldi	r25, 0xFF	; 255
 a4a:	27 ea       	ldi	r18, 0xA7	; 167
 a4c:	31 e6       	ldi	r19, 0x61	; 97
 a4e:	91 50       	subi	r25, 0x01	; 1
 a50:	20 40       	sbci	r18, 0x00	; 0
 a52:	30 40       	sbci	r19, 0x00	; 0
 a54:	e1 f7       	brne	.-8      	; 0xa4e <State+0xd6>
 a56:	00 c0       	rjmp	.+0      	; 0xa58 <State+0xe0>
 a58:	00 00       	nop
			_delay_ms(1000);
			PORTA.OUTTGL = PIN2_bm;
 a5a:	87 83       	std	Z+7, r24	; 0x07
 a5c:	9f ef       	ldi	r25, 0xFF	; 255
 a5e:	27 ea       	ldi	r18, 0xA7	; 167
 a60:	31 e6       	ldi	r19, 0x61	; 97
 a62:	91 50       	subi	r25, 0x01	; 1
 a64:	20 40       	sbci	r18, 0x00	; 0
 a66:	30 40       	sbci	r19, 0x00	; 0
 a68:	e1 f7       	brne	.-8      	; 0xa62 <State+0xea>
 a6a:	00 c0       	rjmp	.+0      	; 0xa6c <State+0xf4>
 a6c:	00 00       	nop
			_delay_ms(1000);
			PORTA.OUTTGL = PIN2_bm;
 a6e:	87 83       	std	Z+7, r24	; 0x07
 a70:	9f ef       	ldi	r25, 0xFF	; 255
 a72:	27 ea       	ldi	r18, 0xA7	; 167
 a74:	31 e6       	ldi	r19, 0x61	; 97
 a76:	91 50       	subi	r25, 0x01	; 1
 a78:	20 40       	sbci	r18, 0x00	; 0
 a7a:	30 40       	sbci	r19, 0x00	; 0
 a7c:	e1 f7       	brne	.-8      	; 0xa76 <State+0xfe>
 a7e:	00 c0       	rjmp	.+0      	; 0xa80 <State+0x108>
 a80:	00 00       	nop
			_delay_ms(1000);
			PORTA.OUTTGL = PIN2_bm;
 a82:	87 83       	std	Z+7, r24	; 0x07
			systemState = SYSTEM_STATE_STARTUP;
 a84:	10 92 00 20 	sts	0x2000, r1
		
		default:
			break;
		
	}			// end case
}
 a88:	df 91       	pop	r29
 a8a:	cf 91       	pop	r28
 a8c:	1f 91       	pop	r17
 a8e:	08 95       	ret

00000a90 <__vector_77>:
  INPUT:
  OUTPUT:
  DISCRIPTION:   Interrupt vector
*********************************************************************************************************** */
ISR(TCD0_OVF_vect)
{
 a90:	1f 92       	push	r1
 a92:	0f 92       	push	r0
 a94:	0f b6       	in	r0, 0x3f	; 63
 a96:	0f 92       	push	r0
 a98:	11 24       	eor	r1, r1
 a9a:	08 b6       	in	r0, 0x38	; 56
 a9c:	0f 92       	push	r0
 a9e:	18 be       	out	0x38, r1	; 56
 aa0:	09 b6       	in	r0, 0x39	; 57
 aa2:	0f 92       	push	r0
 aa4:	19 be       	out	0x39, r1	; 57
 aa6:	0b b6       	in	r0, 0x3b	; 59
 aa8:	0f 92       	push	r0
 aaa:	1b be       	out	0x3b, r1	; 59
 aac:	2f 93       	push	r18
 aae:	3f 93       	push	r19
 ab0:	4f 93       	push	r20
 ab2:	5f 93       	push	r21
 ab4:	6f 93       	push	r22
 ab6:	7f 93       	push	r23
 ab8:	8f 93       	push	r24
 aba:	9f 93       	push	r25
 abc:	af 93       	push	r26
 abe:	bf 93       	push	r27
 ac0:	ef 93       	push	r30
 ac2:	ff 93       	push	r31
	
	//ControlLoop();
	 State();
 ac4:	59 df       	rcall	.-334    	; 0x978 <State>
	TCD0.CNT = 0;
 ac6:	e0 e0       	ldi	r30, 0x00	; 0
 ac8:	f9 e0       	ldi	r31, 0x09	; 9
 aca:	10 a2       	std	Z+32, r1	; 0x20
 acc:	11 a2       	std	Z+33, r1	; 0x21
	
}
 ace:	ff 91       	pop	r31
 ad0:	ef 91       	pop	r30
 ad2:	bf 91       	pop	r27
 ad4:	af 91       	pop	r26
 ad6:	9f 91       	pop	r25
 ad8:	8f 91       	pop	r24
 ada:	7f 91       	pop	r23
 adc:	6f 91       	pop	r22
 ade:	5f 91       	pop	r21
 ae0:	4f 91       	pop	r20
 ae2:	3f 91       	pop	r19
 ae4:	2f 91       	pop	r18
 ae6:	0f 90       	pop	r0
 ae8:	0b be       	out	0x3b, r0	; 59
 aea:	0f 90       	pop	r0
 aec:	09 be       	out	0x39, r0	; 57
 aee:	0f 90       	pop	r0
 af0:	08 be       	out	0x38, r0	; 56
 af2:	0f 90       	pop	r0
 af4:	0f be       	out	0x3f, r0	; 63
 af6:	0f 90       	pop	r0
 af8:	1f 90       	pop	r1
 afa:	18 95       	reti

00000afc <spiPC_write_read>:
			  Read the data from the data register, this was on MISO
*********************************************************************************************************** */

unsigned char spiPC_write_read(unsigned char spi_data1)
{
	SPIE.DATA = spi_data1;
 afc:	e0 ec       	ldi	r30, 0xC0	; 192
 afe:	fa e0       	ldi	r31, 0x0A	; 10
 b00:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIE.STATUS & SPI_IF_bm)); // Wait until the data transfer is complete
 b02:	82 81       	ldd	r24, Z+2	; 0x02
 b04:	88 23       	and	r24, r24
 b06:	ec f7       	brge	.-6      	; 0xb02 <spiPC_write_read+0x6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 b08:	80 e4       	ldi	r24, 0x40	; 64
 b0a:	8a 95       	dec	r24
 b0c:	f1 f7       	brne	.-4      	; 0xb0a <spiPC_write_read+0xe>
	_delay_us(6);
	return SPIE.DATA;
 b0e:	e0 ec       	ldi	r30, 0xC0	; 192
 b10:	fa e0       	ldi	r31, 0x0A	; 10
 b12:	83 81       	ldd	r24, Z+3	; 0x03
}
 b14:	08 95       	ret

00000b16 <spiIMU_write_read>:
			  Wait until the interrupt flag is set	
			  Read the data from the data register, this was on MISO
*********************************************************************************************************** */
unsigned char spiIMU_write_read(unsigned char spi_data)
{
	SPIF.DATA = spi_data;
 b16:	e0 ec       	ldi	r30, 0xC0	; 192
 b18:	fb e0       	ldi	r31, 0x0B	; 11
 b1a:	83 83       	std	Z+3, r24	; 0x03
	while(!(SPIF.STATUS & SPI_IF_bm)); // Wait until the data transfer is complete
 b1c:	82 81       	ldd	r24, Z+2	; 0x02
 b1e:	88 23       	and	r24, r24
 b20:	ec f7       	brge	.-6      	; 0xb1c <spiIMU_write_read+0x6>
 b22:	80 e2       	ldi	r24, 0x20	; 32
 b24:	8a 95       	dec	r24
 b26:	f1 f7       	brne	.-4      	; 0xb24 <spiIMU_write_read+0xe>
	_delay_us(3);
	return SPIF.DATA;
 b28:	e0 ec       	ldi	r30, 0xC0	; 192
 b2a:	fb e0       	ldi	r31, 0x0B	; 11
 b2c:	83 81       	ldd	r24, Z+3	; 0x03
}
 b2e:	08 95       	ret

00000b30 <spi_set_up>:
DISCRIPTION:    Initialize SPI master on port F for the IMU communication.
			    Initialize SPI master on port F for the PC communication
*********************************************************************************************************** */
	
void spi_set_up()
{
 b30:	af 92       	push	r10
 b32:	cf 92       	push	r12
 b34:	ef 92       	push	r14
 b36:	0f 93       	push	r16
 b38:	cf 93       	push	r28
 b3a:	df 93       	push	r29
	/* Initialize SPI master on port F for the IMU communication. */
	/* Init SS pin as output with wired AND and pull-up. */
	//*************************************************************
	PORTF.DIRSET = PIN4_bm;
 b3c:	e0 ea       	ldi	r30, 0xA0	; 160
 b3e:	f6 e0       	ldi	r31, 0x06	; 6
 b40:	c0 e1       	ldi	r28, 0x10	; 16
 b42:	c1 83       	std	Z+1, r28	; 0x01
	PORTF.PIN4CTRL = PORT_OPC_WIREDANDPULL_gc;
 b44:	d8 e3       	ldi	r29, 0x38	; 56
 b46:	d4 8b       	std	Z+20, r29	; 0x14

	/* Set SS output to high. (No slave addressed). */
	PORTF.OUTSET = PIN4_bm;
 b48:	c5 83       	std	Z+5, r28	; 0x05

	/* Initialize SPI master on port F for the IMU communication. */
	SPI_MasterInit(&spiMasterF,
 b4a:	0f 2e       	mov	r0, r31
 b4c:	f3 e0       	ldi	r31, 0x03	; 3
 b4e:	af 2e       	mov	r10, r31
 b50:	f0 2d       	mov	r31, r0
 b52:	c1 2c       	mov	r12, r1
 b54:	e1 2c       	mov	r14, r1
 b56:	00 e0       	ldi	r16, 0x00	; 0
 b58:	20 e0       	ldi	r18, 0x00	; 0
 b5a:	40 ea       	ldi	r20, 0xA0	; 160
 b5c:	56 e0       	ldi	r21, 0x06	; 6
 b5e:	60 ec       	ldi	r22, 0xC0	; 192
 b60:	7b e0       	ldi	r23, 0x0B	; 11
 b62:	8e e2       	ldi	r24, 0x2E	; 46
 b64:	91 e2       	ldi	r25, 0x21	; 33
 b66:	1d d0       	rcall	.+58     	; 0xba2 <SPI_MasterInit>
		SPI_MODE_0_gc,							//The UM6 SPI clock (SCK) is active high, with data clocked in on the first rising edge1
		SPI_INTLVL_OFF_gc,
		false,									// false to double clock mode
		SPI_PRESCALER_DIV128_gc);					//32mHz /128 = 250kHz  MAX rate is 400kHz but there is not prescaler

		SPIF.DATA = 0x00;						// init SPI data register
 b68:	e0 ec       	ldi	r30, 0xC0	; 192
 b6a:	fb e0       	ldi	r31, 0x0B	; 11
 b6c:	13 82       	std	Z+3, r1	; 0x03
		
		
		/* Initialize SPI master on port F for the PC communication */
		//*************************************************************
		/* Init SS pin as output with wired AND and pull-up. */
		PORTE.DIRSET = PIN4_bm;
 b6e:	e0 e8       	ldi	r30, 0x80	; 128
 b70:	f6 e0       	ldi	r31, 0x06	; 6
 b72:	c1 83       	std	Z+1, r28	; 0x01
		PORTE.PIN4CTRL = PORT_OPC_WIREDANDPULL_gc;
 b74:	d4 8b       	std	Z+20, r29	; 0x14

		/* Set SS output to high. (No slave addressed). */
		PORTE.OUTSET = PIN4_bm;
 b76:	c5 83       	std	Z+5, r28	; 0x05

		SPI_MasterInit(&spiMasterE,
 b78:	68 94       	set
 b7a:	aa 24       	eor	r10, r10
 b7c:	a1 f8       	bld	r10, 1
 b7e:	20 e0       	ldi	r18, 0x00	; 0
 b80:	40 e8       	ldi	r20, 0x80	; 128
 b82:	56 e0       	ldi	r21, 0x06	; 6
 b84:	60 ec       	ldi	r22, 0xC0	; 192
 b86:	7a e0       	ldi	r23, 0x0A	; 10
 b88:	85 e3       	ldi	r24, 0x35	; 53
 b8a:	91 e2       	ldi	r25, 0x21	; 33
 b8c:	0a d0       	rcall	.+20     	; 0xba2 <SPI_MasterInit>
		false,
		SPI_MODE_0_gc,							//The UM6 SPI clock (SCK) is active high, with data clocked in on the first rising edge1
		SPI_INTLVL_OFF_gc,
		false,									// false to double clock mode
		SPI_PRESCALER_DIV64_gc);				//32mHz /64 = 500,000 bps
		SPIE.DATA = 0x00;						// init SPI data register
 b8e:	e0 ec       	ldi	r30, 0xC0	; 192
 b90:	fa e0       	ldi	r31, 0x0A	; 10
 b92:	13 82       	std	Z+3, r1	; 0x03

}
 b94:	df 91       	pop	r29
 b96:	cf 91       	pop	r28
 b98:	0f 91       	pop	r16
 b9a:	ef 90       	pop	r14
 b9c:	cf 90       	pop	r12
 b9e:	af 90       	pop	r10
 ba0:	08 95       	ret

00000ba2 <SPI_MasterInit>:
                    bool lsbFirst,
                    SPI_MODE_t mode,
                    SPI_INTLVL_t intLevel,
                    bool clk2x,
                    SPI_PRESCALER_t clockDivision)
{
 ba2:	af 92       	push	r10
 ba4:	cf 92       	push	r12
 ba6:	ef 92       	push	r14
 ba8:	0f 93       	push	r16
 baa:	fc 01       	movw	r30, r24
	spi->module         = module;
 bac:	60 83       	st	Z, r22
 bae:	71 83       	std	Z+1, r23	; 0x01
	spi->port           = port;
 bb0:	42 83       	std	Z+2, r20	; 0x02
 bb2:	53 83       	std	Z+3, r21	; 0x03
	spi->interrupted    = false;
 bb4:	14 82       	std	Z+4, r1	; 0x04

	spi->module->CTRL   = clockDivision |                  /* SPI prescaler. */
 bb6:	cc 20       	and	r12, r12
 bb8:	11 f0       	breq	.+4      	; 0xbbe <SPI_MasterInit+0x1c>
 bba:	90 e8       	ldi	r25, 0x80	; 128
 bbc:	01 c0       	rjmp	.+2      	; 0xbc0 <SPI_MasterInit+0x1e>
 bbe:	90 e0       	ldi	r25, 0x00	; 0
 bc0:	22 23       	and	r18, r18
 bc2:	11 f0       	breq	.+4      	; 0xbc8 <SPI_MasterInit+0x26>
 bc4:	80 e2       	ldi	r24, 0x20	; 32
 bc6:	01 c0       	rjmp	.+2      	; 0xbca <SPI_MasterInit+0x28>
 bc8:	80 e0       	ldi	r24, 0x00	; 0
 bca:	00 65       	ori	r16, 0x50	; 80
 bcc:	0a 29       	or	r16, r10
 bce:	09 2b       	or	r16, r25
 bd0:	08 2b       	or	r16, r24
 bd2:	db 01       	movw	r26, r22
 bd4:	0c 93       	st	X, r16
	                      (lsbFirst ? SPI_DORD_bm  : 0) |  /* Data order. */
	                      SPI_MASTER_bm |                  /* SPI master. */
	                      mode;                            /* SPI mode. */

	/* Interrupt level. */
	spi->module->INTCTRL = intLevel;
 bd6:	a0 81       	ld	r26, Z
 bd8:	b1 81       	ldd	r27, Z+1	; 0x01
 bda:	11 96       	adiw	r26, 0x01	; 1
 bdc:	ec 92       	st	X, r14

	/* No assigned data packet. */
	spi->dataPacket = NULL;
 bde:	15 82       	std	Z+5, r1	; 0x05
 be0:	16 82       	std	Z+6, r1	; 0x06

 	/* MOSI and SCK as output. */
	spi->port->DIRSET  = SPI_MOSI_bm | SPI_SCK_bm;
 be2:	02 80       	ldd	r0, Z+2	; 0x02
 be4:	f3 81       	ldd	r31, Z+3	; 0x03
 be6:	e0 2d       	mov	r30, r0
 be8:	80 ea       	ldi	r24, 0xA0	; 160
 bea:	81 83       	std	Z+1, r24	; 0x01
}
 bec:	0f 91       	pop	r16
 bee:	ef 90       	pop	r14
 bf0:	cf 90       	pop	r12
 bf2:	af 90       	pop	r10
 bf4:	08 95       	ret

00000bf6 <TC0_ConfigClockSource>:
 *  \param tc              Timer/Counter module instance.
 *  \param clockSelection  Timer/Counter clock source setting.
 */
void TC0_ConfigClockSource( volatile TC0_t * tc, TC_CLKSEL_t clockSelection )
{
	tc->CTRLA = ( tc->CTRLA & ~TC0_CLKSEL_gm ) | clockSelection;
 bf6:	fc 01       	movw	r30, r24
 bf8:	20 81       	ld	r18, Z
 bfa:	20 7f       	andi	r18, 0xF0	; 240
 bfc:	62 2b       	or	r22, r18
 bfe:	60 83       	st	Z, r22
 c00:	08 95       	ret

00000c02 <initUART>:
void initUART()
{
	
	//  XBEE on USARTD1
	/* PD6 (RXD1) input*/
	PORTD.DIRCLR = PIN6_bm;
 c02:	e0 e6       	ldi	r30, 0x60	; 96
 c04:	f6 e0       	ldi	r31, 0x06	; 6
 c06:	90 e4       	ldi	r25, 0x40	; 64
 c08:	92 83       	std	Z+2, r25	; 0x02
	/* PD7 (TXD1) as output. */
	PORTD.DIRSET = PIN7_bm;
 c0a:	80 e8       	ldi	r24, 0x80	; 128
 c0c:	81 83       	std	Z+1, r24	; 0x01
	
	
	//  IMU on USARTC1
	/* PC6 (RXD1) input*/
	PORTC.DIRCLR = PIN6_bm;
 c0e:	e0 e4       	ldi	r30, 0x40	; 64
 c10:	f6 e0       	ldi	r31, 0x06	; 6
 c12:	92 83       	std	Z+2, r25	; 0x02
	/* PD7 (TXD1) as output. */
	PORTC.DIRSET = PIN7_bm;
 c14:	81 83       	std	Z+1, r24	; 0x01
	
	USART_Format_Set(&XBEE_USART, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, true);
 c16:	e0 eb       	ldi	r30, 0xB0	; 176
 c18:	f9 e0       	ldi	r31, 0x09	; 9
 c1a:	8b e0       	ldi	r24, 0x0B	; 11
 c1c:	85 83       	std	Z+5, r24	; 0x05
	USART_Baudrate_Set(&XBEE_USART, 1047 , -6);			// set for 32MHZ and 115200
 c1e:	87 e1       	ldi	r24, 0x17	; 23
 c20:	86 83       	std	Z+6, r24	; 0x06
 c22:	84 ea       	ldi	r24, 0xA4	; 164
 c24:	87 83       	std	Z+7, r24	; 0x07
	/* Enable both RX and TX. */
	USART_Rx_Enable(&XBEE_USART);
 c26:	84 81       	ldd	r24, Z+4	; 0x04
 c28:	80 61       	ori	r24, 0x10	; 16
 c2a:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(&XBEE_USART);
 c2c:	84 81       	ldd	r24, Z+4	; 0x04
 c2e:	88 60       	ori	r24, 0x08	; 8
 c30:	84 83       	std	Z+4, r24	; 0x04
 c32:	08 95       	ret

00000c34 <__divmodhi4>:
 c34:	97 fb       	bst	r25, 7
 c36:	07 2e       	mov	r0, r23
 c38:	16 f4       	brtc	.+4      	; 0xc3e <__divmodhi4+0xa>
 c3a:	00 94       	com	r0
 c3c:	06 d0       	rcall	.+12     	; 0xc4a <__divmodhi4_neg1>
 c3e:	77 fd       	sbrc	r23, 7
 c40:	08 d0       	rcall	.+16     	; 0xc52 <__divmodhi4_neg2>
 c42:	0b d0       	rcall	.+22     	; 0xc5a <__udivmodhi4>
 c44:	07 fc       	sbrc	r0, 7
 c46:	05 d0       	rcall	.+10     	; 0xc52 <__divmodhi4_neg2>
 c48:	3e f4       	brtc	.+14     	; 0xc58 <__divmodhi4_exit>

00000c4a <__divmodhi4_neg1>:
 c4a:	90 95       	com	r25
 c4c:	81 95       	neg	r24
 c4e:	9f 4f       	sbci	r25, 0xFF	; 255
 c50:	08 95       	ret

00000c52 <__divmodhi4_neg2>:
 c52:	70 95       	com	r23
 c54:	61 95       	neg	r22
 c56:	7f 4f       	sbci	r23, 0xFF	; 255

00000c58 <__divmodhi4_exit>:
 c58:	08 95       	ret

00000c5a <__udivmodhi4>:
 c5a:	aa 1b       	sub	r26, r26
 c5c:	bb 1b       	sub	r27, r27
 c5e:	51 e1       	ldi	r21, 0x11	; 17
 c60:	07 c0       	rjmp	.+14     	; 0xc70 <__udivmodhi4_ep>

00000c62 <__udivmodhi4_loop>:
 c62:	aa 1f       	adc	r26, r26
 c64:	bb 1f       	adc	r27, r27
 c66:	a6 17       	cp	r26, r22
 c68:	b7 07       	cpc	r27, r23
 c6a:	10 f0       	brcs	.+4      	; 0xc70 <__udivmodhi4_ep>
 c6c:	a6 1b       	sub	r26, r22
 c6e:	b7 0b       	sbc	r27, r23

00000c70 <__udivmodhi4_ep>:
 c70:	88 1f       	adc	r24, r24
 c72:	99 1f       	adc	r25, r25
 c74:	5a 95       	dec	r21
 c76:	a9 f7       	brne	.-22     	; 0xc62 <__udivmodhi4_loop>
 c78:	80 95       	com	r24
 c7a:	90 95       	com	r25
 c7c:	bc 01       	movw	r22, r24
 c7e:	cd 01       	movw	r24, r26
 c80:	08 95       	ret

00000c82 <_exit>:
 c82:	f8 94       	cli

00000c84 <__stop_program>:
 c84:	ff cf       	rjmp	.-2      	; 0xc84 <__stop_program>
