
PSU_quadcopter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ca2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00802000  00000ca2  00000d36  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000017f  00802002  00802002  00000d38  2**0
                  ALLOC
  3 .stab         000034c8  00000000  00000000  00000d38  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e2b  00000000  00000000  00004200  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000502b  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000002f8  00000000  00000000  0000505a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004d63  00000000  00000000  00005352  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000e20  00000000  00000000  0000a0b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001d49  00000000  00000000  0000aed5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000770  00000000  00000000  0000cc20  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001adf  00000000  00000000  0000d390  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001608  00000000  00000000  0000ee6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000278  00000000  00000000  00010477  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	f9 c0       	rjmp	.+498    	; 0x1f4 <__ctors_end>
   2:	00 00       	nop
   4:	1b c1       	rjmp	.+566    	; 0x23c <__bad_interrupt>
   6:	00 00       	nop
   8:	19 c1       	rjmp	.+562    	; 0x23c <__bad_interrupt>
   a:	00 00       	nop
   c:	17 c1       	rjmp	.+558    	; 0x23c <__bad_interrupt>
   e:	00 00       	nop
  10:	15 c1       	rjmp	.+554    	; 0x23c <__bad_interrupt>
  12:	00 00       	nop
  14:	13 c1       	rjmp	.+550    	; 0x23c <__bad_interrupt>
  16:	00 00       	nop
  18:	11 c1       	rjmp	.+546    	; 0x23c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	0f c1       	rjmp	.+542    	; 0x23c <__bad_interrupt>
  1e:	00 00       	nop
  20:	0d c1       	rjmp	.+538    	; 0x23c <__bad_interrupt>
  22:	00 00       	nop
  24:	0b c1       	rjmp	.+534    	; 0x23c <__bad_interrupt>
  26:	00 00       	nop
  28:	09 c1       	rjmp	.+530    	; 0x23c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	07 c1       	rjmp	.+526    	; 0x23c <__bad_interrupt>
  2e:	00 00       	nop
  30:	05 c1       	rjmp	.+522    	; 0x23c <__bad_interrupt>
  32:	00 00       	nop
  34:	03 c1       	rjmp	.+518    	; 0x23c <__bad_interrupt>
  36:	00 00       	nop
  38:	01 c1       	rjmp	.+514    	; 0x23c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	ff c0       	rjmp	.+510    	; 0x23c <__bad_interrupt>
  3e:	00 00       	nop
  40:	fd c0       	rjmp	.+506    	; 0x23c <__bad_interrupt>
  42:	00 00       	nop
  44:	fb c0       	rjmp	.+502    	; 0x23c <__bad_interrupt>
  46:	00 00       	nop
  48:	f9 c0       	rjmp	.+498    	; 0x23c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	f7 c0       	rjmp	.+494    	; 0x23c <__bad_interrupt>
  4e:	00 00       	nop
  50:	f5 c0       	rjmp	.+490    	; 0x23c <__bad_interrupt>
  52:	00 00       	nop
  54:	f3 c0       	rjmp	.+486    	; 0x23c <__bad_interrupt>
  56:	00 00       	nop
  58:	f1 c0       	rjmp	.+482    	; 0x23c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	ef c0       	rjmp	.+478    	; 0x23c <__bad_interrupt>
  5e:	00 00       	nop
  60:	ed c0       	rjmp	.+474    	; 0x23c <__bad_interrupt>
  62:	00 00       	nop
  64:	eb c0       	rjmp	.+470    	; 0x23c <__bad_interrupt>
  66:	00 00       	nop
  68:	e9 c0       	rjmp	.+466    	; 0x23c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	e7 c0       	rjmp	.+462    	; 0x23c <__bad_interrupt>
  6e:	00 00       	nop
  70:	e5 c0       	rjmp	.+458    	; 0x23c <__bad_interrupt>
  72:	00 00       	nop
  74:	e3 c0       	rjmp	.+454    	; 0x23c <__bad_interrupt>
  76:	00 00       	nop
  78:	e1 c0       	rjmp	.+450    	; 0x23c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	df c0       	rjmp	.+446    	; 0x23c <__bad_interrupt>
  7e:	00 00       	nop
  80:	dd c0       	rjmp	.+442    	; 0x23c <__bad_interrupt>
  82:	00 00       	nop
  84:	db c0       	rjmp	.+438    	; 0x23c <__bad_interrupt>
  86:	00 00       	nop
  88:	d9 c0       	rjmp	.+434    	; 0x23c <__bad_interrupt>
  8a:	00 00       	nop
  8c:	d7 c0       	rjmp	.+430    	; 0x23c <__bad_interrupt>
  8e:	00 00       	nop
  90:	d5 c0       	rjmp	.+426    	; 0x23c <__bad_interrupt>
  92:	00 00       	nop
  94:	d3 c0       	rjmp	.+422    	; 0x23c <__bad_interrupt>
  96:	00 00       	nop
  98:	d1 c0       	rjmp	.+418    	; 0x23c <__bad_interrupt>
  9a:	00 00       	nop
  9c:	cf c0       	rjmp	.+414    	; 0x23c <__bad_interrupt>
  9e:	00 00       	nop
  a0:	cd c0       	rjmp	.+410    	; 0x23c <__bad_interrupt>
  a2:	00 00       	nop
  a4:	cb c0       	rjmp	.+406    	; 0x23c <__bad_interrupt>
  a6:	00 00       	nop
  a8:	c9 c0       	rjmp	.+402    	; 0x23c <__bad_interrupt>
  aa:	00 00       	nop
  ac:	c7 c0       	rjmp	.+398    	; 0x23c <__bad_interrupt>
  ae:	00 00       	nop
  b0:	c5 c0       	rjmp	.+394    	; 0x23c <__bad_interrupt>
  b2:	00 00       	nop
  b4:	c3 c0       	rjmp	.+390    	; 0x23c <__bad_interrupt>
  b6:	00 00       	nop
  b8:	c1 c0       	rjmp	.+386    	; 0x23c <__bad_interrupt>
  ba:	00 00       	nop
  bc:	bf c0       	rjmp	.+382    	; 0x23c <__bad_interrupt>
  be:	00 00       	nop
  c0:	bd c0       	rjmp	.+378    	; 0x23c <__bad_interrupt>
  c2:	00 00       	nop
  c4:	bb c0       	rjmp	.+374    	; 0x23c <__bad_interrupt>
  c6:	00 00       	nop
  c8:	b9 c0       	rjmp	.+370    	; 0x23c <__bad_interrupt>
  ca:	00 00       	nop
  cc:	b7 c0       	rjmp	.+366    	; 0x23c <__bad_interrupt>
  ce:	00 00       	nop
  d0:	b5 c0       	rjmp	.+362    	; 0x23c <__bad_interrupt>
  d2:	00 00       	nop
  d4:	b3 c0       	rjmp	.+358    	; 0x23c <__bad_interrupt>
  d6:	00 00       	nop
  d8:	b1 c0       	rjmp	.+354    	; 0x23c <__bad_interrupt>
  da:	00 00       	nop
  dc:	af c0       	rjmp	.+350    	; 0x23c <__bad_interrupt>
  de:	00 00       	nop
  e0:	ad c0       	rjmp	.+346    	; 0x23c <__bad_interrupt>
  e2:	00 00       	nop
  e4:	ab c0       	rjmp	.+342    	; 0x23c <__bad_interrupt>
  e6:	00 00       	nop
  e8:	a9 c0       	rjmp	.+338    	; 0x23c <__bad_interrupt>
  ea:	00 00       	nop
  ec:	a7 c0       	rjmp	.+334    	; 0x23c <__bad_interrupt>
  ee:	00 00       	nop
  f0:	a5 c0       	rjmp	.+330    	; 0x23c <__bad_interrupt>
  f2:	00 00       	nop
  f4:	a3 c0       	rjmp	.+326    	; 0x23c <__bad_interrupt>
  f6:	00 00       	nop
  f8:	a1 c0       	rjmp	.+322    	; 0x23c <__bad_interrupt>
  fa:	00 00       	nop
  fc:	9f c0       	rjmp	.+318    	; 0x23c <__bad_interrupt>
  fe:	00 00       	nop
 100:	9d c0       	rjmp	.+314    	; 0x23c <__bad_interrupt>
 102:	00 00       	nop
 104:	9b c0       	rjmp	.+310    	; 0x23c <__bad_interrupt>
 106:	00 00       	nop
 108:	99 c0       	rjmp	.+306    	; 0x23c <__bad_interrupt>
 10a:	00 00       	nop
 10c:	97 c0       	rjmp	.+302    	; 0x23c <__bad_interrupt>
 10e:	00 00       	nop
 110:	95 c0       	rjmp	.+298    	; 0x23c <__bad_interrupt>
 112:	00 00       	nop
 114:	93 c0       	rjmp	.+294    	; 0x23c <__bad_interrupt>
 116:	00 00       	nop
 118:	91 c0       	rjmp	.+290    	; 0x23c <__bad_interrupt>
 11a:	00 00       	nop
 11c:	8f c0       	rjmp	.+286    	; 0x23c <__bad_interrupt>
 11e:	00 00       	nop
 120:	8d c0       	rjmp	.+282    	; 0x23c <__bad_interrupt>
 122:	00 00       	nop
 124:	8b c0       	rjmp	.+278    	; 0x23c <__bad_interrupt>
 126:	00 00       	nop
 128:	89 c0       	rjmp	.+274    	; 0x23c <__bad_interrupt>
 12a:	00 00       	nop
 12c:	87 c0       	rjmp	.+270    	; 0x23c <__bad_interrupt>
 12e:	00 00       	nop
 130:	85 c0       	rjmp	.+266    	; 0x23c <__bad_interrupt>
 132:	00 00       	nop
 134:	92 c4       	rjmp	.+2340   	; 0xa5a <__vector_77>
 136:	00 00       	nop
 138:	81 c0       	rjmp	.+258    	; 0x23c <__bad_interrupt>
 13a:	00 00       	nop
 13c:	7f c0       	rjmp	.+254    	; 0x23c <__bad_interrupt>
 13e:	00 00       	nop
 140:	7d c0       	rjmp	.+250    	; 0x23c <__bad_interrupt>
 142:	00 00       	nop
 144:	7b c0       	rjmp	.+246    	; 0x23c <__bad_interrupt>
 146:	00 00       	nop
 148:	79 c0       	rjmp	.+242    	; 0x23c <__bad_interrupt>
 14a:	00 00       	nop
 14c:	77 c0       	rjmp	.+238    	; 0x23c <__bad_interrupt>
 14e:	00 00       	nop
 150:	75 c0       	rjmp	.+234    	; 0x23c <__bad_interrupt>
 152:	00 00       	nop
 154:	73 c0       	rjmp	.+230    	; 0x23c <__bad_interrupt>
 156:	00 00       	nop
 158:	71 c0       	rjmp	.+226    	; 0x23c <__bad_interrupt>
 15a:	00 00       	nop
 15c:	6f c0       	rjmp	.+222    	; 0x23c <__bad_interrupt>
 15e:	00 00       	nop
 160:	6d c0       	rjmp	.+218    	; 0x23c <__bad_interrupt>
 162:	00 00       	nop
 164:	6b c0       	rjmp	.+214    	; 0x23c <__bad_interrupt>
 166:	00 00       	nop
 168:	69 c0       	rjmp	.+210    	; 0x23c <__bad_interrupt>
 16a:	00 00       	nop
 16c:	67 c0       	rjmp	.+206    	; 0x23c <__bad_interrupt>
 16e:	00 00       	nop
 170:	65 c0       	rjmp	.+202    	; 0x23c <__bad_interrupt>
 172:	00 00       	nop
 174:	63 c0       	rjmp	.+198    	; 0x23c <__bad_interrupt>
 176:	00 00       	nop
 178:	61 c0       	rjmp	.+194    	; 0x23c <__bad_interrupt>
 17a:	00 00       	nop
 17c:	5f c0       	rjmp	.+190    	; 0x23c <__bad_interrupt>
 17e:	00 00       	nop
 180:	5d c0       	rjmp	.+186    	; 0x23c <__bad_interrupt>
 182:	00 00       	nop
 184:	5b c0       	rjmp	.+182    	; 0x23c <__bad_interrupt>
 186:	00 00       	nop
 188:	59 c0       	rjmp	.+178    	; 0x23c <__bad_interrupt>
 18a:	00 00       	nop
 18c:	57 c0       	rjmp	.+174    	; 0x23c <__bad_interrupt>
 18e:	00 00       	nop
 190:	55 c0       	rjmp	.+170    	; 0x23c <__bad_interrupt>
 192:	00 00       	nop
 194:	53 c0       	rjmp	.+166    	; 0x23c <__bad_interrupt>
 196:	00 00       	nop
 198:	51 c0       	rjmp	.+162    	; 0x23c <__bad_interrupt>
 19a:	00 00       	nop
 19c:	4f c0       	rjmp	.+158    	; 0x23c <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	4d c0       	rjmp	.+154    	; 0x23c <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	4b c0       	rjmp	.+150    	; 0x23c <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	49 c0       	rjmp	.+146    	; 0x23c <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	47 c0       	rjmp	.+142    	; 0x23c <__bad_interrupt>
 1ae:	00 00       	nop
 1b0:	45 c0       	rjmp	.+138    	; 0x23c <__bad_interrupt>
 1b2:	00 00       	nop
 1b4:	43 c0       	rjmp	.+134    	; 0x23c <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	41 c0       	rjmp	.+130    	; 0x23c <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	3f c0       	rjmp	.+126    	; 0x23c <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	3d c0       	rjmp	.+122    	; 0x23c <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	3b c0       	rjmp	.+118    	; 0x23c <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	39 c0       	rjmp	.+114    	; 0x23c <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	37 c0       	rjmp	.+110    	; 0x23c <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	35 c0       	rjmp	.+106    	; 0x23c <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	33 c0       	rjmp	.+102    	; 0x23c <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	31 c0       	rjmp	.+98     	; 0x23c <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	2f c0       	rjmp	.+94     	; 0x23c <__bad_interrupt>
 1de:	00 00       	nop
 1e0:	2d c0       	rjmp	.+90     	; 0x23c <__bad_interrupt>
 1e2:	00 00       	nop
 1e4:	2b c0       	rjmp	.+86     	; 0x23c <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	29 c0       	rjmp	.+82     	; 0x23c <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	27 c0       	rjmp	.+78     	; 0x23c <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	25 c0       	rjmp	.+74     	; 0x23c <__bad_interrupt>
	...

000001f4 <__ctors_end>:
 1f4:	11 24       	eor	r1, r1
 1f6:	1f be       	out	0x3f, r1	; 63
 1f8:	cf ef       	ldi	r28, 0xFF	; 255
 1fa:	df e3       	ldi	r29, 0x3F	; 63
 1fc:	de bf       	out	0x3e, r29	; 62
 1fe:	cd bf       	out	0x3d, r28	; 61
 200:	00 e0       	ldi	r16, 0x00	; 0
 202:	0c bf       	out	0x3c, r16	; 60
 204:	18 be       	out	0x38, r1	; 56
 206:	19 be       	out	0x39, r1	; 57
 208:	1a be       	out	0x3a, r1	; 58
 20a:	1b be       	out	0x3b, r1	; 59

0000020c <__do_copy_data>:
 20c:	10 e2       	ldi	r17, 0x20	; 32
 20e:	a0 e0       	ldi	r26, 0x00	; 0
 210:	b0 e2       	ldi	r27, 0x20	; 32
 212:	e2 ea       	ldi	r30, 0xA2	; 162
 214:	fc e0       	ldi	r31, 0x0C	; 12
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	0b bf       	out	0x3b, r16	; 59
 21a:	02 c0       	rjmp	.+4      	; 0x220 <__do_copy_data+0x14>
 21c:	07 90       	elpm	r0, Z+
 21e:	0d 92       	st	X+, r0
 220:	a2 30       	cpi	r26, 0x02	; 2
 222:	b1 07       	cpc	r27, r17
 224:	d9 f7       	brne	.-10     	; 0x21c <__do_copy_data+0x10>
 226:	1b be       	out	0x3b, r1	; 59

00000228 <__do_clear_bss>:
 228:	21 e2       	ldi	r18, 0x21	; 33
 22a:	a2 e0       	ldi	r26, 0x02	; 2
 22c:	b0 e2       	ldi	r27, 0x20	; 32
 22e:	01 c0       	rjmp	.+2      	; 0x232 <.do_clear_bss_start>

00000230 <.do_clear_bss_loop>:
 230:	1d 92       	st	X+, r1

00000232 <.do_clear_bss_start>:
 232:	a1 38       	cpi	r26, 0x81	; 129
 234:	b2 07       	cpc	r27, r18
 236:	e1 f7       	brne	.-8      	; 0x230 <.do_clear_bss_loop>
 238:	ca d3       	rcall	.+1940   	; 0x9ce <main>
 23a:	31 c5       	rjmp	.+2658   	; 0xc9e <_exit>

0000023c <__bad_interrupt>:
 23c:	e1 ce       	rjmp	.-574    	; 0x0 <__vectors>

0000023e <PI_attitude_rate>:
INPUT:
OUTPUT:
DISCRIPTION:  nest PI loops, with the rate loop on the insidea
*********************************************************************************************************** */
void PI_attitude_rate(PID_data *pid_data)
{
 23e:	af 92       	push	r10
 240:	bf 92       	push	r11
 242:	cf 92       	push	r12
 244:	df 92       	push	r13
 246:	ef 92       	push	r14
 248:	ff 92       	push	r15
 24a:	0f 93       	push	r16
 24c:	1f 93       	push	r17
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	fc 01       	movw	r30, r24
	////  save the last error calculation so we can calculate the derivative
	pid_data->previousError0 = pid_data->previousError1;
 254:	a2 ac       	ldd	r10, Z+58	; 0x3a
 256:	b3 ac       	ldd	r11, Z+59	; 0x3b
 258:	a0 ae       	std	Z+56, r10	; 0x38
 25a:	b1 ae       	std	Z+57, r11	; 0x39
	pid_data->previousError1 = pid_data->previousError2;
 25c:	c4 ac       	ldd	r12, Z+60	; 0x3c
 25e:	d5 ac       	ldd	r13, Z+61	; 0x3d
 260:	c2 ae       	std	Z+58, r12	; 0x3a
 262:	d3 ae       	std	Z+59, r13	; 0x3b
	pid_data->previousError2 = pid_data->attitude_error;
 264:	e4 a4       	ldd	r14, Z+44	; 0x2c
 266:	f5 a4       	ldd	r15, Z+45	; 0x2d
 268:	e4 ae       	std	Z+60, r14	; 0x3c
 26a:	f5 ae       	std	Z+61, r15	; 0x3d
	//pid_data->previousError0 = pid_data->error;
	////  calculate the new error
	////10 - 23 = -13
	
	pid_data->attitude_error = (pid_data->attitude_command - pid_data->attitude_feedback)/10;
 26c:	86 a1       	ldd	r24, Z+38	; 0x26
 26e:	97 a1       	ldd	r25, Z+39	; 0x27
 270:	26 8d       	ldd	r18, Z+30	; 0x1e
 272:	37 8d       	ldd	r19, Z+31	; 0x1f
 274:	82 1b       	sub	r24, r18
 276:	93 0b       	sbc	r25, r19
 278:	0a e0       	ldi	r16, 0x0A	; 10
 27a:	10 e0       	ldi	r17, 0x00	; 0
 27c:	b8 01       	movw	r22, r16
 27e:	e8 d4       	rcall	.+2512   	; 0xc50 <__divmodhi4>
 280:	eb 01       	movw	r28, r22
 282:	64 a7       	std	Z+44, r22	; 0x2c
 284:	75 a7       	std	Z+45, r23	; 0x2d
	

	pid_data->attitude_total_error = (pid_data->previousError0/integral_addup_reducer + pid_data->previousError1/integral_addup_reducer +
 286:	20 91 00 20 	lds	r18, 0x2000
 28a:	30 91 01 20 	lds	r19, 0x2001
 28e:	c5 01       	movw	r24, r10
 290:	b9 01       	movw	r22, r18
 292:	de d4       	rcall	.+2492   	; 0xc50 <__divmodhi4>
 294:	5b 01       	movw	r10, r22
 296:	c6 01       	movw	r24, r12
 298:	b9 01       	movw	r22, r18
 29a:	da d4       	rcall	.+2484   	; 0xc50 <__divmodhi4>
 29c:	65 01       	movw	r12, r10
 29e:	c6 0e       	add	r12, r22
 2a0:	d7 1e       	adc	r13, r23
	pid_data->previousError2/integral_addup_reducer + pid_data->attitude_error/integral_addup_reducer);
 2a2:	c7 01       	movw	r24, r14
 2a4:	b9 01       	movw	r22, r18
 2a6:	d4 d4       	rcall	.+2472   	; 0xc50 <__divmodhi4>
	////10 - 23 = -13
	
	pid_data->attitude_error = (pid_data->attitude_command - pid_data->attitude_feedback)/10;
	

	pid_data->attitude_total_error = (pid_data->previousError0/integral_addup_reducer + pid_data->previousError1/integral_addup_reducer +
 2a8:	76 01       	movw	r14, r12
 2aa:	e6 0e       	add	r14, r22
 2ac:	f7 1e       	adc	r15, r23
	pid_data->previousError2/integral_addup_reducer + pid_data->attitude_error/integral_addup_reducer);
 2ae:	ce 01       	movw	r24, r28
 2b0:	b9 01       	movw	r22, r18
 2b2:	ce d4       	rcall	.+2460   	; 0xc50 <__divmodhi4>
 2b4:	6e 0d       	add	r22, r14
 2b6:	7f 1d       	adc	r23, r15
	////10 - 23 = -13
	
	pid_data->attitude_error = (pid_data->attitude_command - pid_data->attitude_feedback)/10;
	

	pid_data->attitude_total_error = (pid_data->previousError0/integral_addup_reducer + pid_data->previousError1/integral_addup_reducer +
 2b8:	64 ab       	std	Z+52, r22	; 0x34
 2ba:	75 ab       	std	Z+53, r23	; 0x35
	pid_data->previousError2/integral_addup_reducer + pid_data->attitude_error/integral_addup_reducer);



	pid_data->p_term_attitude = (pid_data->attitude_error  *  pid_data->Kp);
 2bc:	86 89       	ldd	r24, Z+22	; 0x16
 2be:	97 89       	ldd	r25, Z+23	; 0x17
 2c0:	c8 9f       	mul	r28, r24
 2c2:	90 01       	movw	r18, r0
 2c4:	c9 9f       	mul	r28, r25
 2c6:	30 0d       	add	r19, r0
 2c8:	d8 9f       	mul	r29, r24
 2ca:	30 0d       	add	r19, r0
 2cc:	11 24       	eor	r1, r1
 2ce:	22 87       	std	Z+10, r18	; 0x0a
 2d0:	33 87       	std	Z+11, r19	; 0x0b
	
	//calculate integral term
	pid_data->i_term_attitude =(pid_data->attitude_total_error  * pid_data->Ki);
 2d2:	40 8d       	ldd	r20, Z+24	; 0x18
 2d4:	51 8d       	ldd	r21, Z+25	; 0x19
 2d6:	64 9f       	mul	r22, r20
 2d8:	c0 01       	movw	r24, r0
 2da:	65 9f       	mul	r22, r21
 2dc:	90 0d       	add	r25, r0
 2de:	74 9f       	mul	r23, r20
 2e0:	90 0d       	add	r25, r0
 2e2:	11 24       	eor	r1, r1
 2e4:	84 87       	std	Z+12, r24	; 0x0c
 2e6:	95 87       	std	Z+13, r25	; 0x0d

	
	// calculate the pid output
	pid_data->attitude_loop_out = (pid_data->p_term_attitude + pid_data->i_term_attitude);
 2e8:	82 0f       	add	r24, r18
 2ea:	93 1f       	adc	r25, r19
 2ec:	df 01       	movw	r26, r30
 2ee:	a4 5b       	subi	r26, 0xB4	; 180
 2f0:	bf 4f       	sbci	r27, 0xFF	; 255
 2f2:	8d 93       	st	X+, r24
 2f4:	9c 93       	st	X, r25
	//pid_rate(pid_data);

	
	//  rate calculations start here
	pid_data->previousRateError0 = pid_data->previousRateError1;
 2f6:	ef 01       	movw	r28, r30
 2f8:	c0 5c       	subi	r28, 0xC0	; 192
 2fa:	df 4f       	sbci	r29, 0xFF	; 255
 2fc:	28 81       	ld	r18, Y
 2fe:	39 81       	ldd	r19, Y+1	; 0x01
 300:	26 af       	std	Z+62, r18	; 0x3e
 302:	37 af       	std	Z+63, r19	; 0x3f
	pid_data->previousRateError1 = pid_data->previousRateError2;
 304:	df 01       	movw	r26, r30
 306:	ae 5b       	subi	r26, 0xBE	; 190
 308:	bf 4f       	sbci	r27, 0xFF	; 255
 30a:	2d 91       	ld	r18, X+
 30c:	3c 91       	ld	r19, X
 30e:	11 97       	sbiw	r26, 0x01	; 1
 310:	28 83       	st	Y, r18
 312:	39 83       	std	Y+1, r19	; 0x01
	pid_data->previousRateError2 = pid_data->rate_error;
 314:	26 a5       	ldd	r18, Z+46	; 0x2e
 316:	37 a5       	ldd	r19, Z+47	; 0x2f
 318:	2d 93       	st	X+, r18
 31a:	3c 93       	st	X, r19
	
	pid_data->rate_error = (pid_data->attitude_loop_out- pid_data->rate_feedback)/10;
 31c:	22 a1       	ldd	r18, Z+34	; 0x22
 31e:	33 a1       	ldd	r19, Z+35	; 0x23
 320:	82 1b       	sub	r24, r18
 322:	93 0b       	sbc	r25, r19
 324:	b8 01       	movw	r22, r16
 326:	94 d4       	rcall	.+2344   	; 0xc50 <__divmodhi4>
 328:	66 a7       	std	Z+46, r22	; 0x2e
 32a:	77 a7       	std	Z+47, r23	; 0x2f
	
	//pid_data->rate_integral = pid_data->rate_error/integral_addup_reducer + pid_data->previousRateError0/integral_addup_reducer +
	//pid_data->previousRateError1/integral_addup_reducer + pid_data->previousRateError2/integral_addup_reducer;
	
	pid_data->p_term_rate = (pid_data->rate_error * pid_data->Kp_rate);
 32c:	20 89       	ldd	r18, Z+16	; 0x10
 32e:	31 89       	ldd	r19, Z+17	; 0x11
 330:	62 9f       	mul	r22, r18
 332:	c0 01       	movw	r24, r0
 334:	63 9f       	mul	r22, r19
 336:	90 0d       	add	r25, r0
 338:	72 9f       	mul	r23, r18
 33a:	90 0d       	add	r25, r0
 33c:	11 24       	eor	r1, r1
 33e:	84 83       	std	Z+4, r24	; 0x04
 340:	95 83       	std	Z+5, r25	; 0x05
	
	pid_data->i_term_rate = 0; //(pid_data->rate_total_error  * pid_data->Ki_rate);
 342:	16 82       	std	Z+6, r1	; 0x06
 344:	17 82       	std	Z+7, r1	; 0x07
	
	pid_data->pid_total =(pid_data->p_term_rate + pid_data->i_term_rate);
 346:	84 8f       	std	Z+28, r24	; 0x1c
 348:	95 8f       	std	Z+29, r25	; 0x1d
	

	
}
 34a:	df 91       	pop	r29
 34c:	cf 91       	pop	r28
 34e:	1f 91       	pop	r17
 350:	0f 91       	pop	r16
 352:	ff 90       	pop	r15
 354:	ef 90       	pop	r14
 356:	df 90       	pop	r13
 358:	cf 90       	pop	r12
 35a:	bf 90       	pop	r11
 35c:	af 90       	pop	r10
 35e:	08 95       	ret

00000360 <initPWM>:
void DisablePWM()
{
		MOTOR_PMW_TIMER0.CTRLB |= 0x00;
		MOTOR_PMW_TIMER0.CTRLB |= 0x00;
		MOTOR_PMW_TIMER0.CTRLB |= 0x00;
		MOTOR_PMW_TIMER0.CTRLB |= 0x00;
 360:	e0 e0       	ldi	r30, 0x00	; 0
 362:	f8 e0       	ldi	r31, 0x08	; 8
 364:	83 e0       	ldi	r24, 0x03	; 3
 366:	80 83       	st	Z, r24
 368:	81 83       	std	Z+1, r24	; 0x01
 36a:	82 83       	std	Z+2, r24	; 0x02
 36c:	83 83       	std	Z+3, r24	; 0x03
 36e:	81 81       	ldd	r24, Z+1	; 0x01
 370:	80 61       	ori	r24, 0x10	; 16
 372:	81 83       	std	Z+1, r24	; 0x01
 374:	81 81       	ldd	r24, Z+1	; 0x01
 376:	80 62       	ori	r24, 0x20	; 32
 378:	81 83       	std	Z+1, r24	; 0x01
 37a:	81 81       	ldd	r24, Z+1	; 0x01
 37c:	80 64       	ori	r24, 0x40	; 64
 37e:	81 83       	std	Z+1, r24	; 0x01
 380:	81 81       	ldd	r24, Z+1	; 0x01
 382:	80 68       	ori	r24, 0x80	; 128
 384:	81 83       	std	Z+1, r24	; 0x01
 386:	8f e0       	ldi	r24, 0x0F	; 15
 388:	a0 e4       	ldi	r26, 0x40	; 64
 38a:	b6 e0       	ldi	r27, 0x06	; 6
 38c:	11 96       	adiw	r26, 0x01	; 1
 38e:	8c 93       	st	X, r24
 390:	10 ae       	std	Z+56, r1	; 0x38
 392:	11 ae       	std	Z+57, r1	; 0x39
 394:	12 ae       	std	Z+58, r1	; 0x3a
 396:	13 ae       	std	Z+59, r1	; 0x3b
 398:	14 ae       	std	Z+60, r1	; 0x3c
 39a:	15 ae       	std	Z+61, r1	; 0x3d
 39c:	10 92 3e 08 	sts	0x083E, r1
 3a0:	10 92 3f 08 	sts	0x083F, r1
 3a4:	89 e2       	ldi	r24, 0x29	; 41
 3a6:	98 e6       	ldi	r25, 0x68	; 104
 3a8:	86 a3       	std	Z+38, r24	; 0x26
 3aa:	97 a3       	std	Z+39, r25	; 0x27
 3ac:	63 e0       	ldi	r22, 0x03	; 3
 3ae:	80 e0       	ldi	r24, 0x00	; 0
 3b0:	98 e0       	ldi	r25, 0x08	; 8
 3b2:	1b c4       	rjmp	.+2102   	; 0xbea <TC0_ConfigClockSource>

000003b4 <doPWM>:
         * CC channels */

        /* Check if overflow flag (OVFIF) is set,
         * clear flag and set a new duty cycle
         */
        if(TC_GetOverflowFlag(&MOTOR_PMW_TIMER0) != 0) 
 3b4:	e0 e0       	ldi	r30, 0x00	; 0
 3b6:	f8 e0       	ldi	r31, 0x08	; 8
 3b8:	e4 85       	ldd	r30, Z+12	; 0x0c
 3ba:	e0 ff       	sbrs	r30, 0
 3bc:	0e c0       	rjmp	.+28     	; 0x3da <doPWM+0x26>
        {
            TC_ClearOverflowFlag(&MOTOR_PMW_TIMER0);		//Clear the IF by writing a logical 1 to the flag
 3be:	e0 e0       	ldi	r30, 0x00	; 0
 3c0:	f8 e0       	ldi	r31, 0x08	; 8
 3c2:	a1 e0       	ldi	r26, 0x01	; 1
 3c4:	a4 87       	std	Z+12, r26	; 0x0c

            MOTOR_PMW_TIMER0.CCABUF = speed_1;				//Change the compare value to change duty cycle
 3c6:	80 af       	std	Z+56, r24	; 0x38
 3c8:	91 af       	std	Z+57, r25	; 0x39
			MOTOR_PMW_TIMER0.CCBBUF = speed_2;
 3ca:	62 af       	std	Z+58, r22	; 0x3a
 3cc:	73 af       	std	Z+59, r23	; 0x3b
			MOTOR_PMW_TIMER0.CCCBUF = speed_3;
 3ce:	44 af       	std	Z+60, r20	; 0x3c
 3d0:	55 af       	std	Z+61, r21	; 0x3d
			MOTOR_PMW_TIMER0.CCDBUF = speed_4;
 3d2:	20 93 3e 08 	sts	0x083E, r18
 3d6:	30 93 3f 08 	sts	0x083F, r19
 3da:	08 95       	ret

000003dc <SetPulseWidths>:
DISCRIPTION:   Set motor speeds
*********************************************************************************************************** */
void SetPulseWidths()
{
	// check the signs
	if(throttleAxis.thrust > 2000 && throttleAxis.thrust <= 4095)
 3dc:	80 91 08 21 	lds	r24, 0x2108
 3e0:	90 91 09 21 	lds	r25, 0x2109
 3e4:	9c 01       	movw	r18, r24
 3e6:	21 5d       	subi	r18, 0xD1	; 209
 3e8:	37 40       	sbci	r19, 0x07	; 7
 3ea:	2f 32       	cpi	r18, 0x2F	; 47
 3ec:	38 40       	sbci	r19, 0x08	; 8
 3ee:	b8 f4       	brcc	.+46     	; 0x41e <SetPulseWidths+0x42>
	{
		doPWM(
		throttleAxis.thrust * SCALE_THROTTLE + rollAxis.pid_total ,
		throttleAxis.thrust * SCALE_THROTTLE + pitchAxis.pid_total ,
		throttleAxis.thrust * SCALE_THROTTLE - rollAxis.pid_total ,
		throttleAxis.thrust * SCALE_THROTTLE - pitchAxis.pid_total
 3f0:	88 0f       	add	r24, r24
 3f2:	99 1f       	adc	r25, r25
 3f4:	88 0f       	add	r24, r24
 3f6:	99 1f       	adc	r25, r25
 3f8:	60 91 80 20 	lds	r22, 0x2080
 3fc:	70 91 81 20 	lds	r23, 0x2081
	if(throttleAxis.thrust > 2000 && throttleAxis.thrust <= 4095)
	{
		doPWM(
		throttleAxis.thrust * SCALE_THROTTLE + rollAxis.pid_total ,
		throttleAxis.thrust * SCALE_THROTTLE + pitchAxis.pid_total ,
		throttleAxis.thrust * SCALE_THROTTLE - rollAxis.pid_total ,
 400:	e0 91 22 20 	lds	r30, 0x2022
 404:	f0 91 23 20 	lds	r31, 0x2023
		throttleAxis.thrust * SCALE_THROTTLE - pitchAxis.pid_total
 408:	9c 01       	movw	r18, r24
 40a:	26 1b       	sub	r18, r22
 40c:	37 0b       	sbc	r19, r23
	if(throttleAxis.thrust > 2000 && throttleAxis.thrust <= 4095)
	{
		doPWM(
		throttleAxis.thrust * SCALE_THROTTLE + rollAxis.pid_total ,
		throttleAxis.thrust * SCALE_THROTTLE + pitchAxis.pid_total ,
		throttleAxis.thrust * SCALE_THROTTLE - rollAxis.pid_total ,
 40e:	ac 01       	movw	r20, r24
 410:	4e 1b       	sub	r20, r30
 412:	5f 0b       	sbc	r21, r31
	// check the signs
	if(throttleAxis.thrust > 2000 && throttleAxis.thrust <= 4095)
	{
		doPWM(
		throttleAxis.thrust * SCALE_THROTTLE + rollAxis.pid_total ,
		throttleAxis.thrust * SCALE_THROTTLE + pitchAxis.pid_total ,
 414:	68 0f       	add	r22, r24
 416:	79 1f       	adc	r23, r25
void SetPulseWidths()
{
	// check the signs
	if(throttleAxis.thrust > 2000 && throttleAxis.thrust <= 4095)
	{
		doPWM(
 418:	8e 0f       	add	r24, r30
 41a:	9f 1f       	adc	r25, r31
 41c:	cb cf       	rjmp	.-106    	; 0x3b4 <doPWM>
		//throttleAxis.thrust * SCALE_THROTTLE - pitchAxis.pid_total  + yawAxis.pid_total
	
		);
		
	}
	else if(throttleAxis.thrust < 2000 || throttleAxis.thrust >= 4095)
 41e:	80 5d       	subi	r24, 0xD0	; 208
 420:	97 40       	sbci	r25, 0x07	; 7
 422:	8f 32       	cpi	r24, 0x2F	; 47
 424:	98 40       	sbci	r25, 0x08	; 8
 426:	48 f0       	brcs	.+18     	; 0x43a <SetPulseWidths+0x5e>
	{
		doPWM(0,0,0,0);
 428:	20 e0       	ldi	r18, 0x00	; 0
 42a:	30 e0       	ldi	r19, 0x00	; 0
 42c:	40 e0       	ldi	r20, 0x00	; 0
 42e:	50 e0       	ldi	r21, 0x00	; 0
 430:	60 e0       	ldi	r22, 0x00	; 0
 432:	70 e0       	ldi	r23, 0x00	; 0
 434:	80 e0       	ldi	r24, 0x00	; 0
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	bd cf       	rjmp	.-134    	; 0x3b4 <doPWM>
 43a:	08 95       	ret

0000043c <intPID_gains>:
*********************************************************************************************************** */
void intPID_gains()
{

		
	pitchAxis.Kp =6;
 43c:	46 e0       	ldi	r20, 0x06	; 6
 43e:	50 e0       	ldi	r21, 0x00	; 0
 440:	40 93 7a 20 	sts	0x207A, r20
 444:	50 93 7b 20 	sts	0x207B, r21
	pitchAxis.Ki =3;
 448:	23 e0       	ldi	r18, 0x03	; 3
 44a:	30 e0       	ldi	r19, 0x00	; 0
 44c:	20 93 7c 20 	sts	0x207C, r18
 450:	30 93 7d 20 	sts	0x207D, r19
	pitchAxis.Kp_rate = 4;
 454:	84 e0       	ldi	r24, 0x04	; 4
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	80 93 74 20 	sts	0x2074, r24
 45c:	90 93 75 20 	sts	0x2075, r25
	pitchAxis.Ki_rate =0;
 460:	10 92 76 20 	sts	0x2076, r1
 464:	10 92 77 20 	sts	0x2077, r1
	
	
	yawAxis.Kp = 6;
 468:	40 93 2a 21 	sts	0x212A, r20
 46c:	50 93 2b 21 	sts	0x212B, r21
	yawAxis.Ki =3;
 470:	20 93 2c 21 	sts	0x212C, r18
 474:	30 93 2d 21 	sts	0x212D, r19
	yawAxis.Kp_rate = 4;
 478:	80 93 24 21 	sts	0x2124, r24
 47c:	90 93 25 21 	sts	0x2125, r25
	yawAxis.Ki_rate =0;
 480:	10 92 26 21 	sts	0x2126, r1
 484:	10 92 27 21 	sts	0x2127, r1
	
	
	rollAxis.Kp = 6;
 488:	40 93 1c 20 	sts	0x201C, r20
 48c:	50 93 1d 20 	sts	0x201D, r21
	rollAxis.Ki =3;
 490:	20 93 1e 20 	sts	0x201E, r18
 494:	30 93 1f 20 	sts	0x201F, r19
	rollAxis.Kp_rate = 4;
 498:	80 93 16 20 	sts	0x2016, r24
 49c:	90 93 17 20 	sts	0x2017, r25
	rollAxis.Ki_rate =0;
 4a0:	10 92 18 20 	sts	0x2018, r1
 4a4:	10 92 19 20 	sts	0x2019, r1
	
	
	rollAxis.windupGuard = 200;
 4a8:	88 ec       	ldi	r24, 0xC8	; 200
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	80 93 38 20 	sts	0x2038, r24
 4b0:	90 93 39 20 	sts	0x2039, r25
	pitchAxis.windupGuard = 200;
 4b4:	80 93 96 20 	sts	0x2096, r24
 4b8:	90 93 97 20 	sts	0x2097, r25
	yawAxis.windupGuard = 200;
 4bc:	80 93 46 21 	sts	0x2146, r24
 4c0:	90 93 47 21 	sts	0x2147, r25
 4c4:	08 95       	ret

000004c6 <sendUM6_Data>:
DISCRIPTION:   Send 16 bit data type over the standard serial port
*********************************************************************************************************** */
void sendUM6_Data()
{

		sendData_int16_t(0xCCCC);					//0xCCCC is the headersendData_int16_t(rollAxis.attitude_feedback);
 4c6:	8c ec       	ldi	r24, 0xCC	; 204
 4c8:	9c ec       	ldi	r25, 0xCC	; 204
 4ca:	b6 d3       	rcall	.+1900   	; 0xc38 <sendData_int16_t>
		sendData_int16_t(rollAxis.attitude_command);
 4cc:	80 91 2c 20 	lds	r24, 0x202C
 4d0:	90 91 2d 20 	lds	r25, 0x202D
 4d4:	b1 d3       	rcall	.+1890   	; 0xc38 <sendData_int16_t>
		sendData_int16_t(rollAxis.attitude_feedback);
 4d6:	80 91 24 20 	lds	r24, 0x2024
 4da:	90 91 25 20 	lds	r25, 0x2025
 4de:	ac c3       	rjmp	.+1880   	; 0xc38 <sendData_int16_t>

000004e0 <WriteToPC_SPI>:
  OUTPUT:
  DISCRIPTION:  Write data packet to the SPI bus connected to the ATmega, 
  the ATmega should be set up to parse this data.
*********************************************************************************************************** */
int16_t WriteToPC_SPI()
{
 4e0:	7f 92       	push	r7
 4e2:	8f 92       	push	r8
 4e4:	9f 92       	push	r9
 4e6:	af 92       	push	r10
 4e8:	bf 92       	push	r11
 4ea:	cf 92       	push	r12
 4ec:	df 92       	push	r13
 4ee:	ef 92       	push	r14
 4f0:	ff 92       	push	r15
 4f2:	0f 93       	push	r16
 4f4:	1f 93       	push	r17
 4f6:	cf 93       	push	r28
 4f8:	df 93       	push	r29
	PORTE.OUTCLR = PIN4_bm;
 4fa:	0f 2e       	mov	r0, r31
 4fc:	f0 e8       	ldi	r31, 0x80	; 128
 4fe:	8f 2e       	mov	r8, r31
 500:	f6 e0       	ldi	r31, 0x06	; 6
 502:	9f 2e       	mov	r9, r31
 504:	f0 2d       	mov	r31, r0
 506:	68 94       	set
 508:	77 24       	eor	r7, r7
 50a:	74 f8       	bld	r7, 4
 50c:	f4 01       	movw	r30, r8
 50e:	76 82       	std	Z+6, r7	; 0x06
	
	throttleAxis.thrust = spiPC_write_read(upperByte16(dummy_read)) << 8;						
 510:	80 e0       	ldi	r24, 0x00	; 0
 512:	d9 d2       	rcall	.+1458   	; 0xac6 <spiPC_write_read>
 514:	d8 2f       	mov	r29, r24
 516:	f0 e0       	ldi	r31, 0x00	; 0
 518:	cf 2f       	mov	r28, r31
 51a:	08 e0       	ldi	r16, 0x08	; 8
 51c:	11 e2       	ldi	r17, 0x21	; 33
 51e:	f8 01       	movw	r30, r16
 520:	c0 83       	st	Z, r28
 522:	d1 83       	std	Z+1, r29	; 0x01
	throttleAxis.thrust += spiPC_write_read(lowerByte16(dummy_read));							
 524:	80 91 5b 20 	lds	r24, 0x205B
 528:	ce d2       	rcall	.+1436   	; 0xac6 <spiPC_write_read>
 52a:	c8 0f       	add	r28, r24
 52c:	d1 1d       	adc	r29, r1
 52e:	f8 01       	movw	r30, r16
 530:	c0 83       	st	Z, r28
 532:	d1 83       	std	Z+1, r29	; 0x01
	
	//rollAxis.attitude_feedback_15 = throttleAxis.thrust;
	rollAxis.attitude_command = spiPC_write_read(upperByte16(rollAxis.attitude_feedback_15)) << 8;
 534:	0f 2e       	mov	r0, r31
 536:	f6 e2       	ldi	r31, 0x26	; 38
 538:	ef 2e       	mov	r14, r31
 53a:	f0 e2       	ldi	r31, 0x20	; 32
 53c:	ff 2e       	mov	r15, r31
 53e:	f0 2d       	mov	r31, r0
 540:	f7 01       	movw	r30, r14
 542:	81 81       	ldd	r24, Z+1	; 0x01
 544:	c0 d2       	rcall	.+1408   	; 0xac6 <spiPC_write_read>
 546:	d8 2f       	mov	r29, r24
 548:	f0 e0       	ldi	r31, 0x00	; 0
 54a:	cf 2f       	mov	r28, r31
 54c:	0c e2       	ldi	r16, 0x2C	; 44
 54e:	10 e2       	ldi	r17, 0x20	; 32
 550:	f8 01       	movw	r30, r16
 552:	c0 83       	st	Z, r28
 554:	d1 83       	std	Z+1, r29	; 0x01
	rollAxis.attitude_command  += spiPC_write_read(lowerByte16(rollAxis.attitude_feedback_15));
 556:	f7 01       	movw	r30, r14
 558:	80 81       	ld	r24, Z
 55a:	b5 d2       	rcall	.+1386   	; 0xac6 <spiPC_write_read>
 55c:	c8 0f       	add	r28, r24
 55e:	d1 1d       	adc	r29, r1
 560:	f8 01       	movw	r30, r16
 562:	c0 83       	st	Z, r28
 564:	d1 83       	std	Z+1, r29	; 0x01
	
	//pitchAxis.attitude_feedback = rollAxis.attitude_command;
	pitchAxis.attitude_command = spiPC_write_read(upperByte16(pitchAxis.attitude_feedback_15)) << 8;
 566:	0f 2e       	mov	r0, r31
 568:	f4 e8       	ldi	r31, 0x84	; 132
 56a:	ef 2e       	mov	r14, r31
 56c:	f0 e2       	ldi	r31, 0x20	; 32
 56e:	ff 2e       	mov	r15, r31
 570:	f0 2d       	mov	r31, r0
 572:	f7 01       	movw	r30, r14
 574:	81 81       	ldd	r24, Z+1	; 0x01
 576:	a7 d2       	rcall	.+1358   	; 0xac6 <spiPC_write_read>
 578:	d8 2f       	mov	r29, r24
 57a:	f0 e0       	ldi	r31, 0x00	; 0
 57c:	cf 2f       	mov	r28, r31
 57e:	0a e8       	ldi	r16, 0x8A	; 138
 580:	10 e2       	ldi	r17, 0x20	; 32
 582:	f8 01       	movw	r30, r16
 584:	c0 83       	st	Z, r28
 586:	d1 83       	std	Z+1, r29	; 0x01
	pitchAxis.attitude_command += spiPC_write_read(lowerByte16(pitchAxis.attitude_feedback_15));
 588:	f7 01       	movw	r30, r14
 58a:	80 81       	ld	r24, Z
 58c:	9c d2       	rcall	.+1336   	; 0xac6 <spiPC_write_read>
 58e:	c8 0f       	add	r28, r24
 590:	d1 1d       	adc	r29, r1
 592:	f8 01       	movw	r30, r16
 594:	c0 83       	st	Z, r28
 596:	d1 83       	std	Z+1, r29	; 0x01
	
	//yawAxis.attitude_feedback = 0;
	yawAxis.attitude_command = spiPC_write_read(upperByte16(yawAxis.attitude_feedback_15)) << 8;
 598:	0f 2e       	mov	r0, r31
 59a:	f4 e3       	ldi	r31, 0x34	; 52
 59c:	ef 2e       	mov	r14, r31
 59e:	f1 e2       	ldi	r31, 0x21	; 33
 5a0:	ff 2e       	mov	r15, r31
 5a2:	f0 2d       	mov	r31, r0
 5a4:	f7 01       	movw	r30, r14
 5a6:	81 81       	ldd	r24, Z+1	; 0x01
 5a8:	8e d2       	rcall	.+1308   	; 0xac6 <spiPC_write_read>
 5aa:	d8 2f       	mov	r29, r24
 5ac:	f0 e0       	ldi	r31, 0x00	; 0
 5ae:	cf 2f       	mov	r28, r31
 5b0:	0a e3       	ldi	r16, 0x3A	; 58
 5b2:	11 e2       	ldi	r17, 0x21	; 33
 5b4:	f8 01       	movw	r30, r16
 5b6:	c0 83       	st	Z, r28
 5b8:	d1 83       	std	Z+1, r29	; 0x01
	yawAxis.attitude_command += spiPC_write_read(lowerByte16(yawAxis.attitude_feedback_15));
 5ba:	f7 01       	movw	r30, r14
 5bc:	80 81       	ld	r24, Z
 5be:	83 d2       	rcall	.+1286   	; 0xac6 <spiPC_write_read>
 5c0:	c8 0f       	add	r28, r24
 5c2:	d1 1d       	adc	r29, r1
 5c4:	f8 01       	movw	r30, r16
 5c6:	c0 83       	st	Z, r28
 5c8:	d1 83       	std	Z+1, r29	; 0x01
		
	pitchAxis.Kp = spiPC_write_read(upperByte16(rollAxis.rate_feedback_15 ))<< 8;
 5ca:	0a e2       	ldi	r16, 0x2A	; 42
 5cc:	10 e2       	ldi	r17, 0x20	; 32
 5ce:	f8 01       	movw	r30, r16
 5d0:	81 81       	ldd	r24, Z+1	; 0x01
 5d2:	79 d2       	rcall	.+1266   	; 0xac6 <spiPC_write_read>
 5d4:	d8 2f       	mov	r29, r24
 5d6:	f0 e0       	ldi	r31, 0x00	; 0
 5d8:	cf 2f       	mov	r28, r31
 5da:	0f 2e       	mov	r0, r31
 5dc:	fa e7       	ldi	r31, 0x7A	; 122
 5de:	af 2e       	mov	r10, r31
 5e0:	f0 e2       	ldi	r31, 0x20	; 32
 5e2:	bf 2e       	mov	r11, r31
 5e4:	f0 2d       	mov	r31, r0
 5e6:	f5 01       	movw	r30, r10
 5e8:	c0 83       	st	Z, r28
 5ea:	d1 83       	std	Z+1, r29	; 0x01
	pitchAxis.Kp += spiPC_write_read(lowerByte16(rollAxis.rate_feedback_15 ));							
 5ec:	f8 01       	movw	r30, r16
 5ee:	80 81       	ld	r24, Z
 5f0:	6a d2       	rcall	.+1236   	; 0xac6 <spiPC_write_read>
 5f2:	c8 0f       	add	r28, r24
 5f4:	d1 1d       	adc	r29, r1
 5f6:	f5 01       	movw	r30, r10
 5f8:	c0 83       	st	Z, r28
 5fa:	d1 83       	std	Z+1, r29	; 0x01
	
	//pitchAxis.rate_feedback_15 = 0x8080;
	pitchAxis.Ki = spiPC_write_read(upperByte16(pitchAxis.rate_feedback_15  )) << 8;					
 5fc:	08 e8       	ldi	r16, 0x88	; 136
 5fe:	10 e2       	ldi	r17, 0x20	; 32
 600:	f8 01       	movw	r30, r16
 602:	81 81       	ldd	r24, Z+1	; 0x01
 604:	60 d2       	rcall	.+1216   	; 0xac6 <spiPC_write_read>
 606:	d8 2f       	mov	r29, r24
 608:	f0 e0       	ldi	r31, 0x00	; 0
 60a:	cf 2f       	mov	r28, r31
 60c:	0f 2e       	mov	r0, r31
 60e:	fc e7       	ldi	r31, 0x7C	; 124
 610:	cf 2e       	mov	r12, r31
 612:	f0 e2       	ldi	r31, 0x20	; 32
 614:	df 2e       	mov	r13, r31
 616:	f0 2d       	mov	r31, r0
 618:	f6 01       	movw	r30, r12
 61a:	c0 83       	st	Z, r28
 61c:	d1 83       	std	Z+1, r29	; 0x01
	pitchAxis.Ki += spiPC_write_read(lowerByte16(pitchAxis.rate_feedback_15 ));							
 61e:	f8 01       	movw	r30, r16
 620:	80 81       	ld	r24, Z
 622:	51 d2       	rcall	.+1186   	; 0xac6 <spiPC_write_read>
 624:	c8 0f       	add	r28, r24
 626:	d1 1d       	adc	r29, r1
 628:	f6 01       	movw	r30, r12
 62a:	c0 83       	st	Z, r28
 62c:	d1 83       	std	Z+1, r29	; 0x01
	
	//yawAxis.rate_feedback = rollAxis.pid_total;
	pitchAxis.Kd= (spiPC_write_read(upperByte16(yawAxis.rate_feedback_15))) << 8;
 62e:	c8 e3       	ldi	r28, 0x38	; 56
 630:	d1 e2       	ldi	r29, 0x21	; 33
 632:	89 81       	ldd	r24, Y+1	; 0x01
 634:	48 d2       	rcall	.+1168   	; 0xac6 <spiPC_write_read>
 636:	18 2f       	mov	r17, r24
 638:	00 e0       	ldi	r16, 0x00	; 0
 63a:	0f 2e       	mov	r0, r31
 63c:	fe e7       	ldi	r31, 0x7E	; 126
 63e:	ef 2e       	mov	r14, r31
 640:	f0 e2       	ldi	r31, 0x20	; 32
 642:	ff 2e       	mov	r15, r31
 644:	f0 2d       	mov	r31, r0
 646:	f7 01       	movw	r30, r14
 648:	00 83       	st	Z, r16
 64a:	11 83       	std	Z+1, r17	; 0x01
	pitchAxis.Kd+= spiPC_write_read(lowerByte16(yawAxis.rate_feedback_15));			
 64c:	88 81       	ld	r24, Y
 64e:	3b d2       	rcall	.+1142   	; 0xac6 <spiPC_write_read>
 650:	08 0f       	add	r16, r24
 652:	11 1d       	adc	r17, r1
 654:	f7 01       	movw	r30, r14
 656:	00 83       	st	Z, r16
 658:	11 83       	std	Z+1, r17	; 0x01
	
	//yawAxis.rate_feedback_15 = 0x0080;
	command= (spiPC_write_read(upperByte16(yawAxis.rate_feedback_15))) << 8;
 65a:	89 81       	ldd	r24, Y+1	; 0x01
 65c:	34 d2       	rcall	.+1128   	; 0xac6 <spiPC_write_read>
 65e:	10 92 58 20 	sts	0x2058, r1
 662:	80 93 59 20 	sts	0x2059, r24
	command+= spiPC_write_read(lowerByte16(yawAxis.rate_feedback_15));			
 666:	88 81       	ld	r24, Y
 668:	2e d2       	rcall	.+1116   	; 0xac6 <spiPC_write_read>
 66a:	20 91 58 20 	lds	r18, 0x2058
 66e:	30 91 59 20 	lds	r19, 0x2059
 672:	28 0f       	add	r18, r24
 674:	31 1d       	adc	r19, r1
 676:	20 93 58 20 	sts	0x2058, r18
 67a:	30 93 59 20 	sts	0x2059, r19
	
	dummy_read = spiPC_write_read(END_PACKET_CHAR);													
 67e:	80 e8       	ldi	r24, 0x80	; 128
 680:	22 d2       	rcall	.+1092   	; 0xac6 <spiPC_write_read>
 682:	80 93 5b 20 	sts	0x205B, r24
	dummy_read = spiPC_write_read(END_PACKET_CHAR);			
 686:	80 e8       	ldi	r24, 0x80	; 128
 688:	1e d2       	rcall	.+1084   	; 0xac6 <spiPC_write_read>
 68a:	80 93 5b 20 	sts	0x205B, r24

	PORTE.OUTSET = PIN4_bm;
 68e:	f4 01       	movw	r30, r8
 690:	75 82       	std	Z+5, r7	; 0x05
	
	rollAxis.Kp = pitchAxis.Kp;
 692:	f5 01       	movw	r30, r10
 694:	40 81       	ld	r20, Z
 696:	51 81       	ldd	r21, Z+1	; 0x01
 698:	40 93 1c 20 	sts	0x201C, r20
 69c:	50 93 1d 20 	sts	0x201D, r21
	rollAxis.Ki = pitchAxis.Ki;
 6a0:	f6 01       	movw	r30, r12
 6a2:	20 81       	ld	r18, Z
 6a4:	31 81       	ldd	r19, Z+1	; 0x01
 6a6:	20 93 1e 20 	sts	0x201E, r18
 6aa:	30 93 1f 20 	sts	0x201F, r19
	rollAxis.Kd = pitchAxis.Kd;
 6ae:	f7 01       	movw	r30, r14
 6b0:	80 81       	ld	r24, Z
 6b2:	91 81       	ldd	r25, Z+1	; 0x01
 6b4:	80 93 20 20 	sts	0x2020, r24
 6b8:	90 93 21 20 	sts	0x2021, r25
	
	yawAxis.Kp = pitchAxis.Kp;
 6bc:	40 93 2a 21 	sts	0x212A, r20
 6c0:	50 93 2b 21 	sts	0x212B, r21
	yawAxis.Ki = pitchAxis.Ki;
 6c4:	20 93 2c 21 	sts	0x212C, r18
 6c8:	30 93 2d 21 	sts	0x212D, r19
	yawAxis.Kd = pitchAxis.Kd;
 6cc:	80 93 2e 21 	sts	0x212E, r24
 6d0:	90 93 2f 21 	sts	0x212F, r25

	
	return command;
	
	
}
 6d4:	80 91 58 20 	lds	r24, 0x2058
 6d8:	90 91 59 20 	lds	r25, 0x2059
 6dc:	df 91       	pop	r29
 6de:	cf 91       	pop	r28
 6e0:	1f 91       	pop	r17
 6e2:	0f 91       	pop	r16
 6e4:	ff 90       	pop	r15
 6e6:	ef 90       	pop	r14
 6e8:	df 90       	pop	r13
 6ea:	cf 90       	pop	r12
 6ec:	bf 90       	pop	r11
 6ee:	af 90       	pop	r10
 6f0:	9f 90       	pop	r9
 6f2:	8f 90       	pop	r8
 6f4:	7f 90       	pop	r7
 6f6:	08 95       	ret

000006f8 <UpdateEulerAngles>:
DISCRIPTION:   Read in data from the IMU.   IMU data are 16 bits sorted in 32 bit registers, see
data sheet for read commands.  Divide all the data by 2 to convert to 15 bit int, this will leave 
room for the header.
*********************************************************************************************************** */
void UpdateEulerAngles()
{
 6f8:	cf 93       	push	r28
		PORTF.OUTCLR = PIN4_bm;
 6fa:	80 e1       	ldi	r24, 0x10	; 16
 6fc:	e0 ea       	ldi	r30, 0xA0	; 160
 6fe:	f6 e0       	ldi	r31, 0x06	; 6
 700:	86 83       	std	Z+6, r24	; 0x06
		
		uint8_t dummy_read;
		//psi = yaw  phi = roll    theta = pitch
		dummy_read = spiIMU_write_read(READ_COMMAND);
 702:	80 e0       	ldi	r24, 0x00	; 0
 704:	ee d1       	rcall	.+988    	; 0xae2 <spiIMU_write_read>
		dummy_read = spiIMU_write_read(UM6_EULER_PHI_THETA);
 706:	82 e6       	ldi	r24, 0x62	; 98
 708:	ec d1       	rcall	.+984    	; 0xae2 <spiIMU_write_read>
		
		rollAxis.attitude_feedback = (spiIMU_write_read(DUMMY_READ)<< 8) | spiIMU_write_read(DUMMY_READ);
 70a:	80 e0       	ldi	r24, 0x00	; 0
 70c:	ea d1       	rcall	.+980    	; 0xae2 <spiIMU_write_read>
 70e:	c8 2f       	mov	r28, r24
 710:	80 e0       	ldi	r24, 0x00	; 0
 712:	e7 d1       	rcall	.+974    	; 0xae2 <spiIMU_write_read>
 714:	3c 2f       	mov	r19, r28
 716:	20 e0       	ldi	r18, 0x00	; 0
 718:	28 2b       	or	r18, r24
 71a:	20 93 24 20 	sts	0x2024, r18
 71e:	30 93 25 20 	sts	0x2025, r19
		rollAxis.attitude_feedback_15 = rollAxis.attitude_feedback /2;
 722:	c9 01       	movw	r24, r18
 724:	99 23       	and	r25, r25
 726:	0c f4       	brge	.+2      	; 0x72a <UpdateEulerAngles+0x32>
 728:	01 96       	adiw	r24, 0x01	; 1
 72a:	95 95       	asr	r25
 72c:	87 95       	ror	r24
 72e:	80 93 26 20 	sts	0x2026, r24
 732:	90 93 27 20 	sts	0x2027, r25
		
		pitchAxis.attitude_feedback = (spiIMU_write_read(DUMMY_READ)<< 8) | spiIMU_write_read(UM6_EULER_PSI);
 736:	80 e0       	ldi	r24, 0x00	; 0
 738:	d4 d1       	rcall	.+936    	; 0xae2 <spiIMU_write_read>
 73a:	c8 2f       	mov	r28, r24
 73c:	83 e6       	ldi	r24, 0x63	; 99
 73e:	d1 d1       	rcall	.+930    	; 0xae2 <spiIMU_write_read>
 740:	3c 2f       	mov	r19, r28
 742:	20 e0       	ldi	r18, 0x00	; 0
 744:	28 2b       	or	r18, r24
 746:	20 93 82 20 	sts	0x2082, r18
 74a:	30 93 83 20 	sts	0x2083, r19
		pitchAxis.attitude_feedback_15 =pitchAxis.attitude_feedback/2;	
 74e:	c9 01       	movw	r24, r18
 750:	99 23       	and	r25, r25
 752:	0c f4       	brge	.+2      	; 0x756 <UpdateEulerAngles+0x5e>
 754:	01 96       	adiw	r24, 0x01	; 1
 756:	95 95       	asr	r25
 758:	87 95       	ror	r24
 75a:	80 93 84 20 	sts	0x2084, r24
 75e:	90 93 85 20 	sts	0x2085, r25
		
		yawAxis.attitude_feedback = (spiIMU_write_read(DUMMY_READ)<< 8) | spiIMU_write_read(DUMMY_READ);
 762:	80 e0       	ldi	r24, 0x00	; 0
 764:	be d1       	rcall	.+892    	; 0xae2 <spiIMU_write_read>
 766:	c8 2f       	mov	r28, r24
 768:	80 e0       	ldi	r24, 0x00	; 0
 76a:	bb d1       	rcall	.+886    	; 0xae2 <spiIMU_write_read>
 76c:	3c 2f       	mov	r19, r28
 76e:	20 e0       	ldi	r18, 0x00	; 0
 770:	28 2b       	or	r18, r24
 772:	20 93 32 21 	sts	0x2132, r18
 776:	30 93 33 21 	sts	0x2133, r19
		yawAxis.attitude_feedback_15 = yawAxis.attitude_feedback/2;
 77a:	c9 01       	movw	r24, r18
 77c:	99 23       	and	r25, r25
 77e:	0c f4       	brge	.+2      	; 0x782 <UpdateEulerAngles+0x8a>
 780:	01 96       	adiw	r24, 0x01	; 1
 782:	95 95       	asr	r25
 784:	87 95       	ror	r24
 786:	80 93 34 21 	sts	0x2134, r24
 78a:	90 93 35 21 	sts	0x2135, r25
		
		dummy_read = spiIMU_write_read(DUMMY_READ);     
 78e:	80 e0       	ldi	r24, 0x00	; 0
 790:	a8 d1       	rcall	.+848    	; 0xae2 <spiIMU_write_read>
		dummy_read =  spiIMU_write_read(UM6_GYRO_PROC_XY);			
 792:	8c e5       	ldi	r24, 0x5C	; 92
 794:	a6 d1       	rcall	.+844    	; 0xae2 <spiIMU_write_read>
			
		rollAxis.rate_feedback = (spiIMU_write_read(DUMMY_READ)<< 8) | spiIMU_write_read(DUMMY_READ);
 796:	80 e0       	ldi	r24, 0x00	; 0
 798:	a4 d1       	rcall	.+840    	; 0xae2 <spiIMU_write_read>
 79a:	c8 2f       	mov	r28, r24
 79c:	80 e0       	ldi	r24, 0x00	; 0
 79e:	a1 d1       	rcall	.+834    	; 0xae2 <spiIMU_write_read>
 7a0:	3c 2f       	mov	r19, r28
 7a2:	20 e0       	ldi	r18, 0x00	; 0
 7a4:	28 2b       	or	r18, r24
 7a6:	20 93 28 20 	sts	0x2028, r18
 7aa:	30 93 29 20 	sts	0x2029, r19
		rollAxis.rate_feedback_15 =rollAxis.rate_feedback/2;
 7ae:	c9 01       	movw	r24, r18
 7b0:	99 23       	and	r25, r25
 7b2:	0c f4       	brge	.+2      	; 0x7b6 <UpdateEulerAngles+0xbe>
 7b4:	01 96       	adiw	r24, 0x01	; 1
 7b6:	95 95       	asr	r25
 7b8:	87 95       	ror	r24
 7ba:	80 93 2a 20 	sts	0x202A, r24
 7be:	90 93 2b 20 	sts	0x202B, r25
		
		pitchAxis.rate_feedback = (spiIMU_write_read(DUMMY_READ)<< 8) | spiIMU_write_read(UM6_GYRO_PROC_Z);
 7c2:	80 e0       	ldi	r24, 0x00	; 0
 7c4:	8e d1       	rcall	.+796    	; 0xae2 <spiIMU_write_read>
 7c6:	c8 2f       	mov	r28, r24
 7c8:	8d e5       	ldi	r24, 0x5D	; 93
 7ca:	8b d1       	rcall	.+790    	; 0xae2 <spiIMU_write_read>
 7cc:	3c 2f       	mov	r19, r28
 7ce:	20 e0       	ldi	r18, 0x00	; 0
 7d0:	28 2b       	or	r18, r24
 7d2:	20 93 86 20 	sts	0x2086, r18
 7d6:	30 93 87 20 	sts	0x2087, r19
		pitchAxis.rate_feedback_15 =pitchAxis.rate_feedback/2;	
 7da:	c9 01       	movw	r24, r18
 7dc:	99 23       	and	r25, r25
 7de:	0c f4       	brge	.+2      	; 0x7e2 <UpdateEulerAngles+0xea>
 7e0:	01 96       	adiw	r24, 0x01	; 1
 7e2:	95 95       	asr	r25
 7e4:	87 95       	ror	r24
 7e6:	80 93 88 20 	sts	0x2088, r24
 7ea:	90 93 89 20 	sts	0x2089, r25
		
		yawAxis.rate_feedback = (spiIMU_write_read(DUMMY_READ)<< 8) | spiIMU_write_read(DUMMY_READ);
 7ee:	80 e0       	ldi	r24, 0x00	; 0
 7f0:	78 d1       	rcall	.+752    	; 0xae2 <spiIMU_write_read>
 7f2:	c8 2f       	mov	r28, r24
 7f4:	80 e0       	ldi	r24, 0x00	; 0
 7f6:	75 d1       	rcall	.+746    	; 0xae2 <spiIMU_write_read>
 7f8:	3c 2f       	mov	r19, r28
 7fa:	20 e0       	ldi	r18, 0x00	; 0
 7fc:	28 2b       	or	r18, r24
 7fe:	20 93 36 21 	sts	0x2136, r18
 802:	30 93 37 21 	sts	0x2137, r19
		yawAxis.rate_feedback_15 = yawAxis.rate_feedback/2;
 806:	c9 01       	movw	r24, r18
 808:	99 23       	and	r25, r25
 80a:	0c f4       	brge	.+2      	; 0x80e <UpdateEulerAngles+0x116>
 80c:	01 96       	adiw	r24, 0x01	; 1
 80e:	95 95       	asr	r25
 810:	87 95       	ror	r24
 812:	80 93 38 21 	sts	0x2138, r24
 816:	90 93 39 21 	sts	0x2139, r25
		
		dummy_read = spiIMU_write_read(DUMMY_READ);
 81a:	80 e0       	ldi	r24, 0x00	; 0
 81c:	62 d1       	rcall	.+708    	; 0xae2 <spiIMU_write_read>
		dummy_read =  spiIMU_write_read(DUMMY_READ);
 81e:	80 e0       	ldi	r24, 0x00	; 0
 820:	60 d1       	rcall	.+704    	; 0xae2 <spiIMU_write_read>
		
		PORTF.OUTSET = PIN4_bm;	
 822:	80 e1       	ldi	r24, 0x10	; 16
 824:	e0 ea       	ldi	r30, 0xA0	; 160
 826:	f6 e0       	ldi	r31, 0x06	; 6
 828:	85 83       	std	Z+5, r24	; 0x05
}
 82a:	cf 91       	pop	r28
 82c:	08 95       	ret

0000082e <ControlLoop>:
which runs at 300Hz.  The complementary filter can run at 750Hz so we could speed this up in necessary
*********************************************************************************************************** */
void ControlLoop()
{
	
	int16counter++;
 82e:	80 91 66 21 	lds	r24, 0x2166
 832:	90 91 67 21 	lds	r25, 0x2167
 836:	01 96       	adiw	r24, 0x01	; 1
 838:	80 93 66 21 	sts	0x2166, r24
 83c:	90 93 67 21 	sts	0x2167, r25

	UpdateEulerAngles();
 840:	5b df       	rcall	.-330    	; 0x6f8 <UpdateEulerAngles>

	PI_attitude_rate(&pitchAxis);
 842:	84 e6       	ldi	r24, 0x64	; 100
 844:	90 e2       	ldi	r25, 0x20	; 32
 846:	fb dc       	rcall	.-1546   	; 0x23e <PI_attitude_rate>
	PI_attitude_rate(&yawAxis);
 848:	84 e1       	ldi	r24, 0x14	; 20
 84a:	91 e2       	ldi	r25, 0x21	; 33
 84c:	f8 dc       	rcall	.-1552   	; 0x23e <PI_attitude_rate>
	PI_attitude_rate(&rollAxis);
 84e:	86 e0       	ldi	r24, 0x06	; 6
 850:	90 e2       	ldi	r25, 0x20	; 32
 852:	f5 dc       	rcall	.-1558   	; 0x23e <PI_attitude_rate>
//
	//PI_rate(&pitchAxis);
	//PI_rate(&yawAxis);
	//PI_rate(&rollAxis);
	//
	SetPulseWidths();
 854:	c3 dd       	rcall	.-1146   	; 0x3dc <SetPulseWidths>
	sendUM6_Data();
 856:	37 de       	rcall	.-914    	; 0x4c6 <sendUM6_Data>
	
	//  write to the ATmega com buffer 31*.0033 ~ 100mSec
	if (int16counter >= 31)
 858:	80 91 66 21 	lds	r24, 0x2166
 85c:	90 91 67 21 	lds	r25, 0x2167
 860:	4f 97       	sbiw	r24, 0x1f	; 31
 862:	28 f0       	brcs	.+10     	; 0x86e <ControlLoop+0x40>
	
	{
		WriteToPC_SPI();	// 400uSec
 864:	3d de       	rcall	.-902    	; 0x4e0 <WriteToPC_SPI>
		int16counter = 0;
 866:	10 92 66 21 	sts	0x2166, r1
 86a:	10 92 67 21 	sts	0x2167, r1
 86e:	08 95       	ret

00000870 <init32MHzClock>:
*********************************************************************************************************** */
void init32MHzClock(void)
{

	//	Enable the 32 MHz internal RC oscillator.
	OSC.CTRL|=OSC_RC32MEN_bm;
 870:	e0 e5       	ldi	r30, 0x50	; 80
 872:	f0 e0       	ldi	r31, 0x00	; 0
 874:	80 81       	ld	r24, Z
 876:	82 60       	ori	r24, 0x02	; 2
 878:	80 83       	st	Z, r24
	//	The R32MRFY flag is set when the 32 MHz internal RC oscillator is stable
	//	and ready to be used as the System Clock source.
	while(!(OSC.STATUS &OSC_RC32MRDY_bm ));
 87a:	81 81       	ldd	r24, Z+1	; 0x01
 87c:	81 ff       	sbrs	r24, 1
 87e:	fd cf       	rjmp	.-6      	; 0x87a <init32MHzClock+0xa>
	CCP=CCP_IOREG_gc;
 880:	88 ed       	ldi	r24, 0xD8	; 216
 882:	84 bf       	out	0x34, r24	; 52
	//	Select the 32MHz RC oscillator for the system clock
	CLK.CTRL = CLK_SCLKSEL_RC32M_gc;
 884:	81 e0       	ldi	r24, 0x01	; 1
 886:	80 93 40 00 	sts	0x0040, r24
 88a:	08 95       	ret

0000088c <intiLoopTimer>:
void intiLoopTimer()
{
	

	// Set the timer prescale.
	TCD0.CTRLA = TC_CLKSEL_DIV4_gc;
 88c:	e0 e0       	ldi	r30, 0x00	; 0
 88e:	f9 e0       	ldi	r31, 0x09	; 9
 890:	83 e0       	ldi	r24, 0x03	; 3
 892:	80 83       	st	Z, r24

	/* Configure the timer for normal counting. */
	TCD0.CTRLB = TC_WGMODE_NORMAL_gc;
 894:	11 82       	std	Z+1, r1	; 0x01

	
	
	//  32MHz / TC_CLKSEL_DIV4_gc
	TCD0.PER = 26666;  //  Need the time to overflow at 300Hz
 896:	8a e2       	ldi	r24, 0x2A	; 42
 898:	98 e6       	ldi	r25, 0x68	; 104
 89a:	86 a3       	std	Z+38, r24	; 0x26
 89c:	97 a3       	std	Z+39, r25	; 0x27
	
	//TCD0.PER = 60000;
	//Configure timer to generate an interrupt on overflow. */
	TCD0.INTCTRLA = TC_OVFINTLVL_LO_gc;
 89e:	81 e0       	ldi	r24, 0x01	; 1
 8a0:	86 83       	std	Z+6, r24	; 0x06

	/* Enable this interrupt level. */
	PMIC.CTRL |= PMIC_LOLVLEN_bm;
 8a2:	e0 ea       	ldi	r30, 0xA0	; 160
 8a4:	f0 e0       	ldi	r31, 0x00	; 0
 8a6:	82 81       	ldd	r24, Z+2	; 0x02
 8a8:	81 60       	ori	r24, 0x01	; 1
 8aa:	82 83       	std	Z+2, r24	; 0x02
 8ac:	08 95       	ret

000008ae <zeroSensor>:




uint8_t zeroSensor()
{
 8ae:	1f 93       	push	r17
 8b0:	cf 93       	push	r28
 8b2:	df 93       	push	r29
	
	PORTF.OUTCLR = PIN4_bm;
 8b4:	c0 ea       	ldi	r28, 0xA0	; 160
 8b6:	d6 e0       	ldi	r29, 0x06	; 6
 8b8:	10 e1       	ldi	r17, 0x10	; 16
 8ba:	1e 83       	std	Y+6, r17	; 0x06
	//zero mad 0xB0
	
	//uint8_t dummy_read = 0x00;
	//psi = yaw  phi = roll    theta = pitch
	//0x01 0xAC 0x00 0x00 0x00 0x00
	dummy_read = spiIMU_write_read(WRITE_COMMAND);
 8bc:	81 e0       	ldi	r24, 0x01	; 1
 8be:	11 d1       	rcall	.+546    	; 0xae2 <spiIMU_write_read>
 8c0:	80 93 5b 20 	sts	0x205B, r24
	dummy_read = spiIMU_write_read(ZERO_GYROS);
 8c4:	8c ea       	ldi	r24, 0xAC	; 172
 8c6:	0d d1       	rcall	.+538    	; 0xae2 <spiIMU_write_read>
 8c8:	80 93 5b 20 	sts	0x205B, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 8cc:	80 e0       	ldi	r24, 0x00	; 0
 8ce:	09 d1       	rcall	.+530    	; 0xae2 <spiIMU_write_read>
 8d0:	80 93 5b 20 	sts	0x205B, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 8d4:	80 e0       	ldi	r24, 0x00	; 0
 8d6:	05 d1       	rcall	.+522    	; 0xae2 <spiIMU_write_read>
 8d8:	80 93 5b 20 	sts	0x205B, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 8dc:	80 e0       	ldi	r24, 0x00	; 0
 8de:	01 d1       	rcall	.+514    	; 0xae2 <spiIMU_write_read>
 8e0:	80 93 5b 20 	sts	0x205B, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 8e4:	80 e0       	ldi	r24, 0x00	; 0
 8e6:	fd d0       	rcall	.+506    	; 0xae2 <spiIMU_write_read>
 8e8:	80 93 5b 20 	sts	0x205B, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 8ec:	8f e8       	ldi	r24, 0x8F	; 143
 8ee:	91 e0       	ldi	r25, 0x01	; 1
 8f0:	01 97       	sbiw	r24, 0x01	; 1
 8f2:	f1 f7       	brne	.-4      	; 0x8f0 <zeroSensor+0x42>
 8f4:	00 c0       	rjmp	.+0      	; 0x8f6 <zeroSensor+0x48>
 8f6:	00 00       	nop
	
	_delay_us(50);
	dummy_read = spiIMU_write_read(WRITE_COMMAND);
 8f8:	81 e0       	ldi	r24, 0x01	; 1
 8fa:	f3 d0       	rcall	.+486    	; 0xae2 <spiIMU_write_read>
 8fc:	80 93 5b 20 	sts	0x205B, r24
	dummy_read = spiIMU_write_read(SET_ACCEL_REF);
 900:	8f ea       	ldi	r24, 0xAF	; 175
 902:	ef d0       	rcall	.+478    	; 0xae2 <spiIMU_write_read>
 904:	80 93 5b 20 	sts	0x205B, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 908:	80 e0       	ldi	r24, 0x00	; 0
 90a:	eb d0       	rcall	.+470    	; 0xae2 <spiIMU_write_read>
 90c:	80 93 5b 20 	sts	0x205B, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 910:	80 e0       	ldi	r24, 0x00	; 0
 912:	e7 d0       	rcall	.+462    	; 0xae2 <spiIMU_write_read>
 914:	80 93 5b 20 	sts	0x205B, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 918:	80 e0       	ldi	r24, 0x00	; 0
 91a:	e3 d0       	rcall	.+454    	; 0xae2 <spiIMU_write_read>
 91c:	80 93 5b 20 	sts	0x205B, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 920:	80 e0       	ldi	r24, 0x00	; 0
 922:	df d0       	rcall	.+446    	; 0xae2 <spiIMU_write_read>
 924:	80 93 5b 20 	sts	0x205B, r24
 928:	8f e8       	ldi	r24, 0x8F	; 143
 92a:	91 e0       	ldi	r25, 0x01	; 1
 92c:	01 97       	sbiw	r24, 0x01	; 1
 92e:	f1 f7       	brne	.-4      	; 0x92c <zeroSensor+0x7e>
 930:	00 c0       	rjmp	.+0      	; 0x932 <zeroSensor+0x84>
 932:	00 00       	nop
	

	_delay_us(50);
	dummy_read = spiIMU_write_read(WRITE_COMMAND);
 934:	81 e0       	ldi	r24, 0x01	; 1
 936:	d5 d0       	rcall	.+426    	; 0xae2 <spiIMU_write_read>
 938:	80 93 5b 20 	sts	0x205B, r24
	dummy_read = spiIMU_write_read(SET_MAG_REF);
 93c:	80 eb       	ldi	r24, 0xB0	; 176
 93e:	d1 d0       	rcall	.+418    	; 0xae2 <spiIMU_write_read>
 940:	80 93 5b 20 	sts	0x205B, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 944:	80 e0       	ldi	r24, 0x00	; 0
 946:	cd d0       	rcall	.+410    	; 0xae2 <spiIMU_write_read>
 948:	80 93 5b 20 	sts	0x205B, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 94c:	80 e0       	ldi	r24, 0x00	; 0
 94e:	c9 d0       	rcall	.+402    	; 0xae2 <spiIMU_write_read>
 950:	80 93 5b 20 	sts	0x205B, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 954:	80 e0       	ldi	r24, 0x00	; 0
 956:	c5 d0       	rcall	.+394    	; 0xae2 <spiIMU_write_read>
 958:	80 93 5b 20 	sts	0x205B, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 95c:	80 e0       	ldi	r24, 0x00	; 0
 95e:	c1 d0       	rcall	.+386    	; 0xae2 <spiIMU_write_read>
 960:	80 93 5b 20 	sts	0x205B, r24
 964:	8f e8       	ldi	r24, 0x8F	; 143
 966:	91 e0       	ldi	r25, 0x01	; 1
 968:	01 97       	sbiw	r24, 0x01	; 1
 96a:	f1 f7       	brne	.-4      	; 0x968 <zeroSensor+0xba>
 96c:	00 c0       	rjmp	.+0      	; 0x96e <zeroSensor+0xc0>
 96e:	00 00       	nop
	
	_delay_us(50);
	dummy_read = spiIMU_write_read(WRITE_COMMAND);
 970:	81 e0       	ldi	r24, 0x01	; 1
 972:	b7 d0       	rcall	.+366    	; 0xae2 <spiIMU_write_read>
 974:	80 93 5b 20 	sts	0x205B, r24
	dummy_read = spiIMU_write_read(UM6_RESET_EKF);
 978:	8d ea       	ldi	r24, 0xAD	; 173
 97a:	b3 d0       	rcall	.+358    	; 0xae2 <spiIMU_write_read>
 97c:	80 93 5b 20 	sts	0x205B, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 980:	80 e0       	ldi	r24, 0x00	; 0
 982:	af d0       	rcall	.+350    	; 0xae2 <spiIMU_write_read>
 984:	80 93 5b 20 	sts	0x205B, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 988:	80 e0       	ldi	r24, 0x00	; 0
 98a:	ab d0       	rcall	.+342    	; 0xae2 <spiIMU_write_read>
 98c:	80 93 5b 20 	sts	0x205B, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 990:	80 e0       	ldi	r24, 0x00	; 0
 992:	a7 d0       	rcall	.+334    	; 0xae2 <spiIMU_write_read>
 994:	80 93 5b 20 	sts	0x205B, r24
	dummy_read = spiIMU_write_read(DUMMY_READ);
 998:	80 e0       	ldi	r24, 0x00	; 0
 99a:	a3 d0       	rcall	.+326    	; 0xae2 <spiIMU_write_read>
 99c:	80 93 5b 20 	sts	0x205B, r24
	

	PORTF.OUTSET = PIN4_bm;
 9a0:	1d 83       	std	Y+5, r17	; 0x05
	
	return 1;
	
}
 9a2:	81 e0       	ldi	r24, 0x01	; 1
 9a4:	df 91       	pop	r29
 9a6:	cf 91       	pop	r28
 9a8:	1f 91       	pop	r17
 9aa:	08 95       	ret

000009ac <initSystem>:
  DISCRIPTION:  Do all the pre control loop set up tasks
*********************************************************************************************************** */
uint8_t initSystem()
{

	sei();
 9ac:	78 94       	sei
	initUART();
 9ae:	23 d1       	rcall	.+582    	; 0xbf6 <initUART>
	spi_set_up();
 9b0:	a5 d0       	rcall	.+330    	; 0xafc <spi_set_up>
	intPID_gains();
 9b2:	44 dd       	rcall	.-1400   	; 0x43c <intPID_gains>
	zeroSensor();
 9b4:	7c df       	rcall	.-264    	; 0x8ae <zeroSensor>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 9b6:	2f ef       	ldi	r18, 0xFF	; 255
 9b8:	8f e4       	ldi	r24, 0x4F	; 79
 9ba:	93 ec       	ldi	r25, 0xC3	; 195
 9bc:	21 50       	subi	r18, 0x01	; 1
 9be:	80 40       	sbci	r24, 0x00	; 0
 9c0:	90 40       	sbci	r25, 0x00	; 0
 9c2:	e1 f7       	brne	.-8      	; 0x9bc <initSystem+0x10>
 9c4:	00 c0       	rjmp	.+0      	; 0x9c6 <initSystem+0x1a>
 9c6:	00 00       	nop
	_delay_ms(2000);
	zeroSensor();
 9c8:	72 df       	rcall	.-284    	; 0x8ae <zeroSensor>

	return 1;

}
 9ca:	81 e0       	ldi	r24, 0x01	; 1
 9cc:	08 95       	ret

000009ce <main>:
OUTPUT:
DISCRIPTION: Main is used for set up and then just an infinite loop
*********************************************************************************************************** */
int main()
{
	PORTA.DIRSET = 0x0F;
 9ce:	8f e0       	ldi	r24, 0x0F	; 15
 9d0:	e0 e0       	ldi	r30, 0x00	; 0
 9d2:	f6 e0       	ldi	r31, 0x06	; 6
 9d4:	81 83       	std	Z+1, r24	; 0x01
	systemState = SYSTEM_STATE_STARTUP;
 9d6:	8a ea       	ldi	r24, 0xAA	; 170
 9d8:	80 93 5a 20 	sts	0x205A, r24
	init32MHzClock();
 9dc:	49 df       	rcall	.-366    	; 0x870 <init32MHzClock>
	initSystem();
 9de:	e6 df       	rcall	.-52     	; 0x9ac <initSystem>
	intiLoopTimer();
 9e0:	55 df       	rcall	.-342    	; 0x88c <intiLoopTimer>

	
	while(1)
	{
		nop();
 9e2:	00 00       	nop
 9e4:	fe cf       	rjmp	.-4      	; 0x9e2 <main+0x14>

000009e6 <State>:
OUTPUT:
DISCRIPTION:   Determine what to do based on systemState.  Used to initializes and arm the quad.
*********************************************************************************************************** */
void State()
{
	LEDPORT.OUTTGL = PIN0_bm;
 9e6:	81 e0       	ldi	r24, 0x01	; 1
 9e8:	e0 e0       	ldi	r30, 0x00	; 0
 9ea:	f6 e0       	ldi	r31, 0x06	; 6
 9ec:	87 83       	std	Z+7, r24	; 0x07
	
	
	//UpdateEulerAngles_YEI_fast();
	switch(systemState)
 9ee:	80 91 5a 20 	lds	r24, 0x205A
 9f2:	82 30       	cpi	r24, 0x02	; 2
 9f4:	39 f1       	breq	.+78     	; 0xa44 <State+0x5e>
 9f6:	18 f4       	brcc	.+6      	; 0x9fe <State+0x18>
 9f8:	81 30       	cpi	r24, 0x01	; 1
 9fa:	71 f5       	brne	.+92     	; 0xa58 <State+0x72>
 9fc:	0a c0       	rjmp	.+20     	; 0xa12 <State+0x2c>
 9fe:	84 30       	cpi	r24, 0x04	; 4
 a00:	31 f1       	breq	.+76     	; 0xa4e <State+0x68>
 a02:	8a 3a       	cpi	r24, 0xAA	; 170
 a04:	49 f5       	brne	.+82     	; 0xa58 <State+0x72>
	{
		case SYSTEM_STATE_STARTUP:
			
			
			if (initSystem() ==  1)
 a06:	d2 df       	rcall	.-92     	; 0x9ac <initSystem>
 a08:	81 30       	cpi	r24, 0x01	; 1
 a0a:	31 f5       	brne	.+76     	; 0xa58 <State+0x72>
			{
				systemState = SYSTEM_ZERO;
 a0c:	80 93 5a 20 	sts	0x205A, r24
 a10:	08 95       	ret
 a12:	2f ef       	ldi	r18, 0xFF	; 255
 a14:	83 ec       	ldi	r24, 0xC3	; 195
 a16:	99 e0       	ldi	r25, 0x09	; 9
 a18:	21 50       	subi	r18, 0x01	; 1
 a1a:	80 40       	sbci	r24, 0x00	; 0
 a1c:	90 40       	sbci	r25, 0x00	; 0
 a1e:	e1 f7       	brne	.-8      	; 0xa18 <State+0x32>
 a20:	00 c0       	rjmp	.+0      	; 0xa22 <State+0x3c>
 a22:	00 00       	nop

			//LEDPORT.OUTTGL = PIN1_bm;
			// read commands from the PC and zero the system as necessary
			// PC transaction, read in command and send out sensor data
			_delay_ms(100);
			UpdateEulerAngles();
 a24:	69 de       	rcall	.-814    	; 0x6f8 <UpdateEulerAngles>
			
		
			
			int16_t cmdBytes;	
			//  get the last command sent form the PC, either zero the IMU or get ready to arm the system
			if ((cmdBytes = WriteToPC_SPI()) == SYSTEM_ZERO)
 a26:	5c dd       	rcall	.-1352   	; 0x4e0 <WriteToPC_SPI>
 a28:	81 30       	cpi	r24, 0x01	; 1
 a2a:	91 05       	cpc	r25, r1
 a2c:	29 f4       	brne	.+10     	; 0xa38 <State+0x52>
			{
				LEDPORT.OUTSET = PIN1_bm;
 a2e:	82 e0       	ldi	r24, 0x02	; 2
 a30:	e0 e0       	ldi	r30, 0x00	; 0
 a32:	f6 e0       	ldi	r31, 0x06	; 6
 a34:	85 83       	std	Z+5, r24	; 0x05
				zeroSensor();
 a36:	3b cf       	rjmp	.-394    	; 0x8ae <zeroSensor>
				//LEDPORT.OUTCLR = PIN1_bm;
			}

			if (cmdBytes == SYSTEM_ARM)
 a38:	02 97       	sbiw	r24, 0x02	; 2
 a3a:	71 f4       	brne	.+28     	; 0xa58 <State+0x72>
			{
				systemState = SYSTEM_ARM;
 a3c:	82 e0       	ldi	r24, 0x02	; 2
 a3e:	80 93 5a 20 	sts	0x205A, r24
 a42:	08 95       	ret
			}

		break;

		case SYSTEM_ARM:
			initPWM();
 a44:	8d dc       	rcall	.-1766   	; 0x360 <initPWM>
			systemState = SYSTEM_STATE_FLY;
 a46:	84 e0       	ldi	r24, 0x04	; 4
 a48:	80 93 5a 20 	sts	0x205A, r24

		break;
 a4c:	08 95       	ret

		case SYSTEM_STATE_FLY:
			// run the control loop
			LEDPORT.OUTTGL = PIN1_bm;
 a4e:	82 e0       	ldi	r24, 0x02	; 2
 a50:	e0 e0       	ldi	r30, 0x00	; 0
 a52:	f6 e0       	ldi	r31, 0x06	; 6
 a54:	87 83       	std	Z+7, r24	; 0x07
			ControlLoop();
 a56:	eb ce       	rjmp	.-554    	; 0x82e <ControlLoop>
 a58:	08 95       	ret

00000a5a <__vector_77>:
  INPUT:
  OUTPUT:
  DISCRIPTION:   Interrupt vector
*********************************************************************************************************** */
ISR(TCD0_OVF_vect)
{
 a5a:	1f 92       	push	r1
 a5c:	0f 92       	push	r0
 a5e:	0f b6       	in	r0, 0x3f	; 63
 a60:	0f 92       	push	r0
 a62:	11 24       	eor	r1, r1
 a64:	08 b6       	in	r0, 0x38	; 56
 a66:	0f 92       	push	r0
 a68:	18 be       	out	0x38, r1	; 56
 a6a:	09 b6       	in	r0, 0x39	; 57
 a6c:	0f 92       	push	r0
 a6e:	19 be       	out	0x39, r1	; 57
 a70:	0b b6       	in	r0, 0x3b	; 59
 a72:	0f 92       	push	r0
 a74:	1b be       	out	0x3b, r1	; 59
 a76:	2f 93       	push	r18
 a78:	3f 93       	push	r19
 a7a:	4f 93       	push	r20
 a7c:	5f 93       	push	r21
 a7e:	6f 93       	push	r22
 a80:	7f 93       	push	r23
 a82:	8f 93       	push	r24
 a84:	9f 93       	push	r25
 a86:	af 93       	push	r26
 a88:	bf 93       	push	r27
 a8a:	ef 93       	push	r30
 a8c:	ff 93       	push	r31
	//LEDPORT.OUTTGL = PIN0_bm;
	TCD0.CNT = 0;
 a8e:	e0 e0       	ldi	r30, 0x00	; 0
 a90:	f9 e0       	ldi	r31, 0x09	; 9
 a92:	10 a2       	std	Z+32, r1	; 0x20
 a94:	11 a2       	std	Z+33, r1	; 0x21
	State();
 a96:	a7 df       	rcall	.-178    	; 0x9e6 <State>

}
 a98:	ff 91       	pop	r31
 a9a:	ef 91       	pop	r30
 a9c:	bf 91       	pop	r27
 a9e:	af 91       	pop	r26
 aa0:	9f 91       	pop	r25
 aa2:	8f 91       	pop	r24
 aa4:	7f 91       	pop	r23
 aa6:	6f 91       	pop	r22
 aa8:	5f 91       	pop	r21
 aaa:	4f 91       	pop	r20
 aac:	3f 91       	pop	r19
 aae:	2f 91       	pop	r18
 ab0:	0f 90       	pop	r0
 ab2:	0b be       	out	0x3b, r0	; 59
 ab4:	0f 90       	pop	r0
 ab6:	09 be       	out	0x39, r0	; 57
 ab8:	0f 90       	pop	r0
 aba:	08 be       	out	0x38, r0	; 56
 abc:	0f 90       	pop	r0
 abe:	0f be       	out	0x3f, r0	; 63
 ac0:	0f 90       	pop	r0
 ac2:	1f 90       	pop	r1
 ac4:	18 95       	reti

00000ac6 <spiPC_write_read>:
	SPIC.DATA = spi_data;
	while(!(SPIC.STATUS & SPI_IF_bm)); // Wait until the data transfer is complete
	_delay_us(6);
	return SPIC.DATA;

}
 ac6:	e0 ec       	ldi	r30, 0xC0	; 192
 ac8:	fa e0       	ldi	r31, 0x0A	; 10
 aca:	83 83       	std	Z+3, r24	; 0x03
 acc:	82 81       	ldd	r24, Z+2	; 0x02
 ace:	88 23       	and	r24, r24
 ad0:	ec f7       	brge	.-6      	; 0xacc <spiPC_write_read+0x6>
 ad2:	8a e2       	ldi	r24, 0x2A	; 42
 ad4:	8a 95       	dec	r24
 ad6:	f1 f7       	brne	.-4      	; 0xad4 <spiPC_write_read+0xe>
 ad8:	00 c0       	rjmp	.+0      	; 0xada <spiPC_write_read+0x14>
 ada:	e0 ec       	ldi	r30, 0xC0	; 192
 adc:	fa e0       	ldi	r31, 0x0A	; 10
 ade:	83 81       	ldd	r24, Z+3	; 0x03
 ae0:	08 95       	ret

00000ae2 <spiIMU_write_read>:
 ae2:	e0 ec       	ldi	r30, 0xC0	; 192
 ae4:	fb e0       	ldi	r31, 0x0B	; 11
 ae6:	83 83       	std	Z+3, r24	; 0x03
 ae8:	82 81       	ldd	r24, Z+2	; 0x02
 aea:	88 23       	and	r24, r24
 aec:	ec f7       	brge	.-6      	; 0xae8 <spiIMU_write_read+0x6>
 aee:	80 e2       	ldi	r24, 0x20	; 32
 af0:	8a 95       	dec	r24
 af2:	f1 f7       	brne	.-4      	; 0xaf0 <spiIMU_write_read+0xe>
 af4:	e0 ec       	ldi	r30, 0xC0	; 192
 af6:	fb e0       	ldi	r31, 0x0B	; 11
 af8:	83 81       	ldd	r24, Z+3	; 0x03
 afa:	08 95       	ret

00000afc <spi_set_up>:
DISCRIPTION:    Initialize SPI master on port F for the IMU communication.
			    Initialize SPI master on port F for the PC communication
*********************************************************************************************************** */
	
void spi_set_up()
{
 afc:	af 92       	push	r10
 afe:	cf 92       	push	r12
 b00:	ef 92       	push	r14
 b02:	0f 93       	push	r16
 b04:	cf 93       	push	r28
 b06:	df 93       	push	r29
	///* Initialize SPI master on port F for the IMU communication. */
	///* Init SS pin as output with wired AND and pull-up. */
	////*************************************************************
	PORTF.DIRSET = PIN4_bm;
 b08:	e0 ea       	ldi	r30, 0xA0	; 160
 b0a:	f6 e0       	ldi	r31, 0x06	; 6
 b0c:	c0 e1       	ldi	r28, 0x10	; 16
 b0e:	c1 83       	std	Z+1, r28	; 0x01
	PORTF.PIN4CTRL = PORT_OPC_WIREDANDPULL_gc;
 b10:	d8 e3       	ldi	r29, 0x38	; 56
 b12:	d4 8b       	std	Z+20, r29	; 0x14

	/* Set SS output to high. (No slave addressed). */
	PORTF.OUTSET = PIN4_bm;
 b14:	c5 83       	std	Z+5, r28	; 0x05

	/* Initialize SPI master on port F for the IMU communication. */
	SPI_MasterInit(&spiMasterF,
 b16:	0f 2e       	mov	r0, r31
 b18:	f3 e0       	ldi	r31, 0x03	; 3
 b1a:	af 2e       	mov	r10, r31
 b1c:	f0 2d       	mov	r31, r0
 b1e:	c1 2c       	mov	r12, r1
 b20:	e1 2c       	mov	r14, r1
 b22:	00 e0       	ldi	r16, 0x00	; 0
 b24:	20 e0       	ldi	r18, 0x00	; 0
 b26:	40 ea       	ldi	r20, 0xA0	; 160
 b28:	56 e0       	ldi	r21, 0x06	; 6
 b2a:	60 ec       	ldi	r22, 0xC0	; 192
 b2c:	7b e0       	ldi	r23, 0x0B	; 11
 b2e:	8c e6       	ldi	r24, 0x6C	; 108
 b30:	91 e2       	ldi	r25, 0x21	; 33
 b32:	31 d0       	rcall	.+98     	; 0xb96 <SPI_MasterInit>
		SPI_MODE_0_gc,							//The UM6 SPI clock (SCK) is active high, with data clocked in on the first rising edge1
		SPI_INTLVL_OFF_gc,
		false,									// false to double clock mode
		SPI_PRESCALER_DIV128_gc);					//32MHz /128 = 250kHz  MAX rate is 400kHz but there is not prescaler

		SPIF.DATA = 0x00;						// init SPI data register
 b34:	e0 ec       	ldi	r30, 0xC0	; 192
 b36:	fb e0       	ldi	r31, 0x0B	; 11
 b38:	13 82       	std	Z+3, r1	; 0x03
		
		
			///* Initialize SPI master on port F for the IMU communication. */
	///* Init SS pin as output with wired AND and pull-up. */
	////*************************************************************
	PORTC.DIRSET = PIN4_bm;
 b3a:	e0 e4       	ldi	r30, 0x40	; 64
 b3c:	f6 e0       	ldi	r31, 0x06	; 6
 b3e:	c1 83       	std	Z+1, r28	; 0x01
	PORTC.PIN4CTRL = PORT_OPC_WIREDANDPULL_gc;
 b40:	d4 8b       	std	Z+20, r29	; 0x14

	/* Set SS output to high. (No slave addressed). */
	PORTC.OUTSET = PIN4_bm;
 b42:	c5 83       	std	Z+5, r28	; 0x05

	/* Initialize SPI master on port F for the IMU communication. */
	SPI_MasterInit(&spiMasterC,
 b44:	68 94       	set
 b46:	aa 24       	eor	r10, r10
 b48:	a1 f8       	bld	r10, 1
 b4a:	20 e0       	ldi	r18, 0x00	; 0
 b4c:	40 e4       	ldi	r20, 0x40	; 64
 b4e:	56 e0       	ldi	r21, 0x06	; 6
 b50:	60 ec       	ldi	r22, 0xC0	; 192
 b52:	78 e0       	ldi	r23, 0x08	; 8
 b54:	83 e7       	ldi	r24, 0x73	; 115
 b56:	91 e2       	ldi	r25, 0x21	; 33
 b58:	1e d0       	rcall	.+60     	; 0xb96 <SPI_MasterInit>
		SPI_MODE_0_gc,							//The UM6 SPI clock (SCK) is active high, with data clocked in on the first rising edge1
		SPI_INTLVL_OFF_gc,
		false,									// false to double clock mode
		SPI_PRESCALER_DIV64_gc);				//32MHz /128 = 250kHz  MAX rate is 400kHz but there is not prescaler

		SPIC.DATA = 0x00;						// init SPI data register
 b5a:	e0 ec       	ldi	r30, 0xC0	; 192
 b5c:	f8 e0       	ldi	r31, 0x08	; 8
 b5e:	13 82       	std	Z+3, r1	; 0x03
	
		
		/* Initialize SPI master on port F for the PC communication */
		//*************************************************************
		/* Init SS pin as output with wired AND and pull-up. */
		PORTE.DIRSET = PIN4_bm;
 b60:	e0 e8       	ldi	r30, 0x80	; 128
 b62:	f6 e0       	ldi	r31, 0x06	; 6
 b64:	c1 83       	std	Z+1, r28	; 0x01
		PORTE.PIN4CTRL = PORT_OPC_WIREDANDPULL_gc;
 b66:	d4 8b       	std	Z+20, r29	; 0x14

		/* Set SS output to high. (No slave addressed). */
		PORTE.OUTSET = PIN4_bm;
 b68:	c5 83       	std	Z+5, r28	; 0x05

		SPI_MasterInit(&spiMasterE,
 b6a:	0f 2e       	mov	r0, r31
 b6c:	f3 e0       	ldi	r31, 0x03	; 3
 b6e:	af 2e       	mov	r10, r31
 b70:	f0 2d       	mov	r31, r0
 b72:	20 e0       	ldi	r18, 0x00	; 0
 b74:	40 e8       	ldi	r20, 0x80	; 128
 b76:	56 e0       	ldi	r21, 0x06	; 6
 b78:	60 ec       	ldi	r22, 0xC0	; 192
 b7a:	7a e0       	ldi	r23, 0x0A	; 10
 b7c:	8a e7       	ldi	r24, 0x7A	; 122
 b7e:	91 e2       	ldi	r25, 0x21	; 33
 b80:	0a d0       	rcall	.+20     	; 0xb96 <SPI_MasterInit>
		false,
		SPI_MODE_0_gc,							//The UM6 SPI clock (SCK) is active high, with data clocked in on the first rising edge1
		SPI_INTLVL_OFF_gc,
		false,									// false to double clock mode
		SPI_PRESCALER_DIV128_gc);				//32MHz /64 = 500,000 bps
		SPIE.DATA = 0x00;						// init SPI data register
 b82:	e0 ec       	ldi	r30, 0xC0	; 192
 b84:	fa e0       	ldi	r31, 0x0A	; 10
 b86:	13 82       	std	Z+3, r1	; 0x03

}
 b88:	df 91       	pop	r29
 b8a:	cf 91       	pop	r28
 b8c:	0f 91       	pop	r16
 b8e:	ef 90       	pop	r14
 b90:	cf 90       	pop	r12
 b92:	af 90       	pop	r10
 b94:	08 95       	ret

00000b96 <SPI_MasterInit>:
                    bool lsbFirst,
                    SPI_MODE_t mode,
                    SPI_INTLVL_t intLevel,
                    bool clk2x,
                    SPI_PRESCALER_t clockDivision)
{
 b96:	af 92       	push	r10
 b98:	cf 92       	push	r12
 b9a:	ef 92       	push	r14
 b9c:	0f 93       	push	r16
 b9e:	fc 01       	movw	r30, r24
	spi->module         = module;
 ba0:	60 83       	st	Z, r22
 ba2:	71 83       	std	Z+1, r23	; 0x01
	spi->port           = port;
 ba4:	42 83       	std	Z+2, r20	; 0x02
 ba6:	53 83       	std	Z+3, r21	; 0x03
	spi->interrupted    = false;
 ba8:	14 82       	std	Z+4, r1	; 0x04

	spi->module->CTRL   = clockDivision |                  /* SPI prescaler. */
 baa:	cc 20       	and	r12, r12
 bac:	11 f0       	breq	.+4      	; 0xbb2 <SPI_MasterInit+0x1c>
 bae:	90 e8       	ldi	r25, 0x80	; 128
 bb0:	01 c0       	rjmp	.+2      	; 0xbb4 <SPI_MasterInit+0x1e>
 bb2:	90 e0       	ldi	r25, 0x00	; 0
 bb4:	22 23       	and	r18, r18
 bb6:	11 f0       	breq	.+4      	; 0xbbc <SPI_MasterInit+0x26>
 bb8:	80 e2       	ldi	r24, 0x20	; 32
 bba:	01 c0       	rjmp	.+2      	; 0xbbe <SPI_MasterInit+0x28>
 bbc:	80 e0       	ldi	r24, 0x00	; 0
 bbe:	00 65       	ori	r16, 0x50	; 80
 bc0:	0a 29       	or	r16, r10
 bc2:	09 2b       	or	r16, r25
 bc4:	08 2b       	or	r16, r24
 bc6:	db 01       	movw	r26, r22
 bc8:	0c 93       	st	X, r16
	                      (lsbFirst ? SPI_DORD_bm  : 0) |  /* Data order. */
	                      SPI_MASTER_bm |                  /* SPI master. */
	                      mode;                            /* SPI mode. */

	/* Interrupt level. */
	spi->module->INTCTRL = intLevel;
 bca:	a0 81       	ld	r26, Z
 bcc:	b1 81       	ldd	r27, Z+1	; 0x01
 bce:	11 96       	adiw	r26, 0x01	; 1
 bd0:	ec 92       	st	X, r14

	/* No assigned data packet. */
	spi->dataPacket = NULL;
 bd2:	15 82       	std	Z+5, r1	; 0x05
 bd4:	16 82       	std	Z+6, r1	; 0x06

 	/* MOSI and SCK as output. */
	spi->port->DIRSET  = SPI_MOSI_bm | SPI_SCK_bm;
 bd6:	02 80       	ldd	r0, Z+2	; 0x02
 bd8:	f3 81       	ldd	r31, Z+3	; 0x03
 bda:	e0 2d       	mov	r30, r0
 bdc:	80 ea       	ldi	r24, 0xA0	; 160
 bde:	81 83       	std	Z+1, r24	; 0x01
}
 be0:	0f 91       	pop	r16
 be2:	ef 90       	pop	r14
 be4:	cf 90       	pop	r12
 be6:	af 90       	pop	r10
 be8:	08 95       	ret

00000bea <TC0_ConfigClockSource>:
 *  \param tc              Timer/Counter module instance.
 *  \param clockSelection  Timer/Counter clock source setting.
 */
void TC0_ConfigClockSource( volatile TC0_t * tc, TC_CLKSEL_t clockSelection )
{
	tc->CTRLA = ( tc->CTRLA & ~TC0_CLKSEL_gm ) | clockSelection;
 bea:	fc 01       	movw	r30, r24
 bec:	20 81       	ld	r18, Z
 bee:	20 7f       	andi	r18, 0xF0	; 240
 bf0:	62 2b       	or	r22, r18
 bf2:	60 83       	st	Z, r22
 bf4:	08 95       	ret

00000bf6 <initUART>:
void initUART()
{
	
	//  XBEE on USARTD1
	/* PD6 (RXD1) input*/
	PORTD.DIRCLR = PIN6_bm;
 bf6:	e0 e6       	ldi	r30, 0x60	; 96
 bf8:	f6 e0       	ldi	r31, 0x06	; 6
 bfa:	90 e4       	ldi	r25, 0x40	; 64
 bfc:	92 83       	std	Z+2, r25	; 0x02
	/* PD7 (TXD1) as output. */
	PORTD.DIRSET = PIN7_bm;
 bfe:	80 e8       	ldi	r24, 0x80	; 128
 c00:	81 83       	std	Z+1, r24	; 0x01
	
	
	//  IMU on USARTC1
	/* PC6 (RXD1) input*/
	PORTC.DIRCLR = PIN6_bm;
 c02:	e0 e4       	ldi	r30, 0x40	; 64
 c04:	f6 e0       	ldi	r31, 0x06	; 6
 c06:	92 83       	std	Z+2, r25	; 0x02
	/* PD7 (TXD1) as output. */
	PORTC.DIRSET = PIN7_bm;
 c08:	81 83       	std	Z+1, r24	; 0x01
	
	USART_Format_Set(&XBEE_USART, USART_CHSIZE_8BIT_gc, USART_PMODE_DISABLED_gc, true);
 c0a:	e0 eb       	ldi	r30, 0xB0	; 176
 c0c:	f9 e0       	ldi	r31, 0x09	; 9
 c0e:	8b e0       	ldi	r24, 0x0B	; 11
 c10:	85 83       	std	Z+5, r24	; 0x05
	USART_Baudrate_Set(&XBEE_USART, 1047 , -6);			// set for 32MHZ and 115200
 c12:	87 e1       	ldi	r24, 0x17	; 23
 c14:	86 83       	std	Z+6, r24	; 0x06
 c16:	84 ea       	ldi	r24, 0xA4	; 164
 c18:	87 83       	std	Z+7, r24	; 0x07
	
	/* Enable both RX and TX. */
	USART_Rx_Enable(&XBEE_USART);
 c1a:	84 81       	ldd	r24, Z+4	; 0x04
 c1c:	80 61       	ori	r24, 0x10	; 16
 c1e:	84 83       	std	Z+4, r24	; 0x04
	USART_Tx_Enable(&XBEE_USART);
 c20:	84 81       	ldd	r24, Z+4	; 0x04
 c22:	88 60       	ori	r24, 0x08	; 8
 c24:	84 83       	std	Z+4, r24	; 0x04
 c26:	08 95       	ret

00000c28 <put_USART_PC_char>:
void put_USART_PC_char(uint8_t sendThis)
{

	do{

	}while(!USART_IsTXDataRegisterEmpty(&XBEE_USART));
 c28:	e0 eb       	ldi	r30, 0xB0	; 176
 c2a:	f9 e0       	ldi	r31, 0x09	; 9
 c2c:	91 81       	ldd	r25, Z+1	; 0x01
 c2e:	95 ff       	sbrs	r25, 5
 c30:	fd cf       	rjmp	.-6      	; 0xc2c <put_USART_PC_char+0x4>
	USART_PutChar(&XBEE_USART, sendThis);
 c32:	80 93 b0 09 	sts	0x09B0, r24
 c36:	08 95       	ret

00000c38 <sendData_int16_t>:
}


//send 16 bit data on USART, 2 bytes
void sendData_int16_t(int16_t sendthis)
{
 c38:	cf 93       	push	r28
 c3a:	df 93       	push	r29
 c3c:	ec 01       	movw	r28, r24
	put_USART_PC_char( MASK_TOP_BYTE & (sendthis >> 8));
 c3e:	8d 2f       	mov	r24, r29
 c40:	90 e0       	ldi	r25, 0x00	; 0
 c42:	f2 df       	rcall	.-28     	; 0xc28 <put_USART_PC_char>
	put_USART_PC_char (MASK_TOP_BYTE & sendthis);
 c44:	ce 01       	movw	r24, r28
 c46:	99 27       	eor	r25, r25
 c48:	ef df       	rcall	.-34     	; 0xc28 <put_USART_PC_char>
}
 c4a:	df 91       	pop	r29
 c4c:	cf 91       	pop	r28
 c4e:	08 95       	ret

00000c50 <__divmodhi4>:
 c50:	97 fb       	bst	r25, 7
 c52:	07 2e       	mov	r0, r23
 c54:	16 f4       	brtc	.+4      	; 0xc5a <__divmodhi4+0xa>
 c56:	00 94       	com	r0
 c58:	06 d0       	rcall	.+12     	; 0xc66 <__divmodhi4_neg1>
 c5a:	77 fd       	sbrc	r23, 7
 c5c:	08 d0       	rcall	.+16     	; 0xc6e <__divmodhi4_neg2>
 c5e:	0b d0       	rcall	.+22     	; 0xc76 <__udivmodhi4>
 c60:	07 fc       	sbrc	r0, 7
 c62:	05 d0       	rcall	.+10     	; 0xc6e <__divmodhi4_neg2>
 c64:	3e f4       	brtc	.+14     	; 0xc74 <__divmodhi4_exit>

00000c66 <__divmodhi4_neg1>:
 c66:	90 95       	com	r25
 c68:	81 95       	neg	r24
 c6a:	9f 4f       	sbci	r25, 0xFF	; 255
 c6c:	08 95       	ret

00000c6e <__divmodhi4_neg2>:
 c6e:	70 95       	com	r23
 c70:	61 95       	neg	r22
 c72:	7f 4f       	sbci	r23, 0xFF	; 255

00000c74 <__divmodhi4_exit>:
 c74:	08 95       	ret

00000c76 <__udivmodhi4>:
 c76:	aa 1b       	sub	r26, r26
 c78:	bb 1b       	sub	r27, r27
 c7a:	51 e1       	ldi	r21, 0x11	; 17
 c7c:	07 c0       	rjmp	.+14     	; 0xc8c <__udivmodhi4_ep>

00000c7e <__udivmodhi4_loop>:
 c7e:	aa 1f       	adc	r26, r26
 c80:	bb 1f       	adc	r27, r27
 c82:	a6 17       	cp	r26, r22
 c84:	b7 07       	cpc	r27, r23
 c86:	10 f0       	brcs	.+4      	; 0xc8c <__udivmodhi4_ep>
 c88:	a6 1b       	sub	r26, r22
 c8a:	b7 0b       	sbc	r27, r23

00000c8c <__udivmodhi4_ep>:
 c8c:	88 1f       	adc	r24, r24
 c8e:	99 1f       	adc	r25, r25
 c90:	5a 95       	dec	r21
 c92:	a9 f7       	brne	.-22     	; 0xc7e <__udivmodhi4_loop>
 c94:	80 95       	com	r24
 c96:	90 95       	com	r25
 c98:	bc 01       	movw	r22, r24
 c9a:	cd 01       	movw	r24, r26
 c9c:	08 95       	ret

00000c9e <_exit>:
 c9e:	f8 94       	cli

00000ca0 <__stop_program>:
 ca0:	ff cf       	rjmp	.-2      	; 0xca0 <__stop_program>
